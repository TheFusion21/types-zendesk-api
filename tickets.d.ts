/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/lotus/assignables/autocomplete.json": {
    /**
     * List assignable groups and agents based on query matched against name
     * @description List assignable groups and agents based on query matched against name
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListAssigneeFieldAssignableGroupsAndAgentsSearch"];
  };
  "/api/lotus/assignables/groups.json": {
    /**
     * List assignable groups on the AssigneeField
     * @description List assignable groups on the AssigneeField
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListAssigneeFieldAssignableGroups"];
  };
  "/api/lotus/assignables/groups/{group_id}/agents.json": {
    /**
     * List assignable agents from a group on the AssigneeField
     * @description List assignable agents from a group on the AssigneeField
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListAssigneeFieldAssignableGroupAgents"];
  };
  "/api/v2/{target_type}/{target_id}/relationship_fields/{field_id}/{source_type}": {
    /**
     * Get sources by target
     * @description Returns a list of source objects whose values are populated with the id of a related target object.  For example,
     * if you have a lookup field called "Success Manager" on a ticket, this endpoint can answer the question,
     * "What tickets (sources) is this user (found by `target_type` and `target_id`)
     * assigned as the 'Success Manager' (field referenced by `field_id`)?"
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["GetSourcesByTarget"];
  };
  "/api/v2/account/settings": {
    /**
     * Show Settings
     * @description Shows the settings that are available for the account.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowAccountSettings"];
    /**
     * Update Account Settings
     * @description Updates settings for the account. See [JSON Format](#json-format) above for the settings you can update.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateAccountSettings"];
  };
  "/api/v2/accounts": {
    /** Create Trial Account */
    post: operations["CreateTrialAccount"];
  };
  "/api/v2/accounts/available": {
    /**
     * Verify Subdomain Availability
     * @description Zendesk Support credentials are not required to access this endpoint. You can use any Zendesk Support subdomain.
     *
     * Returns "true" if the subdomain is available.
     */
    get: operations["VerifySubdomainAvailability"];
  };
  "/api/v2/activities": {
    /**
     * List Activities
     * @description Lists ticket activities in the last 30 days affecting the agent making the request.
     * Also sideloads the following arrays of user records:
     *
     * - actors - All actors involved in the listed activities
     * - users - All users involved in the listed activities
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListActivities"];
    parameters: {
      query?: {
        since?: components["parameters"]["ActivitySince"];
      };
    };
  };
  "/api/v2/activities/{activity_id}": {
    /**
     * Show Activity
     * @description Lists a specific activity.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowActivity"];
    parameters: {
      path: {
        activity_id: components["parameters"]["ActivityId"];
      };
    };
  };
  "/api/v2/activities/count": {
    /**
     * Count Activities
     * @description Returns an approximate count of ticket activities in the last 30 days affecting the agent making the request. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountActivities"];
  };
  "/api/v2/any_channel/channelback/report_error": {
    /**
     * Report Channelback Error to Zendesk
     * @description #### Allowed For
     *
     * * Admins
     *
     * #### Request parameters
     *
     * The POST request takes a JSON object parameter which contains information about the
     * problematic [channelback](/documentation/channel_framework/understanding-the-channel-framework/channelback/).
     *
     * | Name               | Type      | Required  | Comments
     * | ------------------ | ----------| --------- | -------------------
     * | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed.  This was passed to the integration service when the administrator set up the account
     * | external_id        | string    | yes       | Unique identifier of the external resource from the original channelback (string)
     * | description        | string    | no        | A human readable description of the error
     * | request_id         | string    | no        | A unique identifier for the request
     *
     *
     * #### Response format
     *
     * The response does not include a response body
     */
    post: operations["ReportChannelbackError"];
  };
  "/api/v2/any_channel/push": {
    /**
     * Push Content to Support
     * @description Pushes Channel framework content to Zendesk.
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Request parameters
     *
     * The POST request takes a JSON object parameter which contains data about all
     * the resources that the client is pushing.
     *
     * | Name               | Type      | Required  | Comments
     * | ------------------ | ----------| --------- | -------------------
     * | instance_push_id   | string    | yes       | The account ID where data will be pushed. This was passed to the integration service when the administrator set up the account
     * | request_id         | string    | no        | A unique identifier for the push request
     * | external_resources | array     | yes       | The [resources](#external_resource-object) to push
     *
     * #### external_resource object
     *
     * | Name               | Type                               | Max length | Mandatory | Comments
     * |------------------- | ---------------------------------- |------------| --------- | ----------
     * | external_id        | string                             | 255        | yes       | Unique identifier of the external resource. Must be ASCII characters
     * | internal_note      | boolean                            |            | no        | If true creates a new internal note comment
     * | message            | string                             | 65535      | yes       | Text to be converted to a ticket or comment
     * | html_message       | string                             | 65535      | no        | HTML version of message
     * | parent_id          | string                             | 511        | no        | Unique identifier of the external resource for which this is a response. Used to choose the correct thread. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
     * | thread_id          | string                             | 255        | no        | Arbitrary identifier of the thread to which this item should belong. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
     * | created_at         | string                             |            | yes       | When the resource was created in the origin system, as an ISO 8601 extended format date-time. Example: '2015-09-08T22:48:09Z'
     * | author             | object                             |            | yes       | See [author object](#author-object) below
     * | display_info       | array                              |            | no        | Array of integration-specific data used by apps to modify the agent UI. See [display_info object](#display_info-object) below
     * | allow_channelback  | boolean                            |            | no        | If false, prevents the agent from making additional comments on the message in the Zendesk interface
     * | fields             | array                              |            | no        | Array of ticket fields to set in Zendesk and their values. See [fields array](#fields-array)
     * | file_urls          | array                              | 10         | no        | Array of files to be imported into Zendesk. See [file urls](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#file-urls) in the Channel framework docs
     *
     * #### author object
     *
     * | Name        | Type   | Max chars | Mandatory | Comments
     * |------------ | ------ |---------- |---------- |-----------
     * | external_id | string | 255       | yes       | Unique identifier of the user in the origin service
     * | name        | string | 255       | no        | If not supplied, defaults to external id
     * | image_url   | string | 255       | no        | URL to an image for the user
     * | locale      | String | 255       | no        | The user's locale. Must be one of the supported [locales](/api-reference/ticketing/account-configuration/locales/#list-available-public-locales) in Zendesk
     * | fields      | array  |           | no        | Array of items containing user field identifier ('id') and value of field ('value'.)  For system fields ('notes' or 'details'), the identifier is the English name. For custom fields, the identifier may be the ID or the name
     *
     * #### display_info object
     *
     * | Name | Type   | Max chars | Mandatory | Comments
     * |----- | ------ |---------- |---------- |-----------
     * | type | string | 255       | yes       | Globally unique type identifier defined by the integration origin service. Examples: a GUID or URI
     * | data | string | 65535     | yes       | JSON data containing display hints
     *
     * #### fields array
     *
     * The `fields` array lists ticket fields to set in Zendesk and their values. Each item consists of a field identifier (`id`) and a value (`value`) for the field. For Zendesk system fields such as `subject`, the identifier is the English name. For custom fields, the identifier may be a field ID or a name. See [Ticket Fields](/api-reference/ticketing/tickets/ticket_fields/).
     *
     * The `fields` array can only set ticket values on ticket creation, not on ticket updates.
     *
     * #### Response format
     *
     * The response is a JSON object containing a single key:
     *
     * | Name      | Type     | Comments
     * | --------- | -------- | -------------------
     * | results   | array    | An array of [result objects](#result-object)
     *
     * The `results` array contains an entry for each item in the incoming `external_resources` array, in the
     * same order.  For example, if you call `push` with 3 external resources, a successful response will include
     * `results` with three entries, corresponding to your 3 resources.
     *
     * #### result object
     *
     * | Name                 | Type                           | Comments
     * | -------------------- | ------------------------------ | -------------------
     * | external_resource_id | string                         | The external ID of the resource, as passed in
     * | status               | object                         | The status of the import for the indicated resource. See [status object](#status-object)
     *
     * #### status object
     *
     * | Name        | Type   | Comments
     * | ----------- | ------ | -------------------
     * | code        | string | A code indicating the status of the import of the resource, as described in [status codes](#status-codes)
     * | description | string | In the case of an exception, a description of the exception. Otherwise, not present.
     *
     * #### status codes
     *
     * | Key                                       | Description
     * | ----------------------------------------- | ----------------
     * | success                                   | The external resource was successfully converted to a ticket or comment
     * | already_imported                          | Reimport of the external resource was skipped due to a pre-existing ticket or comment for the resource
     * | could_not_locate_parent_external_resource | The parent resource, as identified by parent_id in the [request](#request-parameters), could not be found. The unrecognized parent ID is returned in the description of the [status](#status-object)
     * | processing_error                          | An internal exception occurred while processing the resource. See `description` in the [status object](#status-object)
     * | halted                                    | This resource was not processed because processing of previous resources failed
     */
    post: operations["PushContentToSupport"];
  };
  "/api/v2/any_channel/validate_token": {
    /**
     * Validate Token
     * @description #### Allowed For
     *
     * * Admins
     *
     * #### Request parameters
     *
     * The POST request takes a JSON object parameter which contains the token to be validated.
     *
     * | Name               | Type      | Required  | Comments
     * | ------------------ | ----------| --------- | -------------------
     * | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed. This was passed to the integration service when the administrator set up the account
     * | request_id         | string    | no        | A unique identifier for the push request
     *
     * #### Response format
     *
     * The response body is empty.
     */
    post: operations["ValidateToken"];
  };
  "/api/v2/attachments/{attachment_id}": {
    /**
     * Show Attachment
     * @description Shows attachment details. You can get the value of the `attachment_id` parameter by listing the ticket's comments.
     * See [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments). Each comment
     * in the list has an `attachments` list that specifies an `id` for each attachment.
     *
     *
     *  #### Allowed for
     *
     *  * Agents
     */
    get: operations["ShowAttachment"];
    /**
     * Update Attachment for Malware
     * @description Toggles enabling or restricting agent access to attachments with detected malware.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateAttachment"];
  };
  "/api/v2/audit_logs": {
    /**
     * List Audit Logs
     * @description #### Allowed For
     *
     * * Admins on accounts that have audit log access
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     */
    get: operations["ListAuditLogs"];
  };
  "/api/v2/audit_logs/{audit_log_id}": {
    /**
     * Show Audit Log
     * @description #### Allowed For
     *
     * * Admins on accounts that have audit-log access
     */
    get: operations["ShowAuditLog"];
    parameters: {
      path: {
        audit_log_id: components["parameters"]["AuditLogId"];
      };
    };
  };
  "/api/v2/audit_logs/export": {
    /**
     * Export Audit Logs
     * @description #### Allowed For
     *
     * * Admins on accounts that have audit log access
     */
    post: operations["ExportAuditLogs"];
  };
  "/api/v2/autocomplete/tags": {
    /**
     * Search Tags
     * @description Returns an array of registered and recent tag names that start with the characters specified in the `name` query parameter. You must specify at least 2 characters.
     *
     * #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["AutocompleteTags"];
    parameters: {
      query?: {
        name?: components["parameters"]["TagNameFragment"];
      };
    };
  };
  "/api/v2/automations": {
    /**
     * List Automations
     * @description Lists all automations for the current account.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Available Parameters
     *
     * You can pass in any combination of the following optional filters:
     *
     * | Name       | Type    | Comment
     * | ---------- | ------- | -------
     * | active     | boolean | Only active automations if true, inactive automations if false
     * | sort_by    | string  | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
     * | sort_order | string  | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
     *
     * #### Sideloads
     *
     * The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each automation, if present
     * | permissions      | The permissions for each automation
     * | usage_1h         | The number of times each automation has been used in the past hour
     * | usage_24h        | The number of times each automation has been used in the past day
     * | usage_7d         | The number of times each automation has been used in the past week
     * | usage_30d        | The number of times each automation has been used in the past thirty days
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     */
    get: operations["ListAutomations"];
    /**
     * Create Automation
     * @description Creates an automation.
     *
     * New automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.
     *
     * The request must include the following conditions in the `all` array:
     *
     * - At least one time-based condition
     * - At least one condition that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateAutomation"];
  };
  "/api/v2/automations/{automation_id}": {
    /**
     * Show Automation
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowAutomation"];
    /**
     * Update Automation
     * @description Updates an automation.
     *
     * Updated automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.
     *
     * The request must include the following conditions in the `all` array:
     * - At least one time-based condition
     * - At least one condition that checks one of the following fields: 'status', 'type', 'group_id', 'assignee_id', or 'requester_id'
     *
     * **Note**: Updating a condition or action updates both the `conditions` and `actions` arrays, clearing all existing values of both arrays. Include all your conditions and actions when updating any condition or action.
     * **Note**: You might be restricted from updating some default automations.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["UpdateAutomation"];
    /**
     * Delete Automation
     * @description **Note**: You might be restricted from deleting some default automations.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteAutomation"];
    parameters: {
      path: {
        automation_id: components["parameters"]["AutomationId"];
      };
    };
  };
  "/api/v2/automations/active": {
    /**
     * List Active Automations
     * @description Lists all active automations.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Available Parameters
     *
     * You can pass in any combination of the following optional filters:
     *
     * | Name       | Type   | Comment
     * | ---------- | ------ | -------
     * | sort_by    | string | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
     * | sort_order | string | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each automation, if present
     * | permissions      | The permissions for each automation
     * | usage_1h         | The number of times each automation has been used in the past hour
     * | usage_24h        | The number of times each automation has been used in the past day
     * | usage_7d         | The number of times each automation has been used in the past week
     * | usage_30d        | The number of times each automation has been used in the past thirty days
     */
    get: operations["ListActiveAutomations"];
  };
  "/api/v2/automations/destroy_many": {
    /**
     * Bulk Delete Automations
     * @description Deletes the automations corresponding to the provided comma-separated list of IDs.
     *
     * **Note**: You might be restricted from deleting some default automations. If included in a bulk deletion, the unrestricted automations will be deleted.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Request Parameters
     *
     * The DELETE request takes one parameter, an `ids` object that lists the automations to delete.
     *
     * | Name | Description
     * | ---- | -----------
     * | ids  | The IDs of the automations to delete
     *
     * #### Example request
     *
     * ```js
     * {
     *   "ids": "25,23,27,22"
     * }
     * ```
     */
    delete: operations["BulkDeleteAutomations"];
  };
  "/api/v2/automations/search": {
    /**
     * Search Automations
     * @description #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each automation, if present
     * | permissions      | The permissions for each automation
     * | usage_1h         | The number of times each automation has been used in the past hour
     * | usage_24h        | The number of times each automation has been used in the past day
     * | usage_7d         | The number of times each automation has been used in the past week
     * | usage_30d        | The number of times each automation has been used in the past thirty days
     */
    get: operations["SearchAutomations"];
    parameters: {
      query: {
        query: components["parameters"]["AutomationSearchQuery"];
        active?: components["parameters"]["AutomationActive"];
        sort_by?: components["parameters"]["AutomationSortBy"];
        sort_order?: components["parameters"]["AutomationSortOrder"];
        include?: components["parameters"]["AutomationInclude"];
      };
    };
  };
  "/api/v2/automations/update_many": {
    /**
     * Update Many Automations
     * @description **Note**: You might be restricted from updating some default automations. If included in a bulk update, the unrestricted automations will be updated.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Request Parameters
     *
     * The PUT request expects an `automations` object that lists the automations to update.
     *
     * Each automation may have the following properties:
     *
     * | Name     | Mandatory | Description
     * | -------- | --------- | -----------
     * | id       | yes       | The ID of the automation to update
     * | position | no        | The new position of the automation
     * | active   | no        | The active status of the automation (true or false)
     *
     * #### Example Request
     *
     * ```js
     * {
     *   "automations": [
     *     {"id": 25, "position": 3},
     *     {"id": 23, "position": 5},
     *     {"id": 27, "position": 9},
     *     {"id": 22, "position": 7}
     *   ]
     * }
     * ```
     */
    put: operations["UpdateManyAutomations"];
  };
  "/api/v2/bookmarks": {
    /**
     * List Bookmarks
     * @description #### Allowed For
     * - Agents
     */
    get: operations["ListBookmarks"];
    /**
     * Create Bookmark
     * @description #### Allowed For
     * - Agents
     */
    post: operations["CreateBookmark"];
  };
  "/api/v2/bookmarks/{bookmark_id}": {
    /**
     * Delete Bookmark
     * @description #### Allowed For
     * - Agents (own bookmarks only)
     *
     * If the bookmark already exists with a specified ticket id, the response status will be `http Status: 200 OK`.
     */
    delete: operations["DeleteBookmark"];
    parameters: {
      path: {
        bookmark_id: components["parameters"]["BookmarkId"];
      };
    };
  };
  "/api/v2/brands": {
    /**
     * List Brands
     * @description Returns a list of all brands for your account sorted by name.
     *
     * #### Allowed for
     *
     * * Admins, Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListBrands"];
    /**
     * Create Brand
     * @description #### Allowed for
     * - Admins
     */
    post: operations["CreateBrand"];
  };
  "/api/v2/brands/{brand_id}": {
    /**
     * Show a Brand
     * @description Returns a brand for your account.
     *
     * #### Allowed for
     *
     * * Admins, Agents
     */
    get: operations["ShowBrand"];
    /**
     * Update a Brand
     * @description Returns an updated brand.
     *
     * #### Allowed for
     * * Admins
     *
     * #### Updating a Brand's Image
     * A brand image can be updated by uploading a local file using the update brand endpoint. See the **Using curl** sections below for more information.
     */
    put: operations["UpdateBrand"];
    /**
     * Delete a Brand
     * @description Deletes a brand.
     *
     * #### Allowed for
     * - Admins
     */
    delete: operations["DeleteBrand"];
  };
  "/api/v2/brands/{brand_id}/check_host_mapping": {
    /**
     * Check Host Mapping Validity for an Existing Brand
     * @description Returns a JSON object determining whether a host mapping is valid for the given brand.
     *
     * #### Allowed for
     * - Admins
     */
    get: operations["CheckHostMappingValidityForExistingBrand"];
  };
  "/api/v2/brands/check_host_mapping": {
    /**
     * Check Host Mapping Validity
     * @description Returns a JSON object determining whether a host mapping is valid for a given subdomain.
     *
     * #### Allowed for
     *
     * * Admins
     */
    get: operations["CheckHostMappingValidity"];
  };
  "/api/v2/channels/twitter/monitored_twitter_handles": {
    /**
     * List Monitored Twitter Handles
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ListMonitoredTwitterHandles"];
  };
  "/api/v2/channels/twitter/monitored_twitter_handles/{monitored_twitter_handle_id}": {
    /**
     * Show Monitored Twitter Handle
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ShowMonitoredTwitterHandle"];
    parameters: {
      path: {
        monitored_twitter_handle_id: components["parameters"]["MonitoredTwitterHandleId"];
      };
    };
  };
  "/api/v2/channels/twitter/tickets": {
    /**
     * Create Ticket from Tweet
     * @description Turns a tweet into a ticket. You must provide the tweet id as well as the id of a monitored twitter handle configured for your account.
     *
     * The submitter of the ticket is set to be the user submitting the API request.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateTicketFromTweet"];
  };
  "/api/v2/channels/twitter/tickets/{comment_id}/statuses": {
    /**
     * List Twicket statuses
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["GettingTwicketStatus"];
    parameters: {
      path: {
        comment_id: components["parameters"]["CommentId"];
      };
    };
  };
  "/api/v2/channels/voice/agents/{agent_id}/tickets/{ticket_id}/display": {
    /**
     * Open Ticket in Agent's Browser
     * @description Allows you to instruct an agent's browser to open a ticket.
     *
     * When the message is successfully delivered to an agent's browser:
     *
     * ```http
     * Status: 200 OK
     * ```
     *
     * When `agent_id` or `ticket_id` is invalid:
     *
     * ```http
     * Status: 404 Not Found
     * ```
     *
     * #### Allowed For
     * * Agents
     */
    post: operations["OpenTicketInAgentBrowser"];
  };
  "/api/v2/channels/voice/agents/{agent_id}/users/{user_id}/display": {
    /**
     * Open a User's Profile in an Agent's Browser
     * @description Allows you to instruct an agent's browser to open a user's profile.
     *
     * When the message is successfully delivered to an agent's browser:
     *
     * ```http
     * Status: 200 OK
     * ```
     *
     * When `agent_id` or `user_id` is invalid:
     *
     * ```http
     * Status: 404 Not Found
     * ```
     *
     * #### Allowed For
     * * Agents
     */
    post: operations["OpenUsersProfileInAgentBrowser"];
  };
  "/api/v2/channels/voice/tickets": {
    /**
     * Create Ticket or Voicemail Ticket
     * @description #### Allowed For
     * * Agents
     *
     * ### Creating tickets
     *
     * #### Introduction
     *
     * Creating tickets using Talk Partner Edition follows the same conventions as the Create Ticket endpoint. See [Create Ticket](/api-reference/ticketing/tickets/tickets/#create-ticket).
     *
     * #### Request parameters
     *
     * The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
     * You may also include an optional `display_to_agent` value such as the ID of the agent that will see the newly created ticket.
     *
     * Tickets created using this endpoint must have a `via_id` parameter. See the following
     * section for possible values.
     *
     * #### Zendesk Talk Integration Via IDs
     *
     * Tickets created using this endpoint must have one of the following `via_id` parameters:
     *
     * | ID       | Description
     * | ---------| -------------
     * | 44       | Voicemail
     * | 45       | Phone call (inbound)
     * | 46       | Phone call (outbound)
     *
     * ### Creating voicemail tickets
     * #### Request parameters
     *
     * The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
     * The ticket must have a `voice_comment` with the following values:
     *
     * | Name               | Type                  | Comment
     * | ------------------ | ----------------------| -------
     * | from               | string                | Incoming phone number
     * | to                 | string                | Dialed phone number
     * | recording_url      | string                | URL of the recording
     * | started_at         | date                  | [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) timestamp of the call starting time
     * | call_duration      | integer               | Duration in seconds of the call
     * | answered_by_id     | integer               | The agent who answered the call
     * | transcription_text | string                | Transcription of the call (optional)
     * | location           | string                | Location of the caller (optional)
     */
    post: operations["CreateTicketOrVoicemailTicket"];
  };
  "/api/v2/chat_file_redactions/{ticket_id}": {
    /**
     * Redact Chat Comment Attachment
     * @description Permanently removes one or more chat attachments from a chat ticket.
     *
     * **Note**: This does not work on active chats. For chat tickets that predate March 2020, consider using [Redact Ticket Comment In Agent Workspace](#redact-ticket-comment-in-agent-workspace).
     *
     * #### Allowed For
     *
     * - Agents
     *
     * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must enabled for the account. Deleting tickets must be enabled for agents.
     *
     * #### Request Body Properties
     *
     * | Name         | Type    | Required | Description                                                                                                                                          |
     * | ------------ | ------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | chat_id      | string  | true     | The `chat_id` in the `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)               |
     * | chat_indexes | array   | true     | The array of `chat_index` in the `ChatFileAttachment` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) |
     *
     * To get the required body properties, make a request to the [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) endpoint. Example response:
     *
     * ```http
     * Status 200 OK
     * {
     *   "audits": [
     *     "events": [
     *       {
     *         "id": 1932802680168,
     *         "type": "ChatStartedEvent",
     *         "value": {
     *           "visitor_id": "10502823-16EkM3T6VNq7KMd",
     *           "chat_id": "2109.10502823.Sjuj2YrBpXwei",
     *           "history": [
     *             {
     *               "chat_index": 0,
     *               "type": "ChatFileAttachment",
     *               "filename": "image1.jpg"
     *             },
     *             {
     *               "chat_index": 1,
     *               "type": "ChatFileAttachment",
     *               "filename": "image2.jpg"
     *             }
     *           ]
     *         }
     *       }
     *     ]
     *   ]
     * }
     * ```
     */
    put: operations["RedactChatCommentAttachment"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/chat_redactions/{ticket_id}": {
    /**
     * Redact Chat Comment
     * @description Permanently removes words or strings from a chat ticket's comment.
     *
     * Wrap `<redact>` tags around the content in the chat comment you want redacted. Example:
     *
     * ```json
     * {
     *   "text": "My ID number is <redact>847564</redact>!"
     * }
     * ```
     *
     * The characters contained in the tag will be replaced by the ▇ symbol.
     *
     * **Note**: This does not work on active chats. For chat tickets that predate March 2020, consider using [Redact Ticket Comment In Agent Workspace](#redact-ticket-comment-in-agent-workspace).
     *
     * #### Allowed For
     *
     * - Agents
     *
     * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must enabled for the account. Deleting tickets must be enabled for agents.
     *
     * #### Request Body Properties
     *
     * | Name                     | Type    | Required | Description                                                                                                                                                             |
     * | ------------------------ | ------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | chat_id                  | string  | true     | The `chat_id` in the `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)                                  |
     * | chat_index               | integer | true     | The `chat_index` in the `ChatMessage` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)                                    |
     * | text                     | string  | true     | The `message` in the `ChatMessage` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits).  Wrap `message` with `<redact>` tags |
     *
     * To get the required body properties, make a request to the [Ticket Audit](/api-reference/ticketing/tickets/ticket_audits) endpoint. Example response:
     *
     * ```http
     * Status 200 OK
     * {
     *   "audits": [
     *     "events": [
     *       {
     *         "id": 1932802680168,
     *         "type": "ChatStartedEvent",
     *         "value": {
     *           "visitor_id": "10502823-16EkM3T6VNq7KMd",
     *           "chat_id": "2109.10502823.Sjuj2YrBpXwei",
     *           "history": [
     *             {
     *               "chat_index": 0,
     *               "type": "ChatMessage",
     *               "message": "My ID number is 847564!"
     *             }
     *           ]
     *         }
     *       }
     *     ]
     *   ]
     * }
     * ```
     */
    put: operations["RedactChatComment"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/comment_redactions/{ticket_comment_id}": {
    /**
     * Redact Ticket Comment In Agent Workspace
     * @description Redaction allows you to permanently remove words, strings, or attachments from a ticket comment.
     *
     * In the `html_body` of the comment, wrap the content you want redacted in `<redact>` tags. Example:
     *
     * ```json
     * {
     *   "html_body": "<div class=\"zd-comment\" dir=\"auto\">My ID number is <redact>847564</redact>!</div>",
     *   "ticket_id":100
     * }
     * ```
     *
     * The characters in the redact tag will be replaced by the ▇ symbol.
     *
     * To redact HTML elements such inline images, anchor tags, and links, add the `redact` tag attribute to the element as well as the `<redact>` tag to inner text, if any. Example:
     *
     * `<a href="http://example.com" redact><redact>some link</redact></a>`
     *
     * The `redact` attribute only redacts the tag. Any inner text will be left behind if not enclosed in a `<redact>` tag.
     *
     * Redaction is permanent and can not be undone. Data is permanently deleted from Zendesk servers with no way to recover it.
     *
     * This endpoint provides all the same functionality that the [Redact String in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment) endpoint provides, plus:
     *
     * - Redaction of comments in closed tickets
     *
     * - Redaction of comments in archived tickets
     *
     * - Redaction of formatted text (bold, italics, hyperlinks)
     *
     * **Limitations**: When content is redacted from an email comment, the content is also redacted from the original email through a background job. It may take a while for the changes to be completed.
     *
     * **Note**: We recommend using this endpoint instead of the [Redact String in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment) endpoint, which will eventually be deprecated.
     *
     * #### Allowed For
     *
     * - Agents
     *
     * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must be enabled on the account. For professional accounts, deleting tickets must be enabled for agents. On Enterprise accounts, you can assign agents to a custom role with permissions to redact ticket content.
     *
     * #### Request Body Properties
     *
     * | Name                     | Type    | Required | Description                                                                                                                                      |
     * | -------------------------| ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | ticket_id                | integer | true     | The ID of the ticket                                                                                                                             |
     * | html_body                | string  | false    | The `html_body` of the comment containing `<redact>` tags or `redact` attributes                                           |
     * | external_attachment_urls | array   | false    | Array of attachment URLs belonging to the comment to be redacted. See [`content_url` property of Attachment](/api-reference/ticketing/tickets/ticket-attachments/) |
     */
    put: operations["RedactTicketCommentInAgentWorkspace"];
    parameters: {
      path: {
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
  };
  "/api/v2/custom_objects": {
    /**
     * List Custom Objects
     * @description Lists all undeleted custom objects for the account
     * #### Allowed For
     * * Agents
     */
    get: operations["ListCustomObjects"];
    /**
     * Create Custom Object
     * @description Creates an object describing all the properties required to create a custom object record
     * #### Allowed For
     * * Admins
     */
    post: operations["CreateCustomObject"];
  };
  "/api/v2/custom_objects/{custom_object_key}": {
    /**
     * Show Custom Object
     * @description Returns an object with the specified key
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowCustomObject"];
    /**
     * Delete Custom Object
     * @description Permanently deletes the custom object with the specified key
     * #### Allowed For
     * * Admins
     */
    delete: operations["DeleteCustomObject"];
    /**
     * Update Custom Object
     * @description Updates an individual custom object. The updating rules are as follows:
     * * Takes a `custom_object` object that specifies the properties to update
     * * The `key` property cannot be updated
     * #### Allowed For
     * * Admins
     */
    patch: operations["UpdateCustomObject"];
  };
  "/api/v2/custom_objects/{custom_object_key}/fields": {
    /**
     * List Custom Object Fields
     * @description Lists all undeleted custom fields for the specified object.
     *
     * #### Allowed For
     * * Agents
     *
     * #### Pagination
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListCustomObjectFields"];
    /**
     * Create Custom Object Field
     * @description Creates any of the following custom field types:
     *
     * * text (default when no "type" is specified)
     * * textarea
     * * checkbox
     * * date
     * * integer
     * * decimal
     * * regexp
     * * dropdown
     * * lookup
     *
     * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateCustomObjectField"];
  };
  "/api/v2/custom_objects/{custom_object_key}/fields/{custom_object_field_key_or_id}": {
    /**
     * Show Custom Object Field
     * @description Returns a custom field for a specific object using a provided key or id of the field.
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowCustomObjectField"];
    /**
     * Delete Custom Object Field
     * @description Deletes a field with the specified key. Note: You can't delete standard fields.
     * #### Allowed For
     * * Admins
     */
    delete: operations["DeleteCustomObjectField"];
    /**
     * Update Custom Object Field
     * @description Updates individual custom object fields. The updating rules are as follows:
     * * Takes a `custom_object_field` object that specifies the properties to update
     * * The `key` property cannot be updated
     * * If updating a standard field, only the `title` and `description` properties can be updated.
     * #### Allowed For
     * * Admins
     */
    patch: operations["UpdateCustomObjectField"];
  };
  "/api/v2/custom_objects/{custom_object_key}/fields/reorder": {
    /**
     * Reorder Custom Fields of an Object
     * @description Sets a preferred order of custom fields for a specific object by providing field ids in the desired order.
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["ReorderCustomObjectFields"];
  };
  "/api/v2/custom_objects/{custom_object_key}/jobs": {
    /**
     * Custom Object Record Bulk Jobs
     * @description Queues a background job to perform bulk actions on up to 100 custom object records per single request.
     * Takes a `job` object with two nested fields:
     * * `action`, one of:
     *     * `"create"`
     *     * `"delete"`
     *     * `"delete_by_external_id"`
     *     * `"create_or_update_by_external_id"`
     *     * `"update"`
     * * `items`
     *     * For a `"create"` action, an array of JSON objects representing the custom object records being created
     *     * For a `"delete"` action, an array of strings representing Zendesk record ids
     *     * For a `"delete_by_external_id"` action, an array of strings representing external ids
     *     * For a `"create_or_update_by_external_id"` action, an array of JSON objects representing the custom object records being created or updated
     *     * For an `"update"` action, an array of JSON objects representing the custom object records being updated
     *
     * #### Allowed For
     * * Agents
     *
     * #### Response ###
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     */
    post: operations["CustomObjectRecordBulkJobs"];
  };
  "/api/v2/custom_objects/{custom_object_key}/limits/field_limit": {
    /**
     * Custom Object Fields Limit
     * @description List the current count and the limit for a custom object's fields
     * #### Allowed For
     * * Agents
     */
    get: operations["CustomObjectFieldsLimit"];
  };
  "/api/v2/custom_objects/{custom_object_key}/records": {
    /**
     * List Custom Object Records
     * @description Lists all undeleted custom object records for the specified object
     *
     *  #### Pagination
     *
     * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
     * #### Allowed For
     * * Agents
     */
    get: operations["ListCustomObjectRecords"];
    /**
     * Create Custom Object Record
     * @description Creates a custom object record according to all the properties described by a custom object definition
     * #### Allowed For
     * * Agents
     */
    post: operations["CreateCustomObjectRecord"];
    /**
     * Delete Custom Object Record by External Id
     * @description Deletes a record with the specified external id.
     * #### Allowed For
     * * Agents
     */
    delete: operations["DeleteCustomObjectRecordByExternalId"];
    /**
     * Set Custom Object Record by External Id
     * @description If a record exists for the given external id, updates it. Only the specified attributes are updated. Otherwise, creates a new record with the provided external id and attributes.
     * #### Allowed For
     * * Agents
     */
    patch: operations["UpsertCustomObjectRecord"];
  };
  "/api/v2/custom_objects/{custom_object_key}/records/{custom_object_record_id}": {
    /**
     * Show Custom Object Record
     * @description Returns a custom record for a specific object using a provided id.
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowCustomObjectRecord"];
    /**
     * Delete Custom Object Record
     * @description Deletes a record with the specified id
     * #### Allowed For
     * * Agents
     */
    delete: operations["DeleteCustomObjectRecord"];
    /**
     * Update Custom Object Record
     * @description Updates an individual custom object record. The updating rules are as follows:
     * * Takes a `custom_object_record` object that specifies the properties to update
     * * The custom object fields should be nested inside a `custom_object_fields` object
     * #### Allowed For
     * * Agents
     */
    patch: operations["UpdateCustomObjectRecord"];
  };
  "/api/v2/custom_objects/{custom_object_key}/records/autocomplete": {
    /**
     * Autocomplete Custom Object Record Search
     * @description Retrieves an array of custom object records that have a field value that matches the value specified in the `name` parameter.
     *
     * #### Pagination
     *
     * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
     * * Returns the first 10,000 records sorted by relevancy with page limits.
     * #### Allowed For
     * * Agents
     */
    get: operations["AutocompleteCustomObjectRecordSearch"];
  };
  "/api/v2/custom_objects/{custom_object_key}/records/count": {
    /**
     * Count Custom Object Records
     * @description Returns a total count of records for a specific custom object as well as the time the count was refreshed.
     * #### Allowed For
     * * Agents
     */
    get: operations["CountCustomObjectRecords"];
  };
  "/api/v2/custom_objects/{custom_object_key}/records/search": {
    /**
     * Search Custom Object Records
     * @description Returns an array of custom object records that meet the search criteria
     *
     * #### Pagination
     *
     * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
     * * Returns the records sorted by relevancy with page limits. Without a `sort` parameter, only the first 10,000 records are returned. With a `sort` parameter, all records are returned.
     * #### Allowed For
     * * Agents
     */
    get: operations["SearchCustomObjectRecords"];
  };
  "/api/v2/custom_objects/limits/object_limit": {
    /**
     * Custom Objects Limit
     * @description List the current count and the limit for custom objects
     * #### Allowed For
     * * Admins
     */
    get: operations["CustomObjectsLimit"];
  };
  "/api/v2/custom_objects/limits/record_limit": {
    /**
     * Custom Object Records Limit
     * @description List the current count and the limit for custom object records
     * #### Allowed For
     * * Agents
     */
    get: operations["CustomObjectRecordsLimit"];
  };
  "/api/v2/custom_roles": {
    /**
     * List Custom Roles
     * @description #### Availability
     *
     * * Accounts on the Enterprise plan or above
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListCustomRoles"];
    /**
     * Create Custom Role
     * @description #### Availability
     *
     * * Accounts on the Enterprise plan or above
     *
     * #### Allowed for
     *
     * * Administrators
     * * Agents with the `manage_roles` permission
     */
    post: operations["CreateCustomRole"];
  };
  "/api/v2/custom_roles/{custom_role_id}": {
    /**
     * Show Custom Role
     * @description #### Availability
     *
     * * Accounts on the Enterprise plan or above
     *
     * #### Allowed for
     *
     * * Administrators
     * * Agents with the `manage_roles` permission
     */
    get: operations["ShowCustomRoleById"];
    /**
     * Update Custom Role
     * @description #### Availability
     *
     * * Accounts on the Enterprise plan or above
     *
     * #### Allowed for
     *
     * * Administrators
     * Agents with the `manage_roles` permission
     */
    put: operations["UpdateCustomRoleById"];
    /**
     * Delete Custom Role
     * @description #### Availability
     *
     * * Accounts on the Enterprise plan or above
     *
     * #### Allowed for
     *
     * * Administrators
     * * Agents with the `manage_roles` permission
     */
    delete: operations["DeleteCustomRoleById"];
    parameters: {
      path: {
        custom_role_id: components["parameters"]["CustomRoleId"];
      };
    };
  };
  "/api/v2/custom_status/default": {
    /**
     * Bulk Update Default Custom Ticket Status
     * @description Updates the default values for many custom ticket statuses at once.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["BulkUpdateDefaultCustomStatus"];
  };
  "/api/v2/custom_statuses": {
    /**
     * List Custom Ticket Statuses
     * @description Lists all undeleted custom ticket statuses for the account. No pagination is provided.
     *
     * #### Allowed For
     *
     * * End Users
     */
    get: operations["ListCustomStatuses"];
    /**
     * Create Custom Ticket Status
     * @description Takes a `custom_status` object that specifies the custom ticket status properties to create.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateCustomStatus"];
  };
  "/api/v2/custom_statuses/{custom_status_id}": {
    /**
     * Show Custom Ticket Status
     * @description Returns the custom ticket status object.
     *
     * #### Allowed For
     *
     * * End Users
     */
    get: operations["ShowCustomStatus"];
    /**
     * Update Custom Ticket Status
     * @description Takes a `custom_status` object that specifies the properties to update.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateCustomStatus"];
  };
  "/api/v2/deleted_tickets": {
    /**
     * List Deleted Tickets
     * @description Returns a maximum of 100 deleted tickets per page. See [Pagination](/api-reference/introduction/pagination/).
     *
     * The results includes all deleted (and not yet archived) tickets that
     * have not yet been [scrubbed](https://support.zendesk.com/hc/en-us/articles/4408845703194#topic_fv5_w51_sdb) in the past 30 days. Archived tickets are
     * not included in the results. See [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756)
     * in the Support Help Center.
     *
     * The tickets are ordered chronologically by created date, from oldest to newest.
     * The first ticket listed may not be the oldest ticket in your
     * account due to [ticket archiving](https://support.zendesk.com/hc/en-us/articles/203657756).
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Rate Limit
     *
     * You can make 10 requests every 1 minute using this endpoint.
     * When making requests beyond page 100, you can make 5 requests every 1 minute.
     * The rate limiting mechanism behaves as described in
     * [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.
     */
    get: operations["ListDeletedTickets"];
  };
  "/api/v2/deleted_tickets/{ticket_id}": {
    /**
     * Delete Ticket Permanently
     * @description Permanently deletes a soft-deleted ticket. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
     * in the Zendesk GDPR docs. To soft delete a ticket, use the [Delete Ticket](#delete-ticket) endpoint.
     *
     * This endpoint enqueues a ticket deletion job and returns a payload with the jobs status.
     *
     * If the job succeeds, the ticket is permanently deleted. This operation can't be undone.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work.
     * Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteTicketPermanently"];
  };
  "/api/v2/deleted_tickets/{ticket_id}/restore": {
    /**
     * Restore a Previously Deleted Ticket
     * @description #### Allowed For
     *
     * * Agents
     */
    put: operations["RestoreDeletedTicket"];
  };
  "/api/v2/deleted_tickets/destroy_many": {
    /**
     * Delete Multiple Tickets Permanently
     * @description Permanently deletes up to 100 soft-deleted tickets. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
     * in the Zendesk GDPR docs. To soft delete tickets, use the [Bulk Delete Tickets](#bulk-delete-tickets) endpoint.
     *
     * This endpoint accepts a comma-separated list of up to 100 ticket ids. It enqueues
     * a ticket deletion job and returns a payload with the jobs status.
     *
     * If one ticket fails to be deleted, the endpoint still attempts to delete the others. If the job succeeds,
     * the tickets that were successfully deleted are permanently deleted. This operation can't be undone.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["BulkPermanentlyDeleteTickets"];
  };
  "/api/v2/deleted_tickets/restore_many": {
    /**
     * Restore Previously Deleted Tickets in Bulk
     * @description #### Allowed For
     *
     * * Agents
     */
    put: operations["BulkRestoreDeletedTickets"];
  };
  "/api/v2/deleted_users": {
    /**
     * List Deleted Users
     * @description Returns deleted users, including permanently deleted users.
     *
     * If the results contains permanently deleted users, the users' properties
     * that normally contain personal data, such as `email` and `phone`,
     * are null. The `name` property is "Permanently Deleted User".
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListDeletedUsers"];
  };
  "/api/v2/deleted_users/{deleted_user_id}": {
    /**
     * Show Deleted User
     * @description Returns users that have been deleted but not permanently yet. See [Permanently Delete User](#permanently-delete-user).
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ShowDeletedUser"];
    /**
     * Permanently Delete User
     * @description Before permanently deleting a user, you must delete the user first. See [Delete User](/api-reference/ticketing/users/users/#delete-user).
     *
     * WARNING: Permanently deleting a user deletes all of their information. This information is not recoverable.
     *
     * #### Permanent user deletion rate limit
     *
     * You can permanently delete 700 users every 10 minutes.
     * The rate limiting mechanism behaves as described in
     * [Rates Limits](/api-reference/introduction/rate-limits/#monitoring-your-request-activity) in the API introduction.
     * Zendesk recommends that you obey the Retry-After header values.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     */
    delete: operations["PermanentlyDeleteUser"];
    parameters: {
      path: {
        deleted_user_id: components["parameters"]["DeletedUserId"];
      };
    };
  };
  "/api/v2/deleted_users/count": {
    /**
     * Count Deleted Users
     * @description Returns an approximate count of deleted users, including permanently deleted users. If the count exceeds 100,000, it is updated every 24 hours.
     *
     * The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["CountDeletedUsers"];
  };
  "/api/v2/dynamic_content/items": {
    /**
     * List Items
     * @description Returns a list of all dynamic content items for your account if accessed as an admin or agents who have permission to manage dynamic content.
     *
     * #### Allowed For
     *
     * * Admins, Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListDynamicContents"];
    /**
     * Create Item
     * @description Create a new content item, with one or more variants in the item's `variants` array. See [Specifying item variants](#specifying-item-variants).
     *
     * The `default_locale_id` and variant `locale_id` values must be one of the locales the account has active. You can get the list with the [List Locales](/api-reference/ticketing/account-configuration/locales/#list-locales) endpoint.
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    post: operations["CreateDynamicContent"];
  };
  "/api/v2/dynamic_content/items/{dynamic_content_item_id}": {
    /**
     * Show Item
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    get: operations["ShowDynamicContentItem"];
    /**
     * Update Item
     * @description The only attribute you can change is the name.
     *
     * To add a variant to the item, or to update or delete the variants of the item, use the [Item Variants API](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-many-variants).
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    put: operations["UpdateDynamicContentItem"];
    /**
     * Delete Item
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    delete: operations["DeleteDynamicContentItem"];
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
  };
  "/api/v2/dynamic_content/items/{dynamic_content_item_id}/variants": {
    /**
     * List Variants
     * @description Returns all the variants of the specified dynamic content item.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents who have permission to manage dynamic content
     *
     * #### Pagination
     *
     * * Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["DynamicContentListVariants"];
    /**
     * Create Variant
     * @description You can only create one variant for each locale id. If a locale variant already exists, the request is rejected.
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    post: operations["CreateDynamicContentVariant"];
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
  };
  "/api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/{dynammic_content_variant_id}": {
    /**
     * Show Variant
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    get: operations["ShowDynamicContentVariant"];
    /**
     * Update Variant
     * @description Updates the specified variant. You don't need to include all the properties. If you just want to update content, for example, then include just that.
     *
     * You can't switch the active state of the default variant of an item. Similarly, you can't switch the default to false if the variant is the default. You must make another variant default instead.
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    put: operations["UpdateDynamicContentVariant"];
    /**
     * Delete Variant
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    delete: operations["DeleteDynamicContentVariant"];
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
        dynammic_content_variant_id: components["parameters"]["DynamicContentVariantId"];
      };
    };
  };
  "/api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/create_many": {
    /**
     * Create Many Variants
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    post: operations["CreateManyDynamicContentVariants"];
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
  };
  "/api/v2/dynamic_content/items/{dynamic_content_item_id}/variants/update_many": {
    /**
     * Update Many Variants
     * @description Updates one or more variants. See [Update Variant](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-variant).
     *
     * You must specify the variants by id in the body. To get the variant ids, see [List Variants](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#list-variants).
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    put: operations["UpdateManyDynamicContentVariants"];
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
  };
  "/api/v2/dynamic_content/items/show_many": {
    /**
     * Show Many Items
     * @description #### Stability
     *
     * * Development
     *
     * #### Allowed For
     *
     * * Admins, Agents
     */
    get: operations["ShowManyDynamicContents"];
  };
  "/api/v2/group_memberships": {
    /**
     * List Memberships
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ListGroupMemberships"];
    /**
     * Create Membership
     * @description Assigns an agent to a given group.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
     */
    post: operations["CreateGroupMembership"];
  };
  "/api/v2/group_memberships/{group_membership_id}": {
    /**
     * Show Membership
     * @description The 'id' is the group membership id, not a group id.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowGroupMembershipById"];
    /**
     * Delete Membership
     * @description Immediately removes a user from a group and schedules a job to unassign all working tickets that are assigned to the given user and group combination.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
     */
    delete: operations["DeleteGroupMembership"];
    parameters: {
      path: {
        group_membership_id: components["parameters"]["GroupMembershipId"];
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/group_memberships/assignable": {
    /**
     * List Assignable Memberships
     * @description Returns a maximum of 100 group memberships per page.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ListAssignableGroupMemberships"];
  };
  "/api/v2/group_memberships/create_many": {
    /**
     * Bulk Create Memberships
     * @description Assigns up to 100 agents to given groups.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.
     */
    post: operations["GroupMembershipBulkCreate"];
  };
  "/api/v2/group_memberships/destroy_many": {
    /**
     * Bulk Delete Memberships
     * @description Immediately removes users from groups and schedules a job to unassign all working tickets that are assigned to the given user and group combinations.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
     */
    delete: operations["GroupMembershipBulkDelete"];
  };
  "/api/v2/group_slas/policies": {
    /**
     * List Group SLA Policies
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ListGroupSLAPolicies"];
    /**
     * Create Group SLA Policy
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateGroupSLAPolicy"];
  };
  "/api/v2/group_slas/policies/{group_sla_policy_id}": {
    /**
     * Show Group SLA Policy
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowGroupSLAPolicy"];
    /**
     * Update Group SLA Policy
     * @description Updates the specified policy.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateGroupSLAPolicy"];
    /**
     * Delete Group SLA Policy
     * @description #### Allowed For
     *
     * * Admins
     */
    delete: operations["DeleteGroupSLAPolicy"];
    parameters: {
      path: {
        group_sla_policy_id: components["parameters"]["GroupSLAPolicyId"];
      };
    };
  };
  "/api/v2/group_slas/policies/definitions": {
    /**
     * Retrieve Supported Filter Definition Items
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["RetrieveGroupSLAPolicyFilterDefinitionItems"];
  };
  "/api/v2/group_slas/policies/reorder": {
    /**
     * Reorder Group SLA Policies
     * @description #### Allowed For
     *
     * * Admins
     */
    put: operations["ReorderGroupSLAPolicies"];
  };
  "/api/v2/groups": {
    /**
     * List Groups
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ListGroups"];
    /**
     * Create Group
     * @description #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
     */
    post: operations["CreateGroup"];
  };
  "/api/v2/groups/{group_id}": {
    /**
     * Show Group
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ShowGroupById"];
    /**
     * Update Group
     * @description #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateGroup"];
    /**
     * Delete Group
     * @description #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
     */
    delete: operations["DeleteGroup"];
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
      };
    };
  };
  "/api/v2/groups/assignable": {
    /**
     * List Assignable Groups
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ListAssignableGroups"];
  };
  "/api/v2/groups/count": {
    /**
     * Count Groups
     * @description Returns an approximate count of groups. If the count exceeds 100,000, it is updated every 24 hours.
     *
     * The `refreshed_at` property of the `count` object is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `refreshed_at` may occasionally be null. This indicates that the count is being updated in the background, and the `value` property of the `count` object is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["CountGroups"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/imports/tickets": {
    /**
     * Ticket Import
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["TicketImport"];
  };
  "/api/v2/imports/tickets/create_many": {
    /**
     * Ticket Bulk Import
     * @description Accepts an array of up to 100 ticket objects.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["TicketBulkImport"];
  };
  "/api/v2/incremental/{incremental_resource}/sample": {
    /**
     * Incremental Sample Export
     * @description Use this endpoint to test the incremental export format. It's more strict in terms of rate limiting,
     * at 10 requests per 20 minutes instead of 10 requests per minute. It also returns only up to 50
     * results per request. Otherwise, it's identical to the above APIs.
     *
     * Use the `incremental_resource` parameter to specify the resource. Possible values are "tickets", "ticket_events", "users", or "organizations".
     */
    get: operations["IncrementalSampleExport"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
      path: {
        incremental_resource: components["parameters"]["IncrementalResource"];
      };
    };
  };
  "/api/v2/incremental/organizations": {
    /**
     * Incremental Organization Export
     * @description #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * See [Organizations sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
     */
    get: operations["IncrementalOrganizationExport"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
  };
  "/api/v2/incremental/routing/attribute_values": {
    /**
     * Incremental Attributes Values Export
     * @description Returns a stream of changes that occurred on routing attribute values.
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Parameters
     *
     * Optional
     *
     * | Name   | Type   | Comment
     * | ------ | ------ | -------
     * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
     */
    get: operations["IncrementalSkilBasedRoutingAttributeValuesExport"];
  };
  "/api/v2/incremental/routing/attributes": {
    /**
     * Incremental Attributes Export
     * @description Returns a stream of changes that occurred on routing attributes.
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Parameters
     *
     * Optional
     *
     *
     * | Name   | Type   | Comment
     * | ------ | ------ | -------
     * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
     */
    get: operations["IncrementalSkilBasedRoutingAttributesExport"];
  };
  "/api/v2/incremental/routing/instance_values": {
    /**
     * Incremental Instance Values Export
     * @description Returns a stream of changes that occurred on routing instance values. Changes are grouped by `attribute_value_id`,
     * with unassociate type events listed with associate type events by the associate event’s timestamp.
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Parameters
     *
     * Optional
     *
     * | Name   | Type   | Comment
     * | ------ | ------ | -------
     * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
     */
    get: operations["IncrementalSkilBasedRoutingInstanceValuesExport"];
  };
  "/api/v2/incremental/ticket_events": {
    /**
     * Incremental Ticket Event Export
     * @description Returns a stream of changes that occurred on tickets. Each event is tied
     * to an update on a ticket and contains all the fields that were updated in that
     * change. For more information, see:
     *
     * - [Exporting ticket events](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-ticket-events) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)
     * - [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)
     *
     * You can include comments in the event stream by using the `comment_events`
     * sideload. See Sideloading below. If you don't specify the sideload, any comment
     * present in the ticket update is described only by Boolean `comment_present`
     * and `comment_public` object properties in the event's `child_events` array.
     * The comment itself is not included.
     *
     * #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * The endpoint supports the `comment_events` sideload. Any comment present in the ticket
     * update is listed as an object in the event's `child_events` array. Example:
     *
     * ```js
     * "child_events": [
     *   {
     *     "id": 91048994488,
     *     "via": {
     *       "channel": "api",
     *       "source": {"from":{},"to":{},"rel":null}},
     *     "via_reference_id":null,
     *     "type": "Comment",
     *     "author_id": 5031726587,
     *     "body": "This is a comment",
     *     "html_body": "&lt;div class="zd-comment"&gt;&lt;p dir="auto"&gt;This is a comment&lt;/p&gt;",
     *     "public": true,
     *     "attachments": [],
     *     "audit_id": 91048994468,
     *     "created_at": "2009-06-25T10:15:18Z",
     *     "event_type": "Comment"
     *   },
     *   ...
     * ],
     * ...
     * ```
     */
    get: operations["IncrementalTicketEvents"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
  };
  "/api/v2/incremental/ticket_metric_events": {
    /**
     * List Ticket Metric Events
     * @description Returns ticket metric events that occurred on or after the start time.
     *
     * Cursor pagination returns a maximum of 100 records per page. Events are listed in chronological order.
     *
     * If the results are not paginated, events will be returned as a time-based incremental export.
     *
     * See [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports).
     *
     * #### Pagination
     * * Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListTicketMetricEvents"];
  };
  "/api/v2/incremental/tickets": {
    /**
     * Incremental Ticket Export, Time Based
     * @description Returns the tickets that changed since the start time. For more information,
     * see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
     *
     * This endpoint supports time-based incremental exports.
     * For more information, see [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api). You can also return tickets using cursor-based pagination. See [Incremental Ticket Export, Cursor Based](#incremental-ticket-export-cursor-based).
     *
     * The results include tickets that were updated by the system. See
     * [Excluding system-updated tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#excluding-system-updated-tickets-time-based-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
     *
     * The endpoint can return tickets with an `updated_at` time that's earlier than the
     * `start_time` time. The reason is that the API compares the `start_time` with the ticket's
     * `generated_timestamp` value, not its `updated_at` value. The `updated_at` value is
     * updated only if the update generates a [ticket event](#incremental-ticket-event-export).
     * The `generated_timestamp` value is updated for all ticket updates, including system
     * updates. If a system update occurs after a ticket event, the unchanged
     * `updated_at` time will become earlier relative to the updated `generated_timestamp`
     * time.
     *
     * #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
     * `last_audits` sideloads aren't supported.
     */
    get: operations["IncrementalTicketExportTime"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
  };
  "/api/v2/incremental/tickets/cursor": {
    /**
     * Incremental Ticket Export, Cursor Based
     * @description Returns the tickets that changed since the start time. For more information,
     * see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
     *
     * This endpoint supports cursor-based incremental exports.
     * Cursor-based exports are highly encouraged because they provide more consistent performance and
     * response body sizes. For more information, see [Cursor-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#cursor-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
     *
     *
     *
     * #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
     * `last_audits` sideloads aren't supported.
     */
    get: operations["IncrementalTicketExportCursor"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        cursor?: components["parameters"]["IncrementalCursor"];
      };
    };
  };
  "/api/v2/incremental/users": {
    /**
     * Incremental User Export, Time Based
     * @description #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
     */
    get: operations["IncrementalUserExportTime"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        per_page?: components["parameters"]["IncrementalPage"];
      };
    };
  };
  "/api/v2/incremental/users/cursor": {
    /**
     * Incremental User Export, Cursor Based
     * @description #### Allowed For
     *
     *  * Admins
     *
     * #### Sideloading
     *
     * See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
     */
    get: operations["IncrementalUserExportCursor"];
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        cursor?: components["parameters"]["IncrementalCursor"];
        per_page?: components["parameters"]["IncrementalPage"];
      };
    };
  };
  "/api/v2/job_statuses": {
    /**
     * List Job Statuses
     * @description Shows the statuses for background jobs. Statuses are sorted first by completion date and then by creation date in descending order.
     *
     * #### Allowed For:
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListJobStatuses"];
  };
  "/api/v2/job_statuses/{job_status_id}": {
    /**
     * Show Job Status
     * @description Shows the status of a background job.
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ShowJobStatus"];
    parameters: {
      path: {
        job_status_id: components["parameters"]["JobStatusId"];
      };
    };
  };
  "/api/v2/job_statuses/show_many": {
    /**
     * Show Many Job Statuses
     * @description Accepts a comma-separated list of job status ids.
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ShowManyJobStatuses"];
  };
  "/api/v2/locales": {
    /**
     * List Locales
     * @description Lists the translation locales available for the account.
     *
     * **Note**: You can alter the list by passing an updated `locale_ids` array to the [Update Account Settings](/api-reference/ticketing/account-configuration/account_settings/#update-account-settings) endpoint.
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ListLocales"];
  };
  "/api/v2/locales/{locale_id}": {
    /**
     * Show Locale
     * @description #### Allowed For
     *
     * * Anyone
     */
    get: operations["ShowLocaleById"];
    parameters: {
      path: {
        locale_id: components["parameters"]["LocaleId"];
      };
    };
  };
  "/api/v2/locales/agent": {
    /**
     * List Locales for Agent
     * @description Lists the translation locales that have been localized for agents on a specific account.
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ListLocalesForAgent"];
  };
  "/api/v2/locales/current": {
    /**
     * Show Current Locale
     * @description This works like [Show Locale](#show-locale), but instead of taking a locale id as an argument, it renders the locale of the user performing the request.
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ShowCurrentLocale"];
  };
  "/api/v2/locales/detect_best_locale": {
    /**
     * Detect Best Language for User
     * @description #### Allowed For
     *
     * * Anyone
     */
    get: operations["DetectBestLocale"];
  };
  "/api/v2/locales/public": {
    /**
     * List Available Public Locales
     * @description Lists the translation locales that are available to all accounts.
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ListAvailablePublicLocales"];
  };
  "/api/v2/macros": {
    /**
     * List Macros
     * @description Lists all shared and personal macros available to the current user. For admins, the API returns all macros for the account, including the personal macros of agents and other admins.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ListMacros"];
    /**
     * Create Macro
     * @description #### Allowed For
     * * Agents
     */
    post: operations["CreateMacro"];
  };
  "/api/v2/macros/{macro_id}": {
    /**
     * Show Macro
     * @description #### Allowed For
     * * Agents
     */
    get: operations["ShowMacro"];
    /**
     * Update Macro
     * @description #### Allowed For
     * * Agents
     */
    put: operations["UpdateMacro"];
    /**
     * Delete Macro
     * @description #### Allowed For
     * * Agents, with restrictions applying on certain actions
     */
    delete: operations["DeleteMacro"];
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
  };
  "/api/v2/macros/{macro_id}/apply": {
    /**
     * Show Changes to Ticket
     * @description Returns the changes the macro would make to a ticket. It doesn't actually
     * change a ticket. You can use the response data in a subsequent API call
     * to the [Tickets](/api-reference/ticketing/tickets/tickets/) endpoint to update the ticket.
     *
     * The response includes only the ticket fields that would be changed by the
     * macro. To get the full ticket object after the macro is applied,
     * see [Show Ticket After Changes](#show-ticket-after-changes).
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowChangesToTicket"];
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
  };
  "/api/v2/macros/{macro_id}/attachments": {
    /**
     * List Macro Attachments
     * @description Lists the attachments associated with a macro.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ListMacroAttachments"];
    /**
     * Create Macro Attachment
     * @description Allows an attachment to be uploaded and associated with a macro at the same time.
     *
     * **Note:** A macro can be associated with up to five attachments.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateAssociatedMacroAttachment"];
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
  };
  "/api/v2/macros/actions": {
    /**
     * List Supported Actions for Macros
     * @description #### Allowed For
     * * Agents
     */
    get: operations["ListMacrosActions"];
  };
  "/api/v2/macros/active": {
    /**
     * List Active Macros
     * @description Lists all active shared and personal macros available to the current user.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ListActiveMacros"];
  };
  "/api/v2/macros/attachments": {
    /**
     * Create Unassociated Macro Attachment
     * @description Allows an attachment to be uploaded that can be associated with a macro at a later time.
     *
     * **Note:** To ensure an uploaded attachment is not lost, associate it with a macro as soon as possible. From time to time, old attachments that are not not associated with any macro are purged.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateMacroAttachment"];
  };
  "/api/v2/macros/attachments/{attachment_id}": {
    /**
     * Show Macro Attachment
     * @description Shows the properties of the specified macro attachment.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowMacroAttachment"];
    parameters: {
      path: {
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
  };
  "/api/v2/macros/categories": {
    /**
     * List Macro Categories
     * @description Lists all macro categories available to the current user.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ListMacroCategories"];
  };
  "/api/v2/macros/definitions": {
    /**
     * List Macro Action Definitions
     * @description Returns the definitions of the actions a macro can perform. For example,
     * one action can set the status of a ticket. The definition of the action
     * includes a title ("Status"), a type ("list"), and possible values. For a
     * list of support actions, see [Actions reference](/documentation/ticketing/reference-guides/actions-reference).
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListMacroActionDefinitions"];
  };
  "/api/v2/macros/destroy_many": {
    /**
     * Bulk Delete Macros
     * @description Deletes the macros corresponding to the provided comma-separated list of IDs.
     *
     * #### Allowed For
     * * Agents
     */
    delete: operations["DeleteManyMacros"];
  };
  "/api/v2/macros/new": {
    /**
     * Show Macro Replica
     * @description Returns an unpersisted macro representation derived from a ticket or macro.
     *
     * The endpoint takes one of the following query parameters: `macro_id` or `ticket_id`. If you include both, `macro_id` is used.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowDerivedMacro"];
    parameters: {
      query: {
        macro_id: components["parameters"]["MacroIdQuery"];
        /**
         * @description The ID of the ticket from which to build a macro replica
         * @example 35436
         */
        ticket_id: number;
      };
    };
  };
  "/api/v2/macros/search": {
    /**
     * Search Macros
     * @description #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["SearchMacro"];
    parameters: {
      query: {
        include?: components["parameters"]["MacroInclude"];
        access?: components["parameters"]["MacroAccess"];
        active?: components["parameters"]["MacroActive"];
        category?: components["parameters"]["MacroCategory"];
        group_id?: components["parameters"]["MacroGroupId"];
        only_viewable?: components["parameters"]["MacroOnlyViewable"];
        sort_by?: components["parameters"]["MacroSortBy"];
        sort_order?: components["parameters"]["MacroSortOrder"];
        query: components["parameters"]["MacroQuery"];
      };
    };
  };
  "/api/v2/macros/update_many": {
    /**
     * Update Many Macros
     * @description Updates the provided macros with the specified changes.
     *
     * #### Allowed For
     * * Agents
     */
    put: operations["UpdateManyMacros"];
  };
  "/api/v2/object_layouts/{object_type}/essentials_card": {
    /**
     * Show Essentials Card
     * @description Gets the essentials card for an object type.
     * #### Allowed For
     * * Admins and agents
     */
    get: operations["ShowEssentialsCard"];
    /**
     * Update Essentials Card
     * @description Updates the essentials card for an object type.
     * #### Allowed For
     * * Admins
     */
    put: operations["UpdateEssentialsCard"];
    /**
     * Delete Essentials Card
     * @description Delete the essentials card for an object type.
     * #### Allowed For
     * * Admins and agents
     */
    delete: operations["DeleteEssentialsCard"];
    parameters: {
      path: {
        object_type: components["parameters"]["EssentialsCardKey"];
      };
    };
  };
  "/api/v2/object_layouts/essentials_cards": {
    /**
     * List of Essentials Cards
     * @description Gets the list of essentials cards.
     * #### Allowed For
     * * Admins
     */
    get: operations["ShowEssentialsCards"];
  };
  "/api/v2/organization_fields": {
    /**
     * List Organization Fields
     * @description Returns a list of custom organization fields in your account. Fields are returned in the order that you specify in your organization fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each organization field to the values returned under the `organization_fields` attribute on the [organization](/api-reference/ticketing/organizations/organizations/) resource.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListOrganizationFields"];
    /**
     * Create Organization Field
     * @description Creates any of the following custom field types:
     *
     * * text (default when no "type" is specified)
     * * textarea
     * * checkbox
     * * date
     * * integer
     * * decimal
     * * regexp
     * * dropdown
     * * lookup
     *
     * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateOrganizationField"];
  };
  "/api/v2/organization_fields/{organization_field_id}": {
    /**
     * Show Organization Field
     * @description #### Allowed for
     *
     * * Agents
     */
    get: operations["ShowOrganizationField"];
    /**
     * Update Organization Field
     * @description #### Updating a Drop-down (Tagger) Field
     *
     * Drop-down fields return an array of `custom_field_options` which specify the name, value, and order of drop-down options. When updating a drop-down field, note the following information:
     *
     * - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations
     * - To create a new option, pass a null `id` along with the `name` and `value`
     * - To update an existing option, pass its `id` along with the `name` and `value`
     * - To reorder an option, reposition it in the `custom_field_options` array relative to the other options
     * - To remove an option, omit it from the list of options upon update
     *
     * #### Example Request
     *
     * ```bash
     * curl https://{subdomain}.zendesk.com/api/v2/organization_fields/{organization_field_id}.json \
     *   -H "Content-Type: application/json" -X PUT \
     *   -d '{"organization_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 3", "value": "option_3"}]}}' \
     *   -v -u {email_address}:{password}
     * ```
     * #### Allowed for
     *
     * * Admins
     */
    put: operations["UpdateOrganizationField"];
    /**
     * Delete Organization Field
     * @description #### Allowed for
     *
     * * Admins
     */
    delete: operations["DeleteOrganizationField"];
    parameters: {
      path: {
        organization_field_id: components["parameters"]["OrganizationFieldId"];
      };
    };
  };
  "/api/v2/organization_fields/reorder": {
    /**
     * Reorder Organization Field
     * @description #### Allowed For
     *
     * * Admins
     */
    put: operations["ReorderOrganizationField"];
  };
  "/api/v2/organization_memberships": {
    /**
     * List Memberships
     * @description Returns a list of organization memberships for the account, user or organization in question.
     *
     * **Note**: When returning organization memberships for a user, organization memberships are sorted with the default organization first, and then by organization name.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * - Agents
     * - End users
     */
    get: operations["ListOrganizationMemberships"];
    /**
     * Create Membership
     * @description Assigns a user to a given organization. Returns an error with status 422 if the user is already assigned to the organization.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents when creating a new organization membership for an end user
     */
    post: operations["CreateOrganizationMembership"];
  };
  "/api/v2/organization_memberships/{organization_membership_id}": {
    /**
     * Show Membership
     * @description #### Allowed for
     *
     * * Agents
     */
    get: operations["ShowOrganizationMembershipById"];
    /**
     * Delete Membership
     * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
     *
     * #### Allowed for
     *
     * * Admins
     * * Agents when deleting an organization membership for an end user
     */
    delete: operations["DeleteOrganizationMembership"];
    parameters: {
      path: {
        organization_membership_id: components["parameters"]["OrganizationMembershipId"];
      };
    };
  };
  "/api/v2/organization_memberships/create_many": {
    /**
     * Create Many Memberships
     * @description This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     * * Admins
     * * Agents
     */
    post: operations["CreateManyOrganizationMemberships"];
  };
  "/api/v2/organization_memberships/destroy_many": {
    /**
     * Bulk Delete Memberships
     * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteManyOrganizationMemberships"];
  };
  "/api/v2/organization_subscriptions": {
    /**
     * List Organization Subscriptions
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For:
     *
     * * Agents
     * * End users
     *
     * For end users, the response will only list the subscriptions created by the requesting end user.
     */
    get: operations["ListOrganizationSubscriptions"];
    /**
     * Create Organization Subscription
     * @description #### Allowed For:
     *
     * * Agents
     * * End users
     *
     * End users can only subscribe to shared organizations in which they're members.
     */
    post: operations["CreateOrganizationSubscription"];
  };
  "/api/v2/organization_subscriptions/{organization_subscription_id}": {
    /**
     * Show Organization Subscription
     * @description #### Allowed For:
     *
     * * Agents
     * * End users
     *
     * For end users, the response will only list the subscriptions created by the requesting end user.
     */
    get: operations["ShowOrganizationSubscription"];
    /**
     * Delete Organization Subscription
     * @description #### Allowed For:
     *
     * * Agents
     * * End users
     */
    delete: operations["DeleteOrganizationSubscription"];
  };
  "/api/v2/organizations": {
    /**
     * List Organizations
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents, with certain restrictions
     *
     * If the agent has a custom agent role that restricts their access to only users in their own organization, a 403 Forbidden error is returned. See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents#topic_cxn_hig_bd) in Zendesk help.
     */
    get: operations["ListOrganizations"];
    /**
     * Create Organization
     * @description You must provide a unique `name` for each organization. Normally
     * the system doesn't allow records to be created with identical names.
     * However, a race condition can occur if you make two or more identical
     * POSTs very close to each other, causing the records to have identical
     * organization names.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
     */
    post: operations["CreateOrganization"];
  };
  "/api/v2/organizations/{organization_id}": {
    /**
     * Show Organization
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ShowOrganization"];
    /**
     * Update Organization
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     *
     * Agents with no permissions restrictions can only update "notes" on organizations.
     *
     * **Note:** Updating an organization's `domain_names` property overwrites all existing `domain_names` values. To prevent this, submit a complete list of `domain_names` for the organization in your request.
     *
     * #### Example Request
     *
     * ```js
     * {
     *   "organization": {
     *     "notes": "Something interesting"
     *   }
     * }
     * ```
     */
    put: operations["UpdateOrganization"];
    /**
     * Delete Organization
     * @description #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
     */
    delete: operations["DeleteOrganization"];
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
  };
  "/api/v2/organizations/{organization_id}/related": {
    /**
     * Show Organization's Related Information
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["OrganizationRelated"];
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
  };
  "/api/v2/organizations/autocomplete": {
    /**
     * Autocomplete Organizations
     * @description Returns an array of organizations whose name starts with the
     * value specified in the `name` parameter.
     *
     * #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["AutocompleteOrganizations"];
    parameters: {
      query: {
        name: components["parameters"]["OrganizationQueryFragment"];
        field_id?: components["parameters"]["LookupRelationshipAutocompleteFieldIdFragment"];
        source?: components["parameters"]["LookupRelationshipAutocompleteSourceFragment"];
      };
    };
  };
  "/api/v2/organizations/count": {
    /**
     * Count Organizations
     * @description Returns an approximate count of organizations. If the count exceeds
     * 100,000, it is updated every 24 hours.
     *
     * The `refreshed_at` property of the `count` object is a timestamp that indicates
     * when the count was last updated.
     *
     * When the count exceeds 100,000, the `refreshed_at` property may
     * occasionally be null. This indicates that the count is being
     * updated in the background and the `value` property of the `count` object is limited to
     * 100,000 until the update is complete.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["CountOrganizations"];
  };
  "/api/v2/organizations/create_many": {
    /**
     * Create Many Organizations
     * @description Accepts an array of up to 100 organization objects.
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Agents, with restrictions applying on certain actions
     */
    post: operations["CreateManyOrganizations"];
  };
  "/api/v2/organizations/create_or_update": {
    /**
     * Create Or Update Organization
     * @description Creates an organization if it doesn't already exist, or updates
     * an existing organization. Using this method means one less call
     * to check if an organization exists before creating it. You need
     * to specify the id or external id when updating
     * an organization to avoid a duplicate error response. Name is
     * not available as a matching criteria.
     *
     * #### Allowed For
     *
     * * Agents, with restrictions on certain actions
     */
    post: operations["CreateOrUpdateOrganization"];
  };
  "/api/v2/organizations/destroy_many": {
    /**
     * Bulk Delete Organizations
     * @description Accepts a comma-separated list of up to 100 organization ids or external ids.
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
     */
    delete: operations["DeleteManyOrganizations"];
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
  };
  "/api/v2/organizations/search": {
    /**
     * Search Organizations
     * @description Returns an array of organizations matching the criteria. You may search by an organization's `external_id` or `name`, but not both:
     *
     * #### Searching by `external_id`
     *
     * If you set the `external_id` value of an organization to associate it to an external record, you can use it to search for the organization.
     *
     * For an organization to be returned, its `external_id` must exactly match the value provided (case insensitive).
     *
     * #### Searching by `name`
     *
     * For an organization to be returned, its `name` must exactly match the value provided (case insensitive).
     *
     * #### Allowed For:
     *
     * * Admins
     * * Agents assigned to a custom role with permissions to add or modify organizations (Enterprise only)
     *
     * See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026#topic_cxn_hig_bd) in the Support Help Center.
     */
    get: operations["SearchOrganizations"];
    parameters: {
      query?: {
        external_id?: components["parameters"]["OrganizationExternalId"];
        name?: components["parameters"]["OrganizationName"];
      };
    };
  };
  "/api/v2/organizations/show_many": {
    /**
     * Show Many Organizations
     * @description Accepts a comma-separated list of up to 100 organization ids or external ids.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ShowManyOrganizations"];
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
  };
  "/api/v2/organizations/update_many": {
    /**
     * Update Many Organizations
     * @description Bulk or batch updates up to 100 organizations.
     *
     * #### Bulk update
     *
     * To make the same change to multiple organizations, use the following endpoint and data format:
     *
     * `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json?ids=1,2,3`
     *
     * ```js
     * {
     *   "organization": {
     *     "notes": "Priority"
     *   }
     * }
     * ```
     *
     * #### Batch update
     *
     * To make different changes to multiple organizations, use the following endpoint and data format:
     *
     * `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json`
     *
     * ```js
     * {
     *   "organizations": [
     *     { "id": 1, "notes": "Priority" },
     *     { "id": 2, "notes": "Normal" }
     *   ]
     * }
     * ```
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     *
     * Agents with no permissions restrictions can only update "notes" on organizations.
     */
    put: operations["UpdateManyOrganizations"];
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
  };
  "/api/v2/problems": {
    /**
     * List Ticket Problems
     * @description The response is always ordered by `updated_at` in descending order
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTicketProblems"];
  };
  "/api/v2/problems/autocomplete": {
    /**
     * Autocomplete Problems
     * @description Returns tickets whose type is "problem" and whose subject contains the string specified in the `text` parameter.
     *
     * You can specify the `text` parameter in the request body rather than the query string. Example:
     *
     * `{"text": "fire"}`
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["AutocompleteProblems"];
  };
  "/api/v2/push_notification_devices/destroy_many": {
    /**
     * Bulk Unregister Push Notification Devices
     * @description Unregisters the mobile devices that are receiving push notifications. Specify the devices as an array of mobile device tokens.
     *
     * #### Allowed for
     *
     * * Admins
     */
    post: operations["PushNotificationDevices"];
  };
  "/api/v2/queues": {
    /**
     * List queues
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ListQueues"];
    /**
     * Create queue
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateQueue"];
  };
  "/api/v2/queues/{queue_id}": {
    /**
     * Show Queue
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowQueueById"];
    /**
     * Update queue
     * @description #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateQueue"];
    /**
     * Delete queue
     * @description #### Allowed For
     *
     * * Admins
     */
    delete: operations["DeleteQueue"];
    parameters: {
      path: {
        queue_id: components["parameters"]["OcrQueueId"];
      };
    };
  };
  "/api/v2/queues/definitions": {
    /**
     * List queue definitions
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ListQueueDefinitions"];
  };
  "/api/v2/recipient_addresses": {
    /**
     * List Support Addresses
     * @description Lists all the support addresses for the account.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ListSupportAddresses"];
    /**
     * Create Support Address
     * @description Adds a Zendesk or external support address to your account.
     *
     * To add a Zendesk address, use the following syntax: `{local-part}@{accountname}.zendesk.com`.
     * Example: 'sales-team@example.zendesk.com'. The [local-part](https://en.wikipedia.org/wiki/Email_address#Local-part) can be anything you like.
     *
     * To add an external email address such as help@omniwearshop.com, the email must already exist and you must set up forwarding on your email server. The exact steps depend on your mail server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266). After setting up forwarding, run the [Verify Support Address Forwarding](#verify-support-address-forwarding) endpoint. The address won't work in Zendesk Support until it's been verified.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
     */
    post: operations["CreateSupportAddress"];
  };
  "/api/v2/recipient_addresses/{support_address_id}": {
    /**
     * Show Support Address
     * @description #### Allowed For
     *
     * * Admins
     * * Agents
     */
    get: operations["ShowSupportAddress"];
    /**
     * Update Support Address
     * @description Updates an existing support address for your account.
     *
     * You can't use this endpoint to update a support address's `email` property.
     * Instead, you can create a new address using the [Create Support
     * Address](#create-support-address) endpoint.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
     */
    put: operations["UpdateSupportAddress"];
    /**
     * Delete Support Address
     * @description Deletes a support address.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
     */
    delete: operations["DeleteRecipientAddress"];
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
  };
  "/api/v2/recipient_addresses/{support_address_id}/verify": {
    /**
     * Verify Support Address Forwarding
     * @description Sends a test email to the specified support address to verify that email forwarding for the address works. An external support address won't work in Zendesk Support until it's verified.
     *
     * **Note**: You don't need to verify Zendesk system support addresses.
     *
     * The endpoint takes the following body: `{"type": "forwarding"}`. The value of the `type` property defaults to "forwarding" if none is specified, but the values "spf" and "dns" are also accepted.
     *
     * Use this endpoint after [adding](#create-support-address) an external support address to Zendesk Support and setting up forwarding on your email server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266).
     *
     * The endpoint doesn't return the results of the test. Instead, use the [Show Support Address](#show-support-address) endpoint to check that the `forwarding_status` property is "verified".
     *
     * Other verification checks can also be performed using this API. These include SPF checks and DNS checks.
     *
     * When calling the endpoint with `type` set to "spf", it will queries the DNS records to check that the SPF records for Zendesk are present for outbound emails.
     *
     * When calling the endpoint with `type` set to "dns", it runs checks on your CNAME records to make sure they are set up properly in your DNS.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
     */
    put: operations["VerifySupportAddressForwarding"];
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
  };
  "/api/v2/relationships/definitions/{target_type}": {
    /**
     * Filter Definitions
     * @description Returns filter definitions based on the given target type.  Target types
     * include users (zen:user), tickets (zen:ticket), organizations (zen:organization), or custom objects (zen:custom_object:CUSTOM_OBJECT_KEY).
     * The returned filter definitions are the options that you can use to build a custom field or ticket field's
     * `relationship_filter`.
     */
    get: operations["GetRelationshipFilterDefinitions"];
  };
  "/api/v2/requests": {
    /**
     * List Requests
     * @description #### Allowed for
     *
     * * End Users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListRequests"];
    /**
     * Create Request
     * @description Accepts a `request` object that sets one or more properties.
     *
     * #### Allowed for
     *
     * * End users
     * * Anonymous users (rate limit of 5 requests per hour for [trial accounts](/documentation/developer-tools/getting-started/getting-a-trial-or-sponsored-account-for-development/))
     *
     * #### Additional properties
     *
     * In addition to the writable request properties in the [JSON Format table](#json-format) above, you can set the following properties when creating a request.
     *
     * | Name                | Type   | Mandatory | Comment
     * | ----------------    | -------| --------- | -------
     * | comment             | object | yes       | Describes the problem, incident, question, or task. See [Request comments](#request-comments)
     * | collaborators       | array  | no        | Adds collaborators (cc's) to the request. An email notification is sent to them when the ticket is created. See [Setting collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#setting-collaborators)
     * | requester           | object | yes*      | \*Required for anonymous requests. Specifies the requester of the anonymous request. See [Creating anonymous requests](/documentation/ticketing/managing-tickets/creating-and-managing-requests#creating-anonymous-requests)
     *
     * #### Creating follow-up requests
     *
     * Once a ticket is closed (as distinct from solved), it can't be reopened. However, you can create a new request that references the closed ticket. To create the follow-up request, include a `via_followup_source_id` property in the `request` object that specifies the closed ticket. The parameter only works with closed tickets. It has no effect with other tickets.
     */
    post: operations["CreateRequest"];
  };
  "/api/v2/requests/{request_id}": {
    /**
     * Show Request
     * @description #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | users            | The email ccs for a request by side-loading users
     *
     * #### Allowed For
     *
     * * End Users
     */
    get: operations["ShowRequest"];
    /**
     * Update Request
     * @description Updates a request with a comment or collaborators (cc's). The end user who created the request can also use it to mark the request as solved. The endpoint can't be used to update other request attributes.
     *
     * #### Writable properties
     * This endpoint can only update the following properties in the request.
     *
     * | Name                     | Type    | Required | Description                                          |
     * | ------------------------ | ------- | -------- | ---------------------------------------------------- |
     * | comment                  | object  | no       | Adds a comment to the request. See [Request comments](#request-comments) |
     * | solved                   | boolean | no       | Marks the request as solved. Example: `{"request": {"solved": "true"}}`. End users can mark requests as solved only if the request's `can_be_solved_by_me` property is true. The property is true only when the ticket is assigned to an agent and the ticket type is not a problem but a question, task, or incident |
     * | additional_collaborators | array   | no       | Adds collaborators to the request. An email notification is sent to them when the ticket is updated. See [Adding collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#adding-collaborators) |
     *
     * #### Allowed For
     *
     * * End users
     */
    put: operations["UpdateRequest"];
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
      };
    };
  };
  "/api/v2/requests/{request_id}/comments": {
    /**
     * Listing Comments
     * @description #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sorting
     *
     * By default, comments are sorted by creation date in ascending order.
     *
     * When using cursor pagination, use the following parameter to change the sort order:
     *
     * | Name   | Type   | Required | Comments
     * | ------ | ------ | -------- | --------
     * | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)
     *
     * When using offset pagination, use the following parameters to change the sort order:
     *
     * | Name         | Type   | Required | Comments
     * | ------------ | ------ | -------- | --------
     * | `sort_by`    | string | no       | One of `created_at`, `updated_at`
     * | `sort_order` | string | no       | One of `asc`, `desc`
     *
     * #### Allowed For
     *
     * * End Users
     */
    get: operations["ListComments"];
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
      };
    };
  };
  "/api/v2/requests/{request_id}/comments/{ticket_comment_id}": {
    /**
     * Getting Comments
     * @description #### Allowed For
     *
     * * End Users
     */
    get: operations["ShowComment"];
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
  };
  "/api/v2/requests/search": {
    /**
     * Search Requests
     * @description Examples:
     *
     * * `GET /api/v2/requests/search.json?query=printer`
     * * `GET /api/v2/requests/search.json?query=printer&organization_id=1`
     * * `GET /api/v2/requests/search.json?query=printer&cc_id=true`
     * * `GET /api/v2/requests/search.json?query=printer&status=hold,open`
     *
     * #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Results limit
     *
     * The Search Requests endpoint returns up to 1,000 results per query, with a maximum of 100 results per page. See [Pagination](/api-reference/ticketing/introduction/#pagination). If you request a page past the limit (`page=11` at 100 results per page), a 422 Insufficient Resource Error is returned.
     *
     * #### Allowed For
     *
     * * End Users
     */
    get: operations["SearchRequests"];
  };
  "/api/v2/resource_collections": {
    /**
     * List Resource Collections
     * @description Lists resource collections for the account.
     *
     * #### Allowed for
     *
     * * Admins
     */
    get: operations["ListResourceCollections"];
    /**
     * Create Resource Collection
     * @description Creates a resource collection from a provided `payload` object. The `payload` object is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.
     *
     * The response includes a [job
     * status](/api-reference/ticketing/ticket-management/job_statuses/) for creation of the specified resources.
     *
     * #### Allowed for
     *
     * * Admins
     */
    post: operations["CreateResourceCollection"];
  };
  "/api/v2/resource_collections/{resource_collection_id}": {
    /**
     * Show Resource Collection
     * @description Retrieves details for a specified resource collection.
     *
     * #### Allowed for
     *
     * * Admins
     */
    get: operations["RetrieveResourceCollection"];
    /**
     * Update Resource Collection
     * @description Updates a resource collection using a provided `payload` object. The `payload` object  is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.
     *
     * The response includes a [job
     * status](/api-reference/ticketing/ticket-management/job_statuses/) for the resource updates.
     *
     * #### Allowed for
     *
     * * Admins
     */
    put: operations["UpdateResourceCollection"];
    /**
     * Delete Resource Collection
     * @description Deletes a specified resource collection.
     *
     * The response includes a [job
     * status](/api-reference/ticketing/ticket-management/job_statuses/) for deletion of the collection's resources.
     *
     * #### Allowed for
     *
     * * Admins
     */
    delete: operations["DeleteResourceCollection"];
    parameters: {
      path: {
        resource_collection_id: components["parameters"]["ResourceCollectionId"];
      };
    };
  };
  "/api/v2/routing/agents/{user_id}/instance_values": {
    /**
     * List Agent Attribute Values
     * @description Returns an attribute value.
     *
     * #### Allowed For
     *
     * * Agents and admins
     */
    get: operations["ListAGentAttributeValues"];
    /**
     * Set Agent Attribute Values
     * @description Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["SetAgentAttributeValues"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/routing/attributes": {
    /**
     * List Account Attributes
     * @description Returns a list of attributes for the account.
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | attribute_values | The attribute values available on the account
     *
     * #### Allowed For
     *
     * * Agents and admins
     */
    get: operations["ListAccountAttributes"];
    /**
     * Create Attribute
     * @description Creates an attribute.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateAttribute"];
  };
  "/api/v2/routing/attributes/{attribute_id}": {
    /**
     * Show Attribute
     * @description Returns an attribute.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowAttribute"];
    /**
     * Update Attribute
     * @description Updates an attribute.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateAttribute"];
    /**
     * Delete Attribute
     * @description Deletes an attribute.
     *
     * #### Allowed For
     *
     * * Admins
     */
    delete: operations["DeleteAttribute"];
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
  };
  "/api/v2/routing/attributes/{attribute_id}/values": {
    /**
     * List Attribute Values for an Attribute
     * @description Returns a list of attribute values for a provided attribute.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListAttributeValues"];
    /**
     * Create Attribute Value
     * @description Creates an attribute value.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateAttributeValue"];
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
  };
  "/api/v2/routing/attributes/{attribute_id}/values/{attribute_value_id}": {
    /**
     * Show Attribute Value
     * @description Returns an attribute value.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowAttributeValue"];
    /**
     * Delete Attribute Value
     * @description Deletes an attribute value.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteAttributeValue"];
    /**
     * Update Attribute Value
     * @description Updates an attribute value.
     *
     * #### Allowed For
     *
     * * Admins
     */
    patch: operations["UpdateAttributeValue"];
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
        attribute_value_id: components["parameters"]["SkillBasedRoutingAttributeValueId"];
      };
    };
  };
  "/api/v2/routing/attributes/definitions": {
    /**
     * List Routing Attribute Definitions
     * @description Returns the condition definitions that can be configured to apply attributes to a ticket.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListRoutingAttributeDefinitions"];
  };
  "/api/v2/routing/requirements/fulfilled": {
    /**
     * List Tickets Fulfilled by a User
     * @description Returns a list of ticket ids that contain attributes matching the current user's attributes. Accepts a `ticket_ids` parameter for relevant tickets to check for matching attributes.
     *
     * #### Allowed For
     *
     * * Agents and admins
     */
    get: operations["ListTicketsFullfilledByUser"];
  };
  "/api/v2/routing/tickets/{ticket_id}/instance_values": {
    /**
     * List Ticket Attribute Values
     * @description Returns a list of attributes values for the ticket.
     *
     * #### Allowed For
     *
     * * Agents and admins
     */
    get: operations["ListTicketAttributeValues"];
    /**
     * Set Ticket Attribute Values
     * @description Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.
     *
     * Invalid or deleted attributes are ignored.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["SetTicketAttributeValues"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/satisfaction_ratings": {
    /**
     * List Satisfaction Ratings
     * @description #### Allowed For
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Filters
     *
     * | Parameter  | Value
     * | ---------- | -----
     * | score      | offered, unoffered, received, received\_with\_comment, received\_without\_comment,<br/>good, good\_with\_comment, good\_without\_comment,<br/>bad, bad\_with\_comment, bad\_without\_comment
     * | start_time | Time of the oldest satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)
     * | end_time   | Time of the most recent satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)
     *
     * If you specify an unqualified score such as `good`, the results include all the records with and without comments.
     *
     * Examples:
     *
     * * `/api/v2/satisfaction_ratings.json?score=bad`
     * * `/api/v2/satisfaction_ratings.json?score=bad&start_time=1498151194`
     * * `/api/v2/satisfaction_ratings.json?start_time=1340384793&end_time=1371920793`
     */
    get: operations["ListSatisfactionRatings"];
  };
  "/api/v2/satisfaction_ratings/{satisfaction_rating_id}": {
    /**
     * Show Satisfaction Rating
     * @description Returns a specific satisfaction rating. You can get the id from
     * the [List Satisfaction Ratings](#list-satisfaction-ratings) endpoint.
     *
     * #### Allowed For
     *
     *  * Admins
     */
    get: operations["ShowSatisfactionRating"];
  };
  "/api/v2/satisfaction_ratings/count": {
    /**
     * Count Satisfaction Ratings
     * @description Returns an approximate count of satisfaction ratings in the account. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountSatisfactionRatings"];
  };
  "/api/v2/satisfaction_reasons": {
    /**
     * List Reasons for Satisfaction Rating
     * @description List all reasons for an account
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListSatisfactionRatingReasons"];
  };
  "/api/v2/satisfaction_reasons/{satisfaction_reason_id}": {
    /**
     * Show Reason for Satisfaction Rating
     * @description #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowSatisfactionRatings"];
  };
  "/api/v2/search": {
    /**
     * List Search Results
     * @description Use the ampersand character (&) to append the `sort_by` or `sort_order` parameters to the URL.
     *
     * For examples, see [Searching with Zendesk API](/documentation/ticketing/using-the-zendesk-api/searching-with-the-zendesk-api).
     *
     * #### Pagination
     *
     * * Offset pagination only
     *
     * Offset pagination may result in duplicate results when paging. You can also use the
     * [Export Search Results](/api-reference/ticketing/ticket-management/search/#export-search-results) endpoint, which
     * uses cursor-based pagination and doesn't return duplicate results. See
     * [Pagination](/api-reference/introduction/pagination/) for more information.
     *
     * #### Allowed For
     *
     * * Admins, Agents and Light Agents
     *
     *
     * #### Errors JSON Format
     *
     * Errors are represented as JSON objects which have the following keys:
     *
     * | Name                  | Type                 | Comment
     * | --------------------- | ---------------------| --------------------
     * | error                 | string               | The type of error. Examples: "unavailable", "invalid"
     * | description           | string               |
     *
     * ##### Example Error
     * ```js
     * {
     *   "error": "unavailable",
     *   "description": "Sorry, we could not complete your search query. Please try again in a moment."
     * }
     * ```
     */
    get: operations["ListSearchResults"];
  };
  "/api/v2/search/count": {
    /**
     * Show Results Count
     * @description Returns the number of items matching the query rather than the items. The search string works the same as a regular search.
     */
    get: operations["CountSearchResults"];
  };
  "/api/v2/search/export": {
    /**
     * Export Search Results
     * @description Exports a set of results. See [Query basics](#query-basics) for the syntax of the `query` parameter.
     *
     * This endpoint is for search queries that will return more than 1000 results. The result set is ordered only by the `created_at` attribute.
     *
     * The search only returns results of a single object type. The following object types are supported: ticket, organization, user, or group.
     *
     * You must specify the type in the `filter[type]` parameter. Searches with type in the query string will result in an error.
     *
     * #### Allowed For
     *
     * - Agents
     *
     * #### Pagination
     *
     * - Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 1000 records per page. The number of results shown in a page is determined by the `page[size]` parameter.
     *
     * **Note**: You may experience a speed reduction or a timeout if you request 1000 results per page and you have many archived tickets in the results. Try reducing the number of results per page. We recommend 100 results per page.
     *
     * The cursor specified by the `after_cursor` property in a response expires after one hour.
     *
     * For more information on cursor-based pagination, see the following articles:
     *
     * - [Comparing cursor pagination and offset pagination](/documentation/developer-tools/pagination/comparing-cursor-pagination-and-offset-pagination)
     * - [Paginating through lists using cursor pagination](/documentation/developer-tools/pagination/paginating-through-lists-using-cursor-pagination)
     *
     * #### Limits
     *
     * This API endpoint is rate-limited to 100 requests per minute per account. The limit also counts towards the global API rate limit.
     *
     * #### Response Format
     *
     * | Name                  | Type                 | Comment
     * | --------------------- | ---------------------| --------------------
     * | links[next]           | string               | URL to the next page of results
     * | meta[has_more]        | string               | Boolean indicating if there are more results
     * | meta[after_cursor]    | string               | Cursor object returned from the Search Service
     * | results               | array                | May consist of tickets, users, groups, or organizations, as specified by the `filter_type` parameter
     *
     * The response is similar to the response of `GET /api/v2/search.json?`, with a few changes:
     *
     * * `links` - Has the following nested properties: `prev` and `next`. These replace the `next_page` and `prev_page` links. The `prev` property is always null because backward pagination is not supported. The `next` property may include an auto-generated link to the next page of results.
     * * `meta` - Has the following nested properties: `has_more` and `after_cursor`. The `has_more` property indicates whether the next page has more results. The `after_cursor` property is the cursor used to paginate to the next page. It expires after one hour.
     *
     * There's no `count` property.
     */
    get: operations["ExportSearchResults"];
  };
  "/api/v2/sessions": {
    /**
     * List Sessions
     * @description If authenticated as an admin, returns all the account's sessions. If authenticated as an agent or end user, returns only the sessions of the user making the request.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Allowed For
     *
     * * Admins, Agents, End users
     */
    get: operations["ListSessions"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/sharing_agreements": {
    /**
     * List Sharing Agreements
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ListSharingAgreements"];
    /**
     * Create Sharing Agreement
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateSharingAgreement"];
  };
  "/api/v2/sharing_agreements/{sharing_agreement_id}": {
    /**
     * Show a Sharing Agreement
     * @description Returns a sharing agreement for your account.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowSharingAgreement"];
    /**
     * Update a Sharing Agreement
     * @description Returns an updated sharing agreement. Only `status` is allowed to be updated.
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateSharingAgreement"];
    /**
     * Delete a Sharing Agreement
     * @description Deletes a sharing agreement.
     *
     * #### Allowed For
     *
     * * Admins
     */
    delete: operations["DeleteSharingAgreement"];
    parameters: {
      path: {
        sharing_agreement_id: components["parameters"]["SharingAgreementId"];
      };
    };
  };
  "/api/v2/skips": {
    /**
     * Record a New Skip for the Current User
     * @description Record a new ticket skip for the current user.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["RecordNewSkip"];
  };
  "/api/v2/slas/policies": {
    /**
     * List SLA Policies
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListSLAPolicies"];
    /**
     * Create SLA Policy
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateSLAPolicy"];
  };
  "/api/v2/slas/policies/{sla_policy_id}": {
    /**
     * Show SLA Policy
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowSLAPolicy"];
    /**
     * Update SLA Policy
     * @description Updates the specified policy.
     *
     * #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["UpdateSLAPolicy"];
    /**
     * Delete SLA Policy
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    delete: operations["DeleteSLAPolicy"];
    parameters: {
      path: {
        sla_policy_id: components["parameters"]["SLAPolicyId"];
      };
    };
  };
  "/api/v2/slas/policies/definitions": {
    /**
     * Retrieve Supported Filter Definition Items
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["RetrieveSLAPolicyFilterDefinitionItems"];
  };
  "/api/v2/slas/policies/reorder": {
    /**
     * Reorder SLA Policies
     * @description #### Availability
     *
     * * Accounts on the Support Professional or Suite Growth plan or above
     *
     * #### Allowed For
     *
     * * Admins
     */
    put: operations["ReorderSLAPolicies"];
  };
  "/api/v2/suspended_tickets": {
    /**
     * List Suspended Tickets
     * @description #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     *
     * #### Sorting
     *
     * You can sort the tickets with the `sort_by` and `sort_order` query string parameters.
     *
     * #### Pagination
     *
     * * Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListSuspendedTickets"];
    parameters: {
      query?: {
        sort_by?: components["parameters"]["SuspendedTicketsSortBy"];
        sort_order?: components["parameters"]["SuspendedTicketsSortOrder"];
      };
    };
  };
  "/api/v2/suspended_tickets/{id}": {
    /**
     * Show Suspended Ticket
     * @description #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     */
    get: operations["ShowSuspendedTickets"];
    /**
     * Delete Suspended Ticket
     * @description #### Allowed For
     *
     * * Unrestricted agents
     */
    delete: operations["DeleteSuspendedTicket"];
  };
  "/api/v2/suspended_tickets/{id}/recover": {
    /**
     * Recover Suspended Ticket
     * @description **Note**: During recovery, the API sets the requester to the authenticated agent who called the API, not the original requester. This prevents the ticket from being re-suspended after recovery. To preserve the original requester, use the [Recover Multiple Suspended Tickets](#recover-multiple-suspended-tickets) endpoint with the single ticket.
     *
     * This endpoint does not queue an asynchronous job that can be tracked from [Job Statuses](/api-reference/ticketing/ticket-management/job_statuses/). Instead, it processes the request with a synchronous response.
     *    - If all recoveries are successful, it returns a 200 with a `tickets` array in the response.
     *    - If all recoveries fail, it returns a 422 with a `suspended_tickets` array in the response.
     *    - If there is a mixture of successes and failures in a single call, it returns a 422 with a `suspended_tickets` array of the failures in the response.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     */
    put: operations["RecoverSuspendedTicket"];
  };
  "/api/v2/suspended_tickets/attachments": {
    /**
     * Suspended Ticket Attachments
     * @description Makes copies of any attachments on a suspended ticket and returns them as [attachment tokens](/api-reference/ticketing/tickets/ticket-attachments/). If the  ticket is manually recovered, you can include the attachment tokens on the new ticket.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     */
    post: operations["SuspendedTicketsAttachments"];
    parameters: {
      path: {
        id: components["parameters"]["SuspendedTicketId"];
      };
    };
  };
  "/api/v2/suspended_tickets/destroy_many": {
    /**
     * Delete Multiple Suspended Tickets
     * @description Accepts up to 100 ids (the auto-generated id, not the ticket id.)
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     */
    delete: operations["DeleteSuspendedTickets"];
    parameters: {
      query: {
        ids: components["parameters"]["SuspendedTicketsDeleteIds"];
      };
    };
  };
  "/api/v2/suspended_tickets/export": {
    /**
     * Export Suspended Tickets
     * @description Exports a list of suspended tickets for the Zendesk Support instance. To export the list, the endpoint enqueues a job to create a CSV file with the data. When done, Zendesk sends the requester an email containing a link to the CSV file. In the CSV, tickets are sorted by the update timestamp in ascending order.
     *
     *  #### Allowed For
     *
     *  * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     *  * Unrestricted agents on all other plans
     *
     *  #### Rate limits
     *
     *  Limited to one request per minute and up to one million records in return. The rate-limiting mechanism behaves identically to the one described in [Usage limits](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity).
     *  We recommend using the `Retry-After` header value as described in [Catching errors caused by rate limiting](/documentation/ticketing/using-the-zendesk-api/best-practices-for-avoiding-rate-limiting#catch).
     */
    post: operations["ExportSuspendedTickets"];
  };
  "/api/v2/suspended_tickets/recover_many": {
    /**
     * Recover Multiple Suspended Tickets
     * @description Accepts up to 100 ids (the auto-generated id, not the ticket id.) Note that suspended tickets that fail to be recovered are still included in the response.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
     * * Unrestricted agents on all other plans
     */
    put: operations["RecoverSuspendedTickets"];
    parameters: {
      query: {
        ids: components["parameters"]["SuspendedTicketsRecoverIds"];
      };
    };
  };
  "/api/v2/tags": {
    /**
     * List Tags
     * @description Lists up to the 20,000 most popular tags in the last 60 days, in decreasing popularity.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTags"];
  };
  "/api/v2/tags/count": {
    /**
     * Count Tags
     * @description Returns an approximate count of tags. If the count exceeds 100,000, it
     * is updated every 24 hours.
     *
     * The `refreshed_at` property of the `count` object is a timestamp that indicates when
     * the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, the `refreshed_at` property in the `count` object may
     * occasionally be null. This indicates that the count is being
     * updated in the background and the `value` property in the `count` object is limited to
     * 100,000 until the update is complete.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["CountTags"];
  };
  "/api/v2/target_failures": {
    /**
     * List Target Failures
     * @description Returns the 25 most recent target failures, per target.
     *
     * #### Stability
     *
     * * Development
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListTargetFailures"];
  };
  "/api/v2/target_failures/{target_failure_id}": {
    /**
     * Show Target Failure
     * @description #### Stability
     *
     * * Development
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ShowTargetFailure"];
    parameters: {
      path: {
        target_failure_id: components["parameters"]["TargetFailureId"];
      };
    };
  };
  "/api/v2/targets": {
    /**
     * List Targets
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTargets"];
    /**
     * Create Target
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateTarget"];
  };
  "/api/v2/targets/{target_id}": {
    /**
     * Show Target
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowTarget"];
    /**
     * Update Target
     * @description #### Allowed For
     * * Admins
     */
    put: operations["UpdateTarget"];
    /**
     * Delete Target
     * @description #### Allowed For
     * * Admins
     */
    delete: operations["DeleteTarget"];
    parameters: {
      path: {
        target_id: components["parameters"]["TargetId"];
      };
    };
  };
  "/api/v2/ticket_audits": {
    /**
     * List All Ticket Audits
     * @description Returns ticket audits. Archived tickets are not included in the response. Use the [List Audits for a Ticket](#list-audits-for-a-ticket) endpoint to
     * retrieve audit records for an archived ticket. To learn more about archived tickets, see [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756).
     *
     * This endpoint should not be used for capturing change data. When continually chasing the tail of a cursor, some records will be skipped. For this use case, use the [Incremental Ticket Event Export API](/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-event-export).
     *
     * #### Pagination
     *
     * - Cursor pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Admins
     */
    get: operations["ListTicketAudits"];
  };
  "/api/v2/ticket_fields": {
    /**
     * List Ticket Fields
     * @description Returns a list of all system and custom ticket fields in your account.
     *
     * Cursor pagination returns a maximum of 100 records per page and fields are returned in the order specified by their id.
     *
     * If the results are not paginated every field is returned in the response and fields are returned in the order specified by the position and id.
     *
     * For accounts without access to multiple ticket forms, positions can be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint or the Ticket Forms page in Zendesk Support (**Admin** > **Manage** > **Ticket Forms**). The Ticket Forms page shows the fields for the account. The order of the fields is used in the different products to show the field values in the tickets.
     *
     * For accounts with access to multiple ticket forms, positions can only be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint because products use the order defined on each form to show the field values instead of the general position of the ticket field in the account.
     *
     * Consider caching this resource to use with the [Tickets](/api-reference/ticketing/tickets/tickets/#json-format) API.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - No pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | users            | The user or users that created the ticket field
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketFields"];
    /**
     * Create Ticket Field
     * @description Creates any of the following custom field types:
     *
     * | Custom field type | Description                                                                                                                                                     |
     * |-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | text              | Default custom field type when `type` is not specified                                                                                                          |
     * | textarea          | For multi-line text                                                                                                                                             |
     * | checkbox          | To capture a boolean value. Allowed values are true or false                                                                                                    |
     * | date              | Example: 2021-04-16                                                                                                                                   |
     * | integer           | String composed of numbers. May contain an optional decimal point                                                                                               |
     * | decimal           | For numbers containing decimals                                                                                                                                 |
     * | regexp            | Matches the Regex pattern found in the custom field settings                                                                                                    |
     * | partialcreditcard | A credit card number. Only the last 4 digits are retained                                                                                                                                      |
     * | multiselect       | Enables users to choose multiple options from a dropdown menu                                                                                                |
     * | tagger            | Single-select dropdown menu. It contains one or more tag values belonging to the field's options. Example: ( {"id": 21938362, "value": ["hd_3000", "hd_5555"]}) |
     * | lookup            | A field to create a relationship (see [lookup relationships](/api-reference/ticketing/lookup_relationships/lookup_relationships/)) to another object such as a user, ticket, or organization |
     *
     * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in the Zendesk Help Center.
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Field limits
     *
     * We recommend the following best practices for ticket fields limits. Creating more than these amounts can affect performance.
     *
     * * 400 ticket fields per account if your account doesn't have ticket forms
     * * 400 ticket fields per ticket form if your account has ticket forms
     */
    post: operations["CreateTicketField"];
  };
  "/api/v2/ticket_fields/{ticket_field_id}": {
    /**
     * Show Ticket Field
     * @description #### Allowed for
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | users            | The user or users that created the ticket field
     */
    get: operations["ShowTicketfield"];
    /**
     * Update Ticket Field
     * @description #### Updating drop-down field options
     *
     * You can also use the update endpoint to add, update, or remove options in a drop-down custom field. Updating field options for multi-select fields works exactly the same as drop-down field options.
     *
     * **Important**: Unless you want to remove some options, you must specify all existing options in any update request. Omitting an option removes it from the drop-down field, which removes its values from any tickets or macros.
     *
     * Use the `custom_field_options` attribute to update the options. The attribute consists of an array of option objects, with each object consisting of a `name` and `value` property. The properties correspond to the "Title" and "Tag" text boxes in the admin interface. Example request body:
     *
     * ```json
     * {"ticket_field": {
     *     "custom_field_options": [
     *       {"name": "Apple Pie", "value": "apple"},
     *       {"name": "Pecan Pie", "value": "pecan"}
     *     ]
     *   }
     * }
     * ```
     *
     * #### Example Request
     *
     * ```bash
     * curl https://{subdomain}.zendesk.com/api/v2/ticket_fields/{id}.json \
     *   -d '{"ticket_field": {"custom_field_options": [{"name": "Apple Pie", "value": "apple"}, {"name": "Pecan Pie", "value": "pecan"}]}}' \
     *   -H "Content-Type: application/json" -X PUT \
     *   -v -u {email_address}:{password}
     * ```
     *
     * #### Example Response
     *
     * ```http
     * Status: 200 OK
     *
     * {
     *   "ticket_field": {
     *     "id":21938362,
     *     "type":"tagger",
     *     "title":"Pies",
     *     ...
     *     "custom_field_options": [
     *       {
     *         "id":21029772,
     *         "name":"Apple Pie",
     *         "raw_name":"Apple Pie",
     *         "value":"apple",
     *         "default":false
     *       },
     *       ...
     *     ]
     *   }
     * }
     * ```
     *
     * #### Allowed for
     *
     * * Admins
     */
    put: operations["UpdateTicketField"];
    /**
     * Delete Ticket Field
     * @description #### Allowed for
     *
     * * Admins
     */
    delete: operations["DeleteTicketField"];
    parameters: {
      query?: {
        creator?: components["parameters"]["Creator"];
      };
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
  };
  "/api/v2/ticket_fields/{ticket_field_id}/options": {
    /**
     * List Ticket Field Options
     * @description Returns a list of custom ticket field options for the given drop-down ticket field.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTicketFieldOptions"];
    /**
     * Create or Update Ticket Field Option
     * @description Creates or updates an option for the given drop-down ticket field.
     *
     * To update an option, include the id of the option in the `custom_field_option` object. Example:
     *
     * `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`
     *
     * If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.
     *
     * #### Response
     *
     * Returns one of the following status codes:
     *
     * - 200 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option already exists in the database
     * - 201 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option is new
     *
     * #### Allowed For
     *
     * * Admins
     *
     * #### Rate Limit
     * You can make 100 requests every 1 minute using this endpoint.
     * The rate limiting mechanism behaves as described in
     * [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.
     *
     * #### Field Option Limits
     *
     * * 2000 options per ticket field
     */
    post: operations["CreateOrUpdateTicketFieldOption"];
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
  };
  "/api/v2/ticket_fields/{ticket_field_id}/options/{ticket_field_option_id}": {
    /**
     * Show Ticket Field Option
     * @description #### Allowed for
     * * Agents
     */
    get: operations["ShowTicketFieldOption"];
    /**
     * Delete Ticket Field Option
     * @description #### Allowed for
     * * Admins
     */
    delete: operations["DeleteTicketFieldOption"];
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
        ticket_field_option_id: components["parameters"]["TicketFieldOptionId"];
      };
    };
  };
  "/api/v2/ticket_fields/count": {
    /**
     * Count Ticket Fields
     * @description Returns an approximate count of system and custom ticket fields in the account. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountTicketFields"];
  };
  "/api/v2/ticket_forms": {
    /**
     * List Ticket Forms
     * @description Returns a list of all ticket forms for your account if accessed as an admin or agent. End users only see ticket forms that have `end_user_visible` set to true.
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ListTicketForms"];
    /**
     * Create Ticket Form
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateTicketForm"];
  };
  "/api/v2/ticket_forms/{ticket_form_id}": {
    /**
     * Show Ticket Form
     * @description #### Allowed For
     *
     * * Admins, Agents, and End Users
     */
    get: operations["ShowTicketForm"];
    /**
     * Update Ticket Form
     * @description #### Allowed For
     * * Admins
     */
    put: operations["UpdateTicketForm"];
    /**
     * Delete Ticket Form
     * @description #### Allowed For
     * * Admins
     */
    delete: operations["DeleteTicketForm"];
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
  };
  "/api/v2/ticket_forms/{ticket_form_id}/clone": {
    /**
     * Clone an Already Existing Ticket Form
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CloneTicketForm"];
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
  };
  "/api/v2/ticket_forms/reorder": {
    /**
     * Reorder Ticket Forms
     * @description #### Allowed For
     * * Admins
     *
     * #### Request Parameters
     *
     * You can pass in the following parameter in the payload:
     *
     * | Name                | Type   | Comment
     * | ------------------- | ------ | --------
     * | ticket_form_ids     | array  | An array of ticket form ids. Example: "[2, 23, 46, 50]"
     */
    put: operations["ReorderTicketForms"];
  };
  "/api/v2/ticket_forms/show_many": {
    /**
     * Show Many Ticket Forms
     * @description Takes an `ids` query parameter that accepts a comma-separated list of up to 100 ticket form ids. This endpoint is used primarily by the [mobile SDK](/documentation/classic-web-widget-sdks/) and the [Web Widget](/api-reference/widget/introduction/).
     *
     * #### Allowed For
     *
     * * Anyone
     */
    get: operations["ShowManyTicketForms"];
  };
  "/api/v2/ticket_metrics": {
    /**
     * List Ticket Metrics
     * @description Returns a list of tickets with their metrics.
     *
     * Tickets are ordered chronologically by created date, from newest to oldest.
     * The last ticket listed may not be the absolute oldest ticket in your account
     * due to ticket archiving.
     *
     * Archived tickets are not included in the response. See
     * [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
     * Zendesk help.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketMetrics"];
  };
  "/api/v2/ticket_metrics/{ticket_metric_id}": {
    /**
     * Show Ticket Metrics
     * @description Returns a specific metric, or the metrics of a specific ticket.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowTicketMetrics"];
  };
  "/api/v2/tickets": {
    /** List Tickets */
    get: operations["ListTickets"];
    /** Create Ticket */
    post: operations["CreateTicket"];
  };
  "/api/v2/tickets/{ticket_id}": {
    /**
     * Show Ticket
     * @description Returns a number of ticket properties though not the ticket comments. To get the comments, use [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments)
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["ShowTicket"];
    /** Update Ticket */
    put: operations["UpdateTicket"];
    /**
     * Delete Ticket
     * @description #### Allowed For
     *
     * * Admins
     * * Agents with permission to delete tickets
     *
     * Agent delete permissions are set in Support. See
     * [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
     * in the Support Help Center.
     *
     * #### Ticket deletion rate limit
     *
     * You can delete 400 tickets every 1 minute using this endpoint.
     * The rate limiting mechanism behaves as described in
     * [Rate limits](/api-reference/introduction/rate-limits/) in the API introduction.
     * Zendesk recommends that you obey the Retry-After header values.
     * To delete many tickets, you may use [Bulk Delete Tickets](/api-reference/ticketing/tickets/tickets/#bulk-delete-tickets).
     */
    delete: operations["DeleteTicket"];
  };
  "/api/v2/tickets/{ticket_id}/audits": {
    /**
     * List Audits for a Ticket
     * @description Lists the audits for a specified ticket.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * **Note**: Audits for [Archived Tickets](https://support.zendesk.com/hc/en-us/articles/4408887617050) do not support pagination for this endpoint.
     *
     * #### Allowed for
     *
     * * Agents
     */
    get: operations["ListAuditsForTicket"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/audits/{ticket_audit_id}": {
    /**
     * Show Audit
     * @description #### Allowed for
     *
     * * Agents
     */
    get: operations["ShowTicketAudit"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_audit_id: components["parameters"]["TicketAuditId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/audits/{ticket_audit_id}/make_private": {
    /**
     * Change a Comment From Public To Private
     * @description #### Allowed for
     *
     * * Agents
     */
    put: operations["MakeTicketCommentPrivateFromAudits"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_audit_id: components["parameters"]["TicketAuditId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/audits/count": {
    /**
     * Count Audits for a Ticket
     * @description Returns an approximate count of audits for a specified ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed for
     *
     * * Agents
     */
    get: operations["CountAuditsForTicket"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/collaborators": {
    /**
     * List Collaborators for a Ticket
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketCollaborators"];
  };
  "/api/v2/tickets/{ticket_id}/comments": {
    /**
     * List Comments
     * @description Returns the comments added to the ticket.
     *
     * Each comment may include a `content_url` for an attachment or a `recording_url` for a voice comment that points to a file that may be hosted externally. For security reasons, take care not to inadvertently send Zendesk authentication credentials to third parties when attempting to access these files. See [Working with url properties](/documentation/ticketing/managing-tickets/working-with-url-properties).
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Sorting
     *
     * By default, comments are sorted by creation date in ascending order.
     *
     * When using cursor pagination, use the following parameter to change the sort order:
     *
     * | Name   | Type   | Required | Comments
     * | ------ | ------ | -------- | --------
     * | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)
     *
     * When using offset pagination, use the following parameters to change the sort order:
     *
     * | Name         | Type   | Required | Comments
     * | ------------ | ------ | -------- | --------
     * | `sort_order` | string | no       | One of `asc`, `desc`. Defaults to `asc`
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketComments"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/comments/{comment_id}/attachments/{attachment_id}/redact": {
    /**
     * Redact Comment Attachment
     * @description Redaction allows you to permanently remove attachments from an existing comment on a ticket. Once removed from a comment, the attachment is replaced with an empty "redacted.txt" file.
     *
     * The redaction is permanent. It is not possible to undo redaction or see what was removed. Once a ticket is closed, redacting its attachments is no longer possible.
     *
     * Also, if you want to redact an inline attachment, you can use the `include_inline_images` parameter in the [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments) operation to obtain the inline attachment ID, and use it in the request URL.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents when [deleting tickets is enabled for agents on professional accounts](https://support.zendesk.com/hc/en-us/articles/360002128107)
     * * Agents assigned to a custom role with permissions to redact ticket content (Enterprise only)
     */
    put: operations["RedactCommentAttachment"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        comment_id: components["parameters"]["CommentId"];
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/comments/{ticket_comment_id}/make_private": {
    /**
     * Make Comment Private
     * @description #### Allowed For
     *
     * * Agents
     */
    put: operations["MakeTicketCommentPrivate"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/comments/{ticket_comment_id}/redact": {
    /**
     * Redact String in Comment
     * @description Permanently removes words or strings from a ticket comment. Specify the string to redact in an object with a `text` property. Example: `'{"text": "987-65-4320"}'`. The characters of the word or string are replaced by the ▇ symbol.
     *
     * If the comment was made by email, the endpoint also attempts to redact the string from the original email retained by Zendesk for audit purposes.
     *
     * **Note**: If you use the rich text editor, support for redacting formatted text (bold, italics, hyperlinks) is limited.
     *
     * Redaction is permanent. You can't undo the redaction or see *what* was removed. Once a ticket is closed, you can no longer redact strings from its comments.
     *
     * To use this endpoint, the "Agents can delete tickets" option must be enabled in the Zendesk Support admin interface at **Admin** > **Settings** > **Agents**.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["RedactStringInComment"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/comments/count": {
    /**
     * Count Ticket Comments
     * @description Returns an approximate count of the comments added to the ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountTicketComments"];
  };
  "/api/v2/tickets/{ticket_id}/email_ccs": {
    /**
     * List Email CCs for a Ticket
     * @description Returns any users cc'd on the ticket.
     *
     * #### Availability
     *
     * The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.
     *
     * If the feature is not enabled, the default CC functionality is used. In that case, use [List Collaborators](/api-reference/ticketing/tickets/tickets/#list-collaborators-for-a-ticket) to list the users cc'ed on the ticket.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketEmailCCs"];
  };
  "/api/v2/tickets/{ticket_id}/followers": {
    /**
     * List Followers for a Ticket
     * @description Returns any users who follow the ticket.
     *
     * #### Availability
     *
     * The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTicketFollowers"];
  };
  "/api/v2/tickets/{ticket_id}/incidents": {
    /**
     * List Ticket Incidents
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTicketIncidents"];
  };
  "/api/v2/tickets/{ticket_id}/macros/{macro_id}/apply": {
    /**
     * Show Ticket After Changes
     * @description Returns the full ticket object as it would be after applying the macro to the ticket.
     * It doesn't actually change the ticket.
     *
     * To get only the ticket fields that would be changed by the macro,
     * see [Show Changes to Ticket](#show-changes-to-ticket).
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowTicketAfterChanges"];
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
        /**
         * @description The ID of the ticket
         * @example 35436
         */
        ticket_id: number;
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/mark_as_spam": {
    /**
     * Mark Ticket as Spam and Suspend Requester
     * @description #### Allowed For
     *
     * * Agents
     */
    put: operations["MarkTicketAsSpamAndSuspendRequester"];
  };
  "/api/v2/tickets/{ticket_id}/merge": {
    /**
     * Merge Tickets into Target Ticket
     * @description Merges one or more tickets into the ticket with the specified id.
     *
     * See [Merging tickets](https://support.zendesk.com/hc/en-us/articles/203690916)
     * in the Support Help Center for ticket merging rules.
     *
     * Any attachment to the source ticket is copied to the target ticket.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * Agents in the Enterprise account must have merge permissions.
     * See [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026)
     * in the Support Help Center.
     *
     * #### Available parameters
     *
     * The request takes a data object with the following properties:
     *
     * | Name                     | Type    | Required | Comments                                                |
     * | ------------------------ | ------- | -------- | ------------------------------------------------------- |
     * | ids                      | array   | yes      | Ids of tickets to merge into the target ticket          |
     * | target_comment           | string  | no       | Private comment to add to the target ticket. This comment is optional but strongly recommended |
     * | source_comment           | string  | no       | Private comment to add to the source ticket. This comment is optional but strongly recommended |
     * | target_comment_is_public | boolean | no       | Whether comments in the target ticket are public or private   |
     * | source_comment_is_public | boolean | no       | Whether comments in the source tickets are public or private |
     *
     * `target_comment` and `source_comment` can be used to provide a reason for the merge for recordkeeping purposes. If the source ticket has attachments, they are included in `target_comment`.
     *
     * Comments are private and can't be modified in the following cases:
     *
     *   * Any of the sources or target tickets are private
     *   * Any of the sources or target tickets were created through X (formerly Twitter), Facebook or the Channel framework
     *
     * In any other case, comments default to private but can be modified with the comment privacy parameters.
     */
    post: operations["MergeTicketsIntoTargetTicket"];
  };
  "/api/v2/tickets/{ticket_id}/related": {
    /**
     * Ticket Related Information
     * @description The request returns a data object with the following properties:
     *
     * | Name                | Type    | Comment
     * | ------------------- | ------- | -------
     * | topic_id            | string  | Related topic in the Web portal (deprecated feature)
     * | followup_source_ids | array   | Sources to follow up
     * | from_archive        | boolean | Is true if the current ticket is archived
     * | incidents           | integer | A count of related incident occurrences
     * | twitter             | object  | X (formerly Twitter) information associated with the ticket
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["TicketRelatedInformation"];
  };
  "/api/v2/tickets/{ticket_id}/satisfaction_rating": {
    /**
     * Create a Satisfaction Rating
     * @description Creates a CSAT rating for a solved ticket, or for a ticket that was previously
     * solved and then reopened.
     *
     * Only the end user listed as the ticket requester can create a satisfaction rating for the ticket.
     *
     * #### Allowed For
     *
     * * End user who requested the ticket
     *
     * The end user must be a verified user.
     */
    post: operations["CreateTicketSatisfactionRating"];
    parameters: {
      path: {
        /**
         * @description The id of the ticket
         * @example 35436
         */
        ticket_id: number;
      };
    };
  };
  "/api/v2/tickets/{ticket_id}/tags": {
    /**
     * List Resource Tags
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ListResourceTags"];
    /**
     * Add Tags
     * @description You can also add tags to multiple tickets with the [Update Many
     * Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.
     *
     * #### Safe Update
     *
     * If the same ticket is updated by multiple API requests at
     * the same time, some tags could be lost because of ticket
     * update collisions. Include `updated_stamp` and `safe_update`
     * properties in the request body to make a safe update.
     *
     * For `updated_stamp`, retrieve and specify the ticket's
     * latest `updated_at` timestamp. The tag update only occurs
     * if the `updated_stamp` timestamp matches the ticket's
     * actual `updated_at` timestamp at the time of the request.
     * If the timestamps don't match (in other words, if the
     * ticket was updated since you retrieved the ticket's
     * last `updated_at` timestamp), the request returns a
     * 409 Conflict error.
     *
     * #### Example
     *
     * ```js
     * {
     *   "tags": ["customer"],
     *   "updated_stamp":"2019-09-12T21:45:16Z",
     *   "safe_update":"true"
     * }
     * ```
     *
     * For details, see [Protecting against ticket update collisions](/api-reference/ticketing/tickets/tickets/#protecting-against-ticket-update-collisions).
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["PutTagsTicket"];
    /**
     * Set Tags
     * @description #### Allowed For
     *
     * * Agents
     */
    post: operations["SetTagsTicket"];
    /**
     * Remove Tags
     * @description You can also delete tags from multiple tickets with the
     * [Update Many Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.
     *
     * This endpoint supports safe updates. See [Safe Update](/api-reference/ticketing/ticket-management/tags/#safe-update).
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteTagsTicket"];
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/tickets/count": {
    /**
     * Count Tickets
     * @description Returns an approximate count of tickets in the account. If the count exceeds 100,000, it is updated every 24 hours.
     *
     * `ccd` lists tickets that the specified user is cc'd on.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountTickets"];
  };
  "/api/v2/tickets/create_many": {
    /**
     * Create Many Tickets
     * @description Accepts an array of up to 100 ticket objects. **Note**: Every ticket created with this endpoint may be affected by your business rules, which can include sending email notifications to your end users. If you are importing historical tickets or creating more than 1000 tickets, consider using the [Ticket Bulk Import](/api-reference/ticketing/tickets/ticket_import/#ticket-bulk-import) endpoint.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     * * Agents
     */
    post: operations["TicketsCreateMany"];
  };
  "/api/v2/tickets/destroy_many": {
    /**
     * Bulk Delete Tickets
     * @description Accepts a comma-separated list of up to 100 ticket ids.
     *
     * #### Allowed For
     *
     * * Admins
     * * Agents with permission to delete tickets
     *
     * Agent delete permissions are set in Support. See
     * [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
     * in the Support Help Center.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     */
    delete: operations["BulkDeleteTickets"];
  };
  "/api/v2/tickets/mark_many_as_spam": {
    /**
     * Bulk Mark Tickets as Spam
     * @description Accepts a comma-separated list of up to 100 ticket ids.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["MarkManyTicketsAsSpam"];
  };
  "/api/v2/tickets/show_many": {
    /**
     * Show Multiple Tickets
     * @description Accepts a comma-separated list of ticket ids to return.
     *
     * This endpoint will return up to 100 tickets records.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["TicketsShowMany"];
  };
  "/api/v2/tickets/update_many": {
    /**
     * Update Many Tickets
     * @description Accepts an array of up to 100 ticket objects, or a comma-separated list of up to 100 ticket ids.
     */
    put: operations["TicketsUpdateMany"];
  };
  "/api/v2/trigger_categories": {
    /**
     * List Trigger Categories
     * @description Returns all the trigger categories in the account.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTriggerCategories"];
    /**
     * Create Trigger Category
     * @description Creates a trigger category.
     */
    post: operations["CreateTriggerCategory"];
  };
  "/api/v2/trigger_categories/{trigger_category_id}": {
    /**
     * Show Trigger Category
     * @description Returns the trigger category with the specified ID.
     */
    get: operations["ShowTriggerCategoryById"];
    /**
     * Delete Trigger Category
     * @description Deletes the trigger category with the specified ID.
     */
    delete: operations["DeleteTriggerCategory"];
    /**
     * Update Trigger Category
     * @description Updates the trigger category with the specified ID.
     */
    patch: operations["UpdateTriggerCategory"];
  };
  "/api/v2/trigger_categories/jobs": {
    /**
     * Create Batch Job for Trigger Categories
     * @description Creates a job that performs a batch operation for the given trigger categories.
     */
    post: operations["BatchOperateTriggerCategories"];
  };
  "/api/v2/triggers": {
    /**
     * List Triggers
     * @description Lists all triggers for the current account.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each trigger, if present
     * | permissions      | The permissions for each trigger
     * | usage_1h         | The number of times each trigger has been used in the past hour
     * | usage_24h        | The number of times each trigger has been used in the past day
     * | usage_7d         | The number of times each trigger has been used in the past week
     * | usage_30d        | The number of times each trigger has been used in the past thirty days
     */
    get: operations["ListTriggers"];
    /**
     * Create Trigger
     * @description #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateTrigger"];
  };
  "/api/v2/triggers/{trigger_id}": {
    /**
     * Show Trigger
     * @description #### Allowed For
     *
     * * Agents
     *
     * The Via Type value is a number instead of a text string. See [Via types reference](/documentation/ticketing/reference-guides/via-types/) for the keys.
     */
    get: operations["GetTrigger"];
    /**
     * Update Trigger
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### Note
     *
     * Updating a condition or action updates both the conditions and actions arrays,
     * clearing all existing values of both arrays. Include all your conditions
     * and actions when updating any condition or action.
     */
    put: operations["UpdateTrigger"];
    /**
     * Delete Trigger
     * @description #### Allowed For
     *
     * * Agents
     */
    delete: operations["DeleteTrigger"];
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
  };
  "/api/v2/triggers/{trigger_id}/revisions": {
    /**
     * List Trigger Revisions
     * @description List the revisions associated with a trigger. Trigger revision history is only available on Enterprise plans.
     *
     * #### Allowed For
     *
     *  * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name  | Will sideload
     * | ----- | -------------
     * | users | The user that authored each revision
     *
     * #### Pagination
     *
     * This endpoint uses cursor-based pagination. The records are ordered in
     * descending order by the `created_at` timestamp, then by `id` on duplicate
     * `created_at` values.
     *
     * The `cursor` parameter is a non-human-readable argument you can use to move
     * forward or backward in time.
     *
     * Each JSON response will contain the following attributes to help you get
     * more results:
     *
     * - `after_url` requests more recent results
     * - `before_url` requests older results
     * - `after_cursor` is the cursor to build the request yourself
     * - `before_cursor` is the cursor to build the request yourself
     *
     * The properties are null if no more records are available.
     *
     * You can request a maximum of 1000 records using the `limit` parameter. If
     * no `limit` parameter is supplied, it will default to 1,000.
     */
    get: operations["ListTriggerRevisions"];
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
  };
  "/api/v2/triggers/{trigger_id}/revisions/{trigger_revision_id}": {
    /**
     * Show Trigger Revision
     * @description Fetches a revision associated with a trigger. Trigger revision history is only available on Enterprise plans.
     *
     * #### Allowed For
     *
     *  * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name  | Will sideload
     * | ----- | -------------
     * | users | The user that authored each revision
     */
    get: operations["TriggerRevision"];
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
        trigger_revision_id: components["parameters"]["TriggerRevisionId"];
      };
    };
  };
  "/api/v2/triggers/active": {
    /**
     * List Active Triggers
     * @description Lists all active triggers.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     * #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each trigger, if present
     * | permissions      | The permissions for each trigger
     * | usage_1h         | The number of times each trigger has been used in the past hour
     * | usage_24h        | The number of times each trigger has been used in the past day
     * | usage_7d         | The number of times each trigger has been used in the past week
     * | usage_30d        | The number of times each trigger has been used in the past thirty days
     */
    get: operations["ListActiveTriggers"];
    parameters: {
      query?: {
        sort?: components["parameters"]["TriggerSort"];
        sort_by?: components["parameters"]["TriggerSortBy"];
        sort_order?: components["parameters"]["TriggerSortOrder"];
        category_id?: components["parameters"]["TriggerCategoryId"];
      };
    };
  };
  "/api/v2/triggers/definitions": {
    /**
     * List Trigger Action and Condition Definitions
     * @description Returns the definitions of the actions a trigger can perform and the
     * definitions of the conditions under which a trigger can execute. The
     * definition of the action includes a title ("Status"), a type ("list"), and
     * possible values. The definition of the condition includes the same fields
     * as well as the possible operators.
     *
     * For a list of supported actions, see the [Actions reference](/documentation/ticketing/reference-guides/actions-reference)
     * For a list of supported conditions, see the [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListTriggerActionConditionDefinitions"];
  };
  "/api/v2/triggers/destroy_many": {
    /**
     * Bulk Delete Triggers
     * @description Deletes the triggers corresponding to the provided comma-separated list of IDs.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Request Parameters
     *
     * The DELETE request takes one parameter, an `ids` object that lists the
     * triggers to delete.
     *
     * | Name | Description
     * | ---- | -----------
     * | ids  | The IDs of the triggers to delete
     *
     * #### Example request
     *
     * ```js
     * {
     *   "ids": "25,23,27,22"
     * }
     * ```
     */
    delete: operations["DeleteManyTriggers"];
    parameters: {
      query: {
        ids: components["parameters"]["TriggerIds"];
      };
    };
  };
  "/api/v2/triggers/reorder": {
    /**
     * Reorder Triggers
     * @description Alters the firing order of triggers in the account. See
     * [Reordering and sorting triggers](https://support.zendesk.com/hc/en-us/articles/115015696088)
     * in the Zendesk Help Center. The firing order is set in a `trigger_ids` array in the request body.
     *
     * You must include every trigger id in your account to reorder the triggers. If not, the endpoint will return 404 Forbidden.
     *
     * Reordering triggers via the API is not permitted if you have more than one trigger category. If there is more than one
     * trigger category, the endpoint will return a `LimitOneCategory` error.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["ReorderTriggers"];
  };
  "/api/v2/triggers/search": {
    /**
     * Search Triggers
     * @description #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each trigger, if present
     * | permissions      | The permissions for each trigger
     * | usage_1h         | The number of times each trigger has been used in the past hour
     * | usage_24h        | The number of times each trigger has been used in the past day
     * | usage_7d         | The number of times each trigger has been used in the past week
     * | usage_30d        | The number of times each trigger has been used in the past thirty days
     *
     * #### Filter
     *
     * Use the `filter` query parameter to filter a trigger search by one or more attributes. For example, the following `filter` argument filters triggers by the `description` attribute:
     *
     * ```json
     * {
     *   "json": {
     *     "description": "Close a ticket"
     *   }
     * }
     * ```
     */
    get: operations["SearchTriggers"];
    parameters: {
      query: {
        query: components["parameters"]["TriggerSearchQuery"];
        filter?: components["parameters"]["TriggerSearchFilter"];
        active?: components["parameters"]["TriggerActive"];
        sort?: components["parameters"]["TriggerSort"];
        sort_by?: components["parameters"]["TriggerSortBy"];
        sort_order?: components["parameters"]["TriggerSortOrder"];
        include?: components["parameters"]["TriggerInclude"];
      };
    };
  };
  "/api/v2/triggers/update_many": {
    /**
     * Update Many Triggers
     * @description Updates the position or the active status of multiple triggers. Any additional properties are ignored.
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Request Parameters
     *
     * The PUT request expects a `triggers` object that lists the triggers to update.
     *
     * Each trigger may have the following properties:
     *
     * | Name        | Mandatory | Description
     * | --------    | --------- | -----------
     * | id          | yes       | The ID of the trigger to update
     * | position    | no        | The new position of the trigger
     * | active      | no        | The active status of the trigger (true or false)
     * | category_id | no        | The ID of the new category the trigger is to be moved to
     *
     * #### Example Request
     *
     * ```js
     * {
     *   "triggers": [
     *     {"id": 25, "position": 3},
     *     {"id": 23, "position": 5},
     *     {"id": 27, "position": 9},
     *     {"id": 22, "position": 7}
     *   ]
     * }
     * ```
     */
    put: operations["UpdateManyTriggers"];
  };
  "/api/v2/uploads": {
    /**
     * Upload Files
     * @description Uploads a file that can be attached to a ticket comment. It doesn't attach the file to the comment. For details and examples, see [Attaching ticket comments with the API](/documentation/ticketing/using-the-zendesk-api/adding-ticket-attachments-with-the-api).
     *
     * The endpoint has a required `filename` query parameter. The parameter specifies what the file will be named when attached to the ticket comment (to give the agent more context about the file). The parameter does not specify the file on the local system to be uploaded. While the two names can be different, their file extensions must be the same. If they don't match, the agent's browser or file reader could give an error when attempting to open the attachment.
     *
     * The `Content-Type` header must contain a recognized MIME type that correctly describes the type of the uploaded file. Failing to send a recognized, correct type may cause undesired behavior. For example, in-browser audio playback may be interrupted by the browser's security mechanisms for MP3s uploaded with an incorrect type.
     *
     * Adding multiple files to the same upload is handled by splitting requests and passing the API token received from the first request to each subsequent request. The token is valid for 3 days.
     *
     * **Note**: Even if [private attachments](https://support.zendesk.com/hc/en-us/articles/204265396) are enabled in the Zendesk Support instance, uploaded files are visible to any authenticated user at the `content_URL` specified in the [JSON response](#json-format) until the upload token is consumed. Once a file is associated with a ticket or post, visibility is restricted to users with access to the ticket or post with the attachment.
     *
     * #### Allowed For
     *
     * * End users
     */
    post: operations["UploadFiles"];
  };
  "/api/v2/uploads/{token}": {
    /**
     * Delete Upload
     * @description #### Allowed for
     *
     * * End Users
     */
    delete: operations["DeleteUpload"];
  };
  "/api/v2/user_fields": {
    /**
     * List User Fields
     * @description Returns a list of custom user fields in your account. Fields are returned in the order that you specify in your user fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each User Field to the values returned under the `user_fields` attribute on the [User](/api-reference/ticketing/users/users/) resource.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListUserFields"];
    /**
     * Create User Field
     * @description Creates any of the following custom field types:
     *
     * * text (default when no "type" is specified)
     * * textarea
     * * checkbox
     * * date
     * * integer
     * * decimal
     * * regexp
     * * dropdown
     * * lookup
     *
     * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateUserField"];
  };
  "/api/v2/user_fields/{user_field_id}": {
    /**
     * Show User Field
     * @description #### Allowed for
     *
     * * Agents
     */
    get: operations["ShowUserField"];
    /**
     * Update User Field
     * @description #### Updating a Dropdown (Tagger) Field
     *
     * Dropdown fields return an array of `custom_field_options` which specify the name, value and order of the list of dropdown options.
     * Understand the following behavior when updating a dropdown field:
     *
     * - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations.
     * - To create a new option, pass a null `id` along with `name` and `value`.
     * - To update an existing option, pass its `id` along with `name` and `value`.
     * - To re-order an option, reposition it in the `custom_field_options` array relative to the other options.
     * - To remove an option, omit it from the list of options upon update.
     *
     * #### Example Request
     *
     * ```bash
     * curl https://{subdomain}.zendesk.com/api/v2/user_fields/{user_field_id}.json \
     *   -H "Content-Type: application/json" -X PUT \
     *   -d '{"user_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 2", "value": "option_3"}]}}' \
     *   -v -u {email_address}:{password}
     * ```
     * #### Allowed for
     *
     * * Admins
     */
    put: operations["UpdateUserField"];
    /**
     * Delete User Field
     * @description #### Allowed for
     *
     * * Admins
     */
    delete: operations["DeleteUserField"];
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
  };
  "/api/v2/user_fields/{user_field_id}/options": {
    /**
     * List User Field Options
     * @description Returns a list of custom user field options for the given dropdown user field.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListUserFieldOptions"];
    /**
     * Create or Update a User Field Option
     * @description Creates a new option or updates an existing option for the given drop-down user field.
     *
     * To update an option, include the id of the option in the `custom_field_option` object. Example: `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`. If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.
     *
     * #### Response
     *
     * Returns one of the following status codes:
     *
     * - 200 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option already exists in the database
     * - 201 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option is new
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateOrUpdateUserFieldOption"];
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
  };
  "/api/v2/user_fields/{user_field_id}/options/{user_field_option_id}": {
    /**
     * Show a User Field Option
     * @description #### Allowed for
     * * Agents
     */
    get: operations["ShowUserFieldOption"];
    /**
     * Delete User Field Option
     * @description #### Allowed for
     * * Admins
     */
    delete: operations["DeleteUserFieldOption"];
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
        user_field_option_id: components["parameters"]["UserFieldOptionId"];
      };
    };
  };
  "/api/v2/user_fields/reorder": {
    /**
     * Reorder User Field
     * @description #### Allowed For
     *
     * * Admins
     */
    put: operations["ReorderUserField"];
  };
  "/api/v2/users": {
    /**
     * List Users
     * @description #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Admins, Agents and Light Agents
     */
    get: operations["ListUsers"];
    /** Create User */
    post: operations["CreateUser"];
  };
  "/api/v2/users/{user_id}": {
    /**
     * Show User
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowUser"];
    /** Update User */
    put: operations["UpdateUser"];
    /**
     * Delete User
     * @description Deletes the user and associated records from the account.
     *
     * **Warning**:
     *
     * * Deleted users are not recoverable.
     * * Both agents and administrators can soft delete users in the agent interface in Zendesk Support. Agents with permission can delete end users, while administrators can delete all users except the account owner.
     *
     * To comply with GDPR, a further step is needed. See [Permanently Delete User](/api-reference/ticketing/users/users/#permanently-delete-user).
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     */
    delete: operations["DeleteUser"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/compliance_deletion_statuses": {
    /**
     * Show Compliance Deletion Statuses
     * @description Returns the GDPR status for each user per area of compliance. A Zendesk area of compliance is typically a product like "support/explore" but can be more fine-grained for areas within the product lines.
     *
     * If the user is not in the account, the request returns a 404 status.
     *
     * ```http
     * Status: 404
     * {
     *   "error":"RecordNotFound",
     *   "description":"Not found"
     * }
     * ```
     *
     * #### Allowed For
     *
     * * Agents, with restrictions
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ShowUserComplianceDeletionStatuses"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/group_memberships/{group_membership_id}/make_default": {
    /**
     * Set Membership as Default
     * @description #### Allowed For:
     *
     * * Agents
     */
    put: operations["GroupMembershipSetDefault"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        group_membership_id: components["parameters"]["GroupMembershipId"];
      };
    };
  };
  "/api/v2/users/{user_id}/identities": {
    /**
     * List Identities
     * @description Returns a list of identities for the given user.
     *
     * Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only list email and phone number identities.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     * * Verified end users
     */
    get: operations["ListUserIdentities"];
    /**
     * Create Identity
     * @description Adds an identity to a user's profile. An agent can add an identity to any user profile.
     *
     * Supported identity types:
     *
     * | Type             | Example |
     * | ---------------- | ------- |
     * | email            | `{ "type" : "email", "value" : "someone@example.com" }` |
     * | twitter          | `{ "type" : "twitter", "value" : "screen_name" }` |
     * | facebook         | `{ "type" : "facebook", "value" : "855769377321" }` |
     * | google           | `{ "type" : "google", "value" : "example@gmail.com" }` |
     * | agent_forwarding | `{ "type" : "agent_forwarding", "value" : "+1 555-123-4567" }` |
     * | phone_number     | `{ "type" : "phone_number", "value" : "+1 555-123-4567" }` |
     *
     * To create an identity without sending out a verification email, include a `"skip_verify_email": true` property.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["CreateUserIdentity"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/identities/{user_identity_id}": {
    /**
     * Show Identity
     * @description Shows the identity with the given id for a given user.
     *
     * Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only view email or phone number identity.
     *
     * #### Allowed For
     *
     * * Agents
     * * Verified end users
     */
    get: operations["ShowUserIdentity"];
    /**
     * Update Identity
     * @description This endpoint allows you to:
     *
     * * Set the specified identity as verified (but you cannot unverify a verified identity)
     * * Update the `value` property of the specified identity
     *
     * You can't change an identity's `primary` attribute with this endpoint. You must use the [Make Identity Primary](#make-identity-primary) endpoint instead.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["UpdateUserIdentity"];
    /**
     * Delete Identity
     * @description Deletes the identity for a given user.
     * In certain cases, a phone number associated with an identity is still visible on the user profile after the identity has been deleted via API. You can remove the phone number from the user profile by updating the `phone` attribute of the user to an empty string. See [Update User via API](/api-reference/ticketing/users/users/#update-user) for details and examples.
     *
     * #### Allowed For
     * * Agents
     */
    delete: operations["DeleteUserIdentity"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
  };
  "/api/v2/users/{user_id}/identities/{user_identity_id}/make_primary": {
    /**
     * Make Identity Primary
     * @description Sets the specified identity as primary. To change other attributes, use the [Update  Identity](#update-identity) endpoint. This is a collection-level operation and the correct behavior for an API client is to subsequently reload the entire collection.
     *
     * The first endpoint is the preferred option if authenticating as an agent. If authenticating as an end user, you can only use the second endpoint. In addition, an end user can only make an email identity primary if the email is verified.
     *
     * #### Allowed For
     *
     * * Agents
     * * Verified end users
     */
    put: operations["MakeUserIdentityPrimary"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
  };
  "/api/v2/users/{user_id}/identities/{user_identity_id}/request_verification": {
    /**
     * Request User Verification
     * @description Sends the user a verification email with a link to verify ownership of the email address.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["RequestUserVerfication"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
  };
  "/api/v2/users/{user_id}/identities/{user_identity_id}/verify": {
    /**
     * Verify Identity
     * @description Sets the specified identity as verified.
     *
     * For security reasons, you can't use this endpoint to update the email identity of the account owner. To verify the person's identity, send a verification email. See [Verifying the account owner's email address](https://support.zendesk.com/hc/en-us/articles/4408828975130) in Zendesk help.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["VerifyUserIdentity"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
  };
  "/api/v2/users/{user_id}/merge": {
    /**
     * Merge End Users
     * @description Merges the end user specified in the path parameter into the existing end user specified in the request body.
     *
     * Any two end users can be merged with the exception of end users created by sharing agreements.
     *
     * Agents and admins cannot be merged.
     *
     * For more information about how user data is merged, see [Merging a user's duplicate account](https://support.zendesk.com/hc/en-us/articles/4408887695898) in Zendesk help.
     *
     * #### Allowed For
     *
     * * Admins or agents with permission to edit end users
     */
    put: operations["MergeEndUsers"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/organization_memberships/{organization_membership_id}/make_default": {
    /**
     * Set Membership as Default
     * @description Sets the default organization membership of a given user.
     *
     * #### Allowed for
     *
     * * Admins
     * * Agents when setting the default organization membership for an end user
     */
    put: operations["SetOrganizationMembershipAsDefault"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        organization_membership_id: components["parameters"]["OrganizationMembershipId"];
      };
    };
  };
  "/api/v2/users/{user_id}/organizations/{organization_id}": {
    /**
     * Unassign Organization
     * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
     *
     * #### Allowed For
     *
     * * Agents
     */
    delete: operations["UnassignOrganization"];
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/organizations/{organization_id}/make_default": {
    /**
     * Set Organization as Default
     * @description Sets the default organization membership of a given user.
     *
     * #### Allowed For
     *
     * * Agents
     */
    put: operations["SetOrganizationAsDefault"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
  };
  "/api/v2/users/{user_id}/password": {
    /**
     * Change Your Password
     * @description You can only change your own password. Nobody can change the password of another user because it requires knowing the user's existing password. However, an admin can set a new password for another user without knowing the existing password. See [Set a User's Password](#set-a-users-password) above.
     *
     * #### Allowed For
     *
     * * Agents
     * * End Users
     */
    put: operations["ChangeOwnPassword"];
    /**
     * Set a User's Password
     * @description An admin can set a user's password only if the setting is enabled in Zendesk Support under **Settings** > **Security** > **Global**. The setting is off by default. Only the account owner can access and change this setting.
     *
     * #### Allowed For
     *
     * * Admins
     */
    post: operations["SetUserPassword"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/password/requirements": {
    /**
     * List password requirements
     * @description #### Allowed For
     *
     * * Agents
     * * End Users
     */
    get: operations["GetUserPasswordRequirements"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/related": {
    /** Show User Related Information */
    get: operations["ShowUserRelated"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/sessions": {
    /**
     * Bulk Delete Sessions
     * @description Deletes all the sessions for a user.
     *
     * #### Allowed For
     *
     * * Admins, Agents, End users
     */
    delete: operations["BulkDeleteSessionsByUserId"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/sessions/{session_id}": {
    /**
     * Show Session
     * @description #### Allowed For
     *
     * * Admins, Agents, End users
     */
    get: operations["ShowSession"];
    /**
     * Delete Session
     * @description #### Allowed For
     *
     * * Admins, Agents, End users
     */
    delete: operations["DeleteSession"];
    parameters: {
      path: {
        session_id: components["parameters"]["SessionId"];
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/users/{user_id}/skips": {
    /**
     * List Ticket Skips
     * @description Archived tickets are not included in the response. See
     * [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
     * the Support Help Center.
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     * * Agents with "View only" or higher reports permissions in Support.
     *   These permissions are distinct from Explore permissions.
     * * Agents retrieving their own skips
     */
    get: operations["ListTicketSkips"];
    parameters: {
      query?: {
        sort_order?: components["parameters"]["TicketSortOrder"];
      };
      path: {
        user_id: components["parameters"]["SkipTicketUserId"];
        ticket_id: components["parameters"]["TicketId"];
      };
    };
  };
  "/api/v2/users/autocomplete": {
    /**
     * Autocomplete Users
     * @description Returns an array of users whose name starts with the value specified in the `name` parameter.
     * It only returns users with no foreign identities.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["AutocompleteUsers"];
  };
  "/api/v2/users/count": {
    /**
     * Count Users
     * @description Returns an approximate count of users. If the count exceeds 100,000, it is updated every 24 hours.
     *
     * The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, the `refreshed_at` property may occasionally be null.
     * This indicates that the count is being updated in the background. The `count` object's `value` property is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     *
     * * Admins, Agents and Light Agents
     */
    get: operations["CountUsers"];
  };
  "/api/v2/users/create_many": {
    /**
     * Create Many Users
     * @description Accepts an array of up to 100 user objects.
     *
     * **Note**: To protect the data in your Zendesk account, bulk user imports are not enabled by default in Zendesk accounts. The account owner must contact [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850) to enable the imports. A 403 Forbidden
     * error is returned if data imports are not enabled.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     *
     * #### Specifying an organization
     *
     * You can assign a user to an existing organization by setting an
     * `organization_id` property in the user object.
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     */
    post: operations["CreateManyUsers"];
  };
  "/api/v2/users/create_or_update": {
    /**
     * Create Or Update User
     * @description Creates a user if the user does not already exist, or updates an existing user
     * identified by e-mail address or external ID.
     *
     * If you don't specify a role parameter, the new user is assigned the role of end user.
     *
     * If you need to create users without sending out a verification email, include a `"skip_verify_email": true` property in the body.
     *
     * #### External ID Case Sensitivity
     *
     * When providing an external id to identify an existing user to update, the search for the user record is not case sensitive.
     *
     * However, if an existing user is found, the system will update the user's external id to match the case of the external id used to find the user.
     *
     * #### Response Status Code
     *
     * - If the user exists in Zendesk, a successful request returns a 200 status code with "Location: /api/v2/users/{user_id}.json".
     * - If the user does not exist in Zendesk, a successful request returns a 201 status code with "Location: /api/v2/users/{new_user_id}.json".
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     */
    post: operations["CreateOrUpdateUser"];
  };
  "/api/v2/users/create_or_update_many": {
    /**
     * Create Or Update Many Users
     * @description Accepts an array of up to 100 user objects. For each user, the user is created if it does not
     * already exist, or the existing user is updated.
     *
     * **Note**: To protect the data in your Zendesk account, bulk user imports are not enabled by default in Zendesk accounts. The account owner must contact [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850) to enable the imports. A 403 Forbidden
     * error is returned if data imports are not enabled.
     *
     * Each individual user object can identify an existing user by `email` or by `external_id`.
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     *
     * #### Allowed For
     *
     * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     */
    post: operations["CreateOrUpdateManyUsers"];
  };
  "/api/v2/users/destroy_many": {
    /**
     * Bulk Delete Users
     * @description Accepts a comma-separated list of up to 100 user ids.
     *
     * The request takes an `ids` or an `external_ids` query parameter.
     *
     * #### Allowed for
     *
     * - Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
     *
     * #### Response
     *
     * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
     */
    delete: operations["DestroyManyUsers"];
  };
  "/api/v2/users/logout_many": {
    /**
     * Logout many users
     * @description Accepts a comma-separated list of up to 100 user ids.
     *
     * #### Allowed For:
     *
     * * Admins
     */
    post: operations["LogoutManyUsers"];
  };
  "/api/v2/users/me": {
    /**
     * Show Self
     * @description The endpoint returns [user information](/api-reference/ticketing/users/users/) and an `authenticity_token`.
     *
     * #### Allowed For
     *
     * * Anonymous users
     *
     * #### Authenticity Token
     *
     * Zendesk API calls made by end users from a Zendesk help center must include `authenticity_token` in the `X-CSRF-Token` HTTP header. This helps prevent [cross-site request forgery (CSRF)](https://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks.
     *
     * For an example using an authenticity token, see the AJAX request in the [Upgrading from Templating API v1](https://developer.zendesk.com/documentation/help_center/help-center-templates/v1#jquery) documentation.
     */
    get: operations["ShowCurrentUser"];
  };
  "/api/v2/users/me/logout": {
    /**
     * Delete the Authenticated Session
     * @description Deletes the current session. In practice, this only works when using session auth for requests, such as client-side requests
     * made from a Zendesk app. When using OAuth or basic authentication, you don't have a current session so this endpoint has no effect.
     *
     * #### Allowed For
     *
     * * Admins, Agents, End users
     */
    delete: operations["DeleteAuthenticatedSession"];
  };
  "/api/v2/users/me/session": {
    /**
     * Show the Currently Authenticated Session
     * @description #### Allowed For
     *
     * * Admins, Agents, End users
     */
    get: operations["ShowCurrentlyAuthenticatedSession"];
  };
  "/api/v2/users/me/session/renew": {
    /**
     * Renew the current session
     * @description #### Allowed For
     *
     * * Admins, Agents, End users
     */
    get: operations["RenewCurrentSession"];
  };
  "/api/v2/users/request_create": {
    /**
     * Request User Create
     * @description Sends the owner a reminder email to update their subscription so more agents can be created.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["RequestUserCreate"];
  };
  "/api/v2/users/search": {
    /**
     * Search Users
     * @description Returns an array of users who meet the search criteria.
     *
     * #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     *
     * * Admins, Agents and Light Agents
     */
    get: operations["SearchUsers"];
  };
  "/api/v2/users/show_many": {
    /**
     * Show Many Users
     * @description Accepts a comma-separated list of up to 100 user ids or external ids.
     *
     * #### Allowed For:
     *
     * * Agents
     */
    get: operations["ShowManyUsers"];
  };
  "/api/v2/users/update_many": {
    /** Update Many Users */
    put: operations["UpdateManyUsers"];
  };
  "/api/v2/views": {
    /**
     * List Views
     * @description Lists shared and personal views available to the current user.
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each view, if present
     * | permissions      | The permissions for each view
     *
     * #### Pagination
     *
     * - Cursor pagination (recommended, but only sorts by `created_at`)
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListViews"];
    /**
     * Create View
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### JSON Format
     *
     * The JSON format consists of one property, a `view` object that lists the values to set when the view is created.
     *
     * **Note**: The request must include at least one condition in the `all` array that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.
     *
     * | Name        | Description
     * | ----------- | -----------
     * | title       | Required. The title of the view
     * | all         | Required. An array of one or more conditions. A ticket must meet all of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     * | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     * | description | The description of the view
     * | active      | Allowed values are true or false. Determines if the view is displayed or not
     * | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description", "priority"]}`. See [View columns](#view-columns)
     * | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property
     *
     * The `restriction` object has the following properties.
     *
     * | Name | Comment
     * | ---- | -------
     * | type | Allowed values are "Group" or "User"
     * | id   | The numeric ID of a single group or user
     * | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`
     *
     * If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.
     *
     * #### Example Request Body
     *
     * ```js
     * {
     *   "view": {
     *     "title": "Kelly's tickets",
     *     "raw_title": "{{dc.tickets_assigned_to_kelly}}",
     *     "description": "Tickets that are assigned to Kelly",
     *     "active": true,
     *     "position": 3,
     *     "restriction": {
     *       "type": "User",
     *       "id": "213977756"
     *     },
     *     "all": [
     *       {
     *         "field": "status",
     *         "operator": "less_than",
     *         "value": "solved"
     *       },
     *       {
     *         "field": "group_id",
     *         "operator": "is",
     *         "value": "24000932"
     *       },
     *       {
     *         "field": "custom_fields_360011872073",
     *         "operator": "is",
     *         "value": "Canada"
     *       },
     *       ...
     *     ],
     *     "output": {
     *       "columns": ["status", "requester", "assignee"],
     *       "group_by": "assignee",
     *       "group_order": "desc",
     *       "sort_by": "status",
     *       "sort_order": "desc"
     *     }
     *   }
     * }
     * ```
     *
     * #### View columns
     *
     * The `output` request parameter lets you specify what columns to include in the view in the agent interface. Example: `"output": {"columns": ["status", "description", "priority"]}`. The following table lists possible columns for views in the agent UI and the corresponding values in the `columns` array.
     *
     * For custom fields, specify the id of the custom field in the `columns` array.
     *
     * You can specify a total of 10 columns to a view.
     *
     * | View column title in UI     | Value                |
     * |---------------------------- | -------------------- |
     * | Assigned                    | `assigned`           |
     * | Assignee                    | `assignee`           |
     * | Due Date                    | `due_date`           |
     * | Group                       | `group`              |
     * | ID                          | `nice_id`            |
     * | Updated                     | `updated`            |
     * | Assignee updated            | `updated_assignee`   |
     * | Requester updated           | `updated_requester`  |
     * | Updater                     | `updated_by_type`    |
     * | Organization                | `organization`       |
     * | Priority                    | `priority`           |
     * | Requested                   | `created`            |
     * | Requester                   | `requester`          |
     * | Requester language          | `locale_id`          |
     * | Satisfaction                | `satisfaction_score` |
     * | Solved                      | `solved`             |
     * | Status category             | `status`             |
     * | Subject                     | `description`        |
     * | Submitter                   | `submitter`          |
     * | Ticket form                 | `ticket_form`        |
     * | Type                        | `type`               |
     * | Brand                       | `brand`              |
     * | Ticket status               | `custom_status_id`   |
     *
     * #### View sorting
     *
     * You can group and sort items in the view by adding items to the `output` parameter:
     *
     * | Attribute                   | Description
     * |-----------------------------| -----------
     * | `group_by`, `sort_by`       | Sort or group the tickets by a column in the [View columns](#view-columns) table. The `subject` and `submitter` columns are not supported
     * | `group_order`, `sort_order` | Either "asc" or "desc"
     */
    post: operations["CreateView"];
  };
  "/api/v2/views/{view_id}": {
    /**
     * Show View
     * @description #### Allowed For
     *
     * * Agents
     */
    get: operations["ShowView"];
    /**
     * Update View
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### JSON Format
     *
     *  The PUT request takes one property, a `view` object that lists the values to update. All properties are optional.
     *
     * **Note**: Updating a condition updates the containing array, clearing the other conditions. Include all your conditions when updating any condition.
     *
     * | Name        | Description
     * | ----------- | -----------
     * | title       | The title of the view
     * | all         | An array of one or more conditions. A ticket must meet all the conditions to be included in the view. The PUT request replaces all existing conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     * | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. At least one `all` condition must be defined with the `any` conditions. The PUT request replaces all existing `any` conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     * | active      | Allowed values are true or false. Determines if the view is displayed or not
     * | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description," "priority"]}`. See [View columns](#view-columns)
     * | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property
     *
     * The `restriction` object has the following properties.
     *
     * | Name | Comment
     * | ---- | -------
     * | type | Allowed values are "Group" or "User"
     * | id   | The numeric ID of a single group or user
     * | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`
     *
     * If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.
     *
     * You can also update how items are sorted and grouped. See [View sorting](#view-sorting) in Create View.
     *
     * #### Example Request Body
     *
     * ```js
     * {
     *   "view": {
     *     "title": "Code red tickets",
     *     "restriction": {
     *       "type": "Group",
     *       "ids": [10052, 10057, 10062, 10002]
     *     },
     *     "all": [
     *       {
     *         "field": "priority",
     *         "operator": "is",
     *         "value": "urgent"
     *       }
     *     ],
     *     "output": {
     *       "columns": ["status", "requester", "assignee", "updated"]
     *     }
     *   }
     * }
     * ```
     */
    put: operations["UpdateView"];
    /**
     * Delete View
     * @description #### Allowed For
     * * Agents
     */
    delete: operations["DeleteView"];
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
  };
  "/api/v2/views/{view_id}/count": {
    /**
     * Count Tickets in View
     * @description Returns the ticket count for a single view.
     *
     * This endpoint is rate limited to 5 requests per minute, per view, per agent.
     *
     * #### View Counts
     *
     * The view count endpoints, Count Tickets in View (this endpoint) and [Count Tickets in Views](#count-tickets-in-views), let you estimate how many tickets remain in a view without having to retrieve the entire view. They're designed to help estimate view size. From a business perspective, accuracy becomes less relevant as view size increases.
     *
     * To ensure quality of service, these counts are cached more heavily as the number of tickets in a view grows. For a view with thousands of tickets, you can expect the count to be cached for 60-90 minutes. As a result, the count may not reflect the actual number of tickets in your view.
     *
     * View counts are represented as JSON objects with the following attributes:
     *
     * | Name            | Type        | Comment
     * | --------------- | ------------| -------
     * | view_id         | integer     | The id of the view
     * | url             | string      | The API url of the count
     * | value           | integer     | The cached number of tickets in the view. Can also be null if the system is loading and caching new data. Not to be confused with 0 tickets
     * | pretty          | string      | A pretty-printed text approximation of the view count
     * | fresh           | boolean     | false if the cached data is stale and the system is still loading and caching new data
     * | active          | boolean     | Only active views if true, inactive views if false, all views if null.
     *
     * #### Example
     * ```js
     * {
     *   "view_count": {
     *     "view_id": 25,
     *     "url":     "https://company.zendesk.com/api/v2/views/25/count.json",
     *     "value":   719,
     *     "pretty":  "~700",
     *     "fresh":   true
     *   }
     * }
     * ```
     */
    get: operations["GetViewCount"];
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
  };
  "/api/v2/views/{view_id}/execute": {
    /**
     * Execute View
     * @description Returns the column titles and the rows of the specified view.
     *
     * The `columns` array lists the view's column titles and includes only views parameters.
     *
     * The `rows` array lists the values of each column for each ticket and includes parameters from both views and tickets. Though not displayed in the view, a partial ticket object is included with each row object.
     *
     * **Note**: To get the full ticket objects for a specified view, use [List Tickets from a View](#list-tickets-from-a-view).
     *
     * This endpoint is rate limited to 5 requests per minute, per view, per agent.
     *
     * The view execution system is designed for periodic rather than high-frequency API usage. In particular, views called very frequently may be cached by Zendesk. This means that the API client will still receive a result, but that result may have been computed at any time within the last 10 minutes.
     *
     * Zendesk recommends using the Incremental Ticket Export endpoint to get the latest changes. You can call it more often, and it returns all the tickets that changed since the last poll. For details and rate limits, see [Incremental Exports](/api-reference/ticketing/ticket-management/incremental_exports/).
     *
     * View output sorting can be controlled by passing the `sort_by` and `sort_order` parameters in the format described in the table in [Preview Views](#preview-views).
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ExecuteView"];
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
  };
  "/api/v2/views/{view_id}/export": {
    /**
     * Export View
     * @description Returns the csv attachment of the specified view if possible. Enqueues a job to produce the csv if necessary.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ExportView"];
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
  };
  "/api/v2/views/{view_id}/tickets": {
    /**
     * List Tickets From a View
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### Pagination
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTicketsFromView"];
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
  };
  "/api/v2/views/active": {
    /**
     * List Active Views
     * @description Lists active shared and personal views available to the current user.
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each view, if present
     * | permissions      | The permissions for each view
     *
     * #### Pagination
     *
     * - Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 records per page.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListActiveViews"];
  };
  "/api/v2/views/compact": {
    /**
     * List Views - Compact
     * @description A compacted list of shared and personal views available to the current user. This endpoint never returns more than 32 records and does not respect the "per_page" option.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["ListCompactViews"];
  };
  "/api/v2/views/count": {
    /**
     * Count Views
     * @description Returns an approximate count of shared and personal views available to the current user. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
     *
     * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
     *
     * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
     * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
     *
     * #### Allowed For
     * * Agents
     */
    get: operations["CountViews"];
  };
  "/api/v2/views/count_many": {
    /**
     * Count Tickets in Views
     * @description Returns the ticket count of each view in a list of views. Accepts up to 20 view ids per request. For the ticket count of a single view, see [Count Tickets in View](#count-tickets-in-view).
     *
     * Only returns values for personal and shared views accessible to the user performing the request.
     *
     * This endpoint is rate limited to 6 requests every 5 minutes.
     *
     * #### Allowed For
     *
     * * Agents
     */
    get: operations["GetViewCounts"];
  };
  "/api/v2/views/destroy_many": {
    /**
     * Bulk Delete Views
     * @description Deletes the views corresponding to the provided list of IDs.
     *
     * #### Allowed For
     * * Agents
     */
    delete: operations["BulkDeleteViews"];
  };
  "/api/v2/views/preview": {
    /**
     * Preview Views
     * @description You can preview views by constructing the conditions in the proper format and nesting them under the `view` property. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference/). The output can also be controlled by passing in any of the following parameters and nesting them under the `output` property.
     *
     * | Name            | Type    | Comment
     * | --------------- | ------- | -------
     * | columns         | Array   | The ticket fields to display. System fields are looked up by name, custom fields by title or id. See the [View columns](#view-columns) table
     * | group_by        | String  | When present, the field by which the tickets are grouped
     * | group_order     | String  | The direction the tickets are grouped. May be one of "asc" or "desc"
     * | sort_order      | String  | The direction the tickets are sorted. May be one of "asc" or "desc"
     * | sort_by         | String  | The ticket field used for sorting. This will either be a title or a custom field id.
     *
     * This endpoint is rate limited to 5 requests per minute, per view, per agent.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["PreviewViews"];
  };
  "/api/v2/views/preview/count": {
    /**
     * Preview Ticket Count
     * @description Returns the ticket count for a single preview.
     *
     * #### Allowed For
     *
     * * Agents
     */
    post: operations["PreviewCount"];
  };
  "/api/v2/views/search": {
    /**
     * Search Views
     * @description #### Pagination
     *
     * * Offset pagination only
     *
     * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
     *
     * #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each view, if present
     * | permissions      | The permissions for each view
     */
    get: operations["SearchViews"];
  };
  "/api/v2/views/show_many": {
    /**
     * List Views By ID
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name             | Will sideload
     * | ---------------- | -------------
     * | app_installation | The app installation that requires each view, if present
     * | permissions      | The permissions for each view
     */
    get: operations["ListViewsById"];
  };
  "/api/v2/views/update_many": {
    /**
     * Update Many Views
     * @description #### Allowed For
     *
     * * Agents
     *
     * #### Request Parameters
     *
     * The PUT request expects a `views` object that lists the views to update.
     *
     * Each view may have the following properties:
     *
     * | Name     | Mandatory | Description
     * | -------- | --------- | -----------
     * | id       | yes       | The ID of the view to update
     * | position | no        | The new position of the view
     * | active   | no        | The active status of the view (true or false)
     *
     * #### Example Request Body
     *
     * ```js
     * {
     *   "views": [
     *     {"id": 25, "position": 3},
     *     {"id": 23, "position": 5},
     *     {"id": 27, "position": 9},
     *     {"id": 22, "position": 7}
     *   ]
     * }
     * ```
     */
    put: operations["UpdateManyViews"];
  };
  "/api/v2/workspaces": {
    /**
     * List Workspaces
     * @description #### Allowed For
     *
     * * Admins, Agents
     */
    get: operations["ListWorkspaces"];
    /**
     * Create Workspace
     * @description #### Allowed For
     *
     * * Admins
     */
    post: operations["CreateWorkspace"];
  };
  "/api/v2/workspaces/{workspace_id}": {
    /**
     * Show Workspace
     * @description #### Allowed For
     * * Admins
     */
    get: operations["ShowWorkspace"];
    /**
     * Update Workspace
     * @description #### Allowed For
     * * Admins
     */
    put: operations["UpdateWorkspace"];
    /**
     * Delete Workspace
     * @description #### Allowed For
     * * Admins
     */
    delete: operations["DeleteWorkspace"];
    parameters: {
      path: {
        workspace_id: components["parameters"]["WorkspaceId"];
      };
    };
  };
  "/api/v2/workspaces/destroy_many": {
    /**
     * Bulk Delete Workspaces
     * @description #### Allowed For
     * * Admins
     */
    delete: operations["DestroyManyWorkspaces"];
  };
  "/api/v2/workspaces/reorder": {
    /**
     * Reorder Workspaces
     * @description #### Allowed For
     * * Admins
     */
    put: operations["ReorderWorkspaces"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description The active features for an account. See [Active Features](#active-features) */
    AccountSettingsActiveFeaturesObject: {
      advanced_analytics?: boolean;
      agent_forwarding?: boolean;
      allow_ccs?: boolean;
      allow_email_template_customization?: boolean;
      automatic_answers?: boolean;
      bcc_archiving?: boolean;
      benchmark_opt_out?: boolean;
      business_hours?: boolean;
      chat?: boolean;
      chat_about_my_ticket?: boolean;
      csat_reason_code?: boolean;
      custom_dkim_domain?: boolean;
      customer_context_as_default?: boolean;
      customer_satisfaction?: boolean;
      dynamic_contents?: boolean;
      explore?: boolean;
      explore_on_support_ent_plan?: boolean;
      explore_on_support_pro_plan?: boolean;
      facebook?: boolean;
      facebook_login?: boolean;
      fallback_composer?: boolean;
      forum_analytics?: boolean;
      good_data_and_explore?: boolean;
      google_login?: boolean;
      insights?: boolean;
      is_abusive?: boolean;
      light_agents?: boolean;
      markdown?: boolean;
      on_hold_status?: boolean;
      organization_access_enabled?: boolean;
      rich_content_in_emails?: boolean;
      sandbox?: boolean;
      satisfaction_prediction?: boolean;
      suspended_ticket_notification?: boolean;
      ticket_forms?: boolean;
      ticket_tagging?: boolean;
      topic_suggestion?: boolean;
      twitter?: boolean;
      twitter_login?: boolean;
      user_org_fields?: boolean;
      user_tagging?: boolean;
      voice?: boolean;
    };
    /** @description Configuration for the agent workspace. See [Agents](#agents) */
    AccountSettingsAgentObject: {
      agent_home?: boolean;
      agent_workspace?: boolean;
      aw_self_serve_migration_enabled?: boolean;
      focus_mode?: boolean;
      idle_timeout_enabled?: boolean;
      unified_agent_statuses?: boolean;
    };
    /** @description API configuration options. See [API](#api) */
    AccountSettingsApiObject: {
      accepted_api_agreement?: boolean;
      api_password_access?: string;
      api_token_access?: string;
    };
    /** @description Apps configuration options. See [Apps](#apps) */
    AccountSettingsAppsObject: {
      create_private?: boolean;
      create_public?: boolean;
      use?: boolean;
    };
    /** @description Billing configuration options. See [Billing](#billing) */
    AccountSettingsBillingObject: {
      backend?: string;
    };
    /** @description Branding settings. See [Branding](#branding) */
    AccountSettingsBrandingObject: {
      favicon_url?: string | null;
      header_color?: string;
      header_logo_url?: string | null;
      page_background_color?: string;
      tab_background_color?: string;
      text_color?: string;
    };
    /** @description Brand settings. See [Brands](#brands) */
    AccountSettingsBrandsObject: {
      default_brand_id?: number;
      require_brand_on_new_tickets?: boolean;
    };
    /** @description CDN settings */
    AccountSettingsCdnObject: {
      cdn_provider?: string;
      fallback_cdn_provider?: string;
      hosts?: {
          name?: string;
          url?: string;
        }[];
    };
    /** @description Zendesk Chat settings. See [Chat](#chat) */
    AccountSettingsChatObject: {
      available?: boolean;
      enabled?: boolean;
      integrated?: boolean;
      maximum_request_count?: number;
      welcome_message?: string;
    };
    /** @description Cross Sell settings */
    AccountSettingsCrossSellObject: {
      show_chat_tooltip?: boolean;
      xsell_source?: string | null;
    };
    /** @description GoodData settings, used for insights. Legacy configuration prior to Zendesk Explore. See [GoodData Advanced Analytics](#gooddata-advanced-analytics) */
    AccountSettingsGooddataAdvancedAnalyticsObject: {
      enabled?: boolean;
    };
    /** @description Google Apps configuration. See [G Suite](#g-suite) */
    AccountSettingsGoogleAppsObject: {
      has_google_apps?: boolean;
      has_google_apps_admin?: boolean;
    };
    /** @description Group configuration */
    AccountSettingsGroupObject: {
      check_group_name_uniqueness?: boolean;
    };
    /** @description Account limits configuration. See [Limits](#limits) */
    AccountSettingsLimitsObject: {
      attachment_size?: number;
    };
    /** @description Internationalization configuration settings. See [Localization](#localization) */
    AccountSettingsLocalizationObject: {
      locale_ids?: number[];
    };
    /** @description Support UI settings. See [Lotus](#lotus) */
    AccountSettingsLotusObject: {
      pod_id?: number;
      prefer_lotus?: boolean;
      reporting?: boolean;
    };
    /** @description Account metrics settings. See [Metrics](#metrics) */
    AccountSettingsMetricsObject: {
      account_size?: string;
    };
    /**
     * @example {
     *   "active_features": {
     *     "advanced_analytics": false,
     *     "agent_forwarding": false,
     *     "allow_ccs": true,
     *     "allow_email_template_customization": true,
     *     "automatic_answers": false,
     *     "bcc_archiving": false,
     *     "benchmark_opt_out": false,
     *     "business_hours": false,
     *     "chat": false,
     *     "chat_about_my_ticket": false,
     *     "csat_reason_code": false,
     *     "custom_dkim_domain": true,
     *     "customer_context_as_default": false,
     *     "customer_satisfaction": false,
     *     "dynamic_contents": false,
     *     "explore": true,
     *     "explore_on_support_ent_plan": false,
     *     "explore_on_support_pro_plan": false,
     *     "facebook": false,
     *     "facebook_login": false,
     *     "fallback_composer": false,
     *     "forum_analytics": true,
     *     "good_data_and_explore": false,
     *     "google_login": false,
     *     "insights": false,
     *     "is_abusive": false,
     *     "light_agents": false,
     *     "markdown": false,
     *     "on_hold_status": false,
     *     "organization_access_enabled": true,
     *     "rich_content_in_emails": true,
     *     "sandbox": false,
     *     "satisfaction_prediction": false,
     *     "suspended_ticket_notification": false,
     *     "ticket_forms": true,
     *     "ticket_tagging": true,
     *     "topic_suggestion": false,
     *     "twitter": true,
     *     "twitter_login": false,
     *     "user_org_fields": true,
     *     "user_tagging": true,
     *     "voice": true
     *   },
     *   "agents": {
     *     "agent_home": false,
     *     "agent_workspace": false,
     *     "aw_self_serve_migration_enabled": true,
     *     "focus_mode": false,
     *     "idle_timeout_enabled": false,
     *     "unified_agent_statuses": false
     *   },
     *   "api": {
     *     "accepted_api_agreement": true,
     *     "api_password_access": "true",
     *     "api_token_access": "true"
     *   },
     *   "apps": {
     *     "create_private": true,
     *     "create_public": false,
     *     "use": true
     *   },
     *   "billing": {
     *     "backend": "zuora"
     *   },
     *   "branding": {
     *     "favicon_url": null,
     *     "header_color": "78A300",
     *     "header_logo_url": null,
     *     "page_background_color": "333333",
     *     "tab_background_color": "7FA239",
     *     "text_color": "FFFFFF"
     *   },
     *   "brands": {
     *     "default_brand_id": 1873,
     *     "require_brand_on_new_tickets": false
     *   },
     *   "cdn": {
     *     "cdn_provider": "default",
     *     "fallback_cdn_provider": "cloudfront",
     *     "hosts": [
     *       {
     *         "name": "default",
     *         "url": "https://p18.zdassets.com"
     *       },
     *       {
     *         "name": "cloudfront",
     *         "url": "https://d2y9oszrd3dhjh.cloudfront.net"
     *       }
     *     ]
     *   },
     *   "chat": {
     *     "available": true,
     *     "enabled": false,
     *     "integrated": true,
     *     "maximum_request_count": 1,
     *     "welcome_message": "Hi there. How can I help today?"
     *   },
     *   "cross_sell": {
     *     "show_chat_tooltip": true,
     *     "xsell_source": null
     *   },
     *   "gooddata_advanced_analytics": {
     *     "enabled": true
     *   },
     *   "google_apps": {
     *     "has_google_apps": false,
     *     "has_google_apps_admin": false
     *   },
     *   "groups": {
     *     "check_group_name_uniqueness": true
     *   },
     *   "limits": {
     *     "attachment_size": 52428800
     *   },
     *   "localization": {
     *     "locale_ids": [
     *       1042
     *     ]
     *   },
     *   "lotus": {
     *     "pod_id": 999,
     *     "prefer_lotus": true,
     *     "reporting": true
     *   },
     *   "metrics": {
     *     "account_size": "100-399"
     *   },
     *   "onboarding": {
     *     "checklist_onboarding_version": 2,
     *     "onboarding_segments": null,
     *     "product_sign_up": null
     *   },
     *   "routing": {
     *     "autorouting_tag": "",
     *     "enabled": false,
     *     "max_email_capacity": 0,
     *     "max_messaging_capacity": 0,
     *     "reassignment_messaging_enabled": true,
     *     "reassignment_messaging_timeout": 30,
     *     "reassignment_talk_timeout": 30
     *   },
     *   "rule": {
     *     "macro_most_used": true,
     *     "macro_order": "alphabetical",
     *     "skill_based_filtered_views": [],
     *     "using_skill_based_routing": false
     *   },
     *   "side_conversations": {
     *     "email_channel": false,
     *     "msteams_channel": false,
     *     "show_in_context_panel": false,
     *     "slack_channel": false,
     *     "tickets_channel": false
     *   },
     *   "statistics": {
     *     "forum": true,
     *     "rule_usage": true,
     *     "search": true
     *   },
     *   "ticket_form": {
     *     "raw_ticket_forms_instructions": "Please choose your issue below",
     *     "ticket_forms_instructions": "Please choose your issue below"
     *   },
     *   "ticket_sharing_partners": {
     *     "support_addresses": [
     *       "support@grokpetre.zendesk.com"
     *     ]
     *   },
     *   "tickets": {
     *     "accepted_new_collaboration_tos": false,
     *     "agent_collision": true,
     *     "agent_invitation_enabled": true,
     *     "agent_ticket_deletion": false,
     *     "allow_group_reset": true,
     *     "assign_default_organization": true,
     *     "assign_tickets_upon_solve": true,
     *     "auto_translation_enabled": false,
     *     "auto_updated_ccs_followers_rules": false,
     *     "chat_sla_enablement": false,
     *     "collaboration": true,
     *     "comments_public_by_default": true,
     *     "email_attachments": false,
     *     "emoji_autocompletion": true,
     *     "follower_and_email_cc_collaborations": false,
     *     "has_color_text": true,
     *     "is_first_comment_private_enabled": true,
     *     "light_agent_email_ccs_allowed": false,
     *     "list_empty_views": true,
     *     "list_newest_comments_first": true,
     *     "markdown_ticket_comments": false,
     *     "maximum_personal_views_to_list": 8,
     *     "private_attachments": false,
     *     "rich_text_comments": true,
     *     "status_hold": false,
     *     "tagging": true,
     *     "using_skill_based_routing": false
     *   },
     *   "twitter": {
     *     "shorten_url": "optional"
     *   },
     *   "user": {
     *     "agent_created_welcome_emails": true,
     *     "end_user_phone_number_validation": false,
     *     "have_gravatars_enabled": true,
     *     "language_selection": true,
     *     "multiple_organizations": false,
     *     "tagging": true,
     *     "time_zone_selection": true
     *   },
     *   "voice": {
     *     "agent_confirmation_when_forwarding": true,
     *     "agent_wrap_up_after_calls": true,
     *     "enabled": true,
     *     "logging": true,
     *     "maximum_queue_size": 5,
     *     "maximum_queue_wait_time": 1,
     *     "only_during_business_hours": false,
     *     "outbound_enabled": true,
     *     "recordings_public": true,
     *     "uk_mobile_forwarding": true
     *   }
     * }
     */
    AccountSettingsObject: {
      active_features?: components["schemas"]["AccountSettingsActiveFeaturesObject"];
      agents?: components["schemas"]["AccountSettingsAgentObject"];
      api?: components["schemas"]["AccountSettingsApiObject"];
      apps?: components["schemas"]["AccountSettingsAppsObject"];
      billing?: components["schemas"]["AccountSettingsBillingObject"];
      branding?: components["schemas"]["AccountSettingsBrandingObject"];
      brands?: components["schemas"]["AccountSettingsBrandsObject"];
      cdn?: components["schemas"]["AccountSettingsCdnObject"];
      chat?: components["schemas"]["AccountSettingsChatObject"];
      cross_sell?: components["schemas"]["AccountSettingsCrossSellObject"];
      gooddata_advanced_analytics?: components["schemas"]["AccountSettingsGooddataAdvancedAnalyticsObject"];
      google_apps?: components["schemas"]["AccountSettingsGoogleAppsObject"];
      groups?: components["schemas"]["AccountSettingsGroupObject"];
      limits?: components["schemas"]["AccountSettingsLimitsObject"];
      localization?: components["schemas"]["AccountSettingsLocalizationObject"];
      lotus?: components["schemas"]["AccountSettingsLotusObject"];
      metrics?: components["schemas"]["AccountSettingsMetricsObject"];
      onboarding?: components["schemas"]["AccountSettingsOnboardingObject"];
      routing?: components["schemas"]["AccountSettingsRoutingObject"];
      rule?: components["schemas"]["AccountSettingsRuleObject"];
      side_conversations?: components["schemas"]["AccountSettingsSideConversationsObject"];
      statistics?: components["schemas"]["AccountSettingsStatisticsObject"];
      ticket_form?: components["schemas"]["AccountSettingsTicketFormObject"];
      ticket_sharing_partners?: components["schemas"]["AccountSettingsTicketSharingPartnersObject"];
      tickets?: components["schemas"]["AccountSettingsTicketObject"];
      twitter?: components["schemas"]["AccountSettingsTwitterObject"];
      user?: components["schemas"]["AccountSettingsUserObject"];
      voice?: components["schemas"]["AccountSettingsVoiceObject"];
    };
    /** @description Onboarding settings */
    AccountSettingsOnboardingObject: {
      checklist_onboarding_version?: number;
      onboarding_segments?: string | null;
      product_sign_up?: string | null;
    };
    /**
     * @example {
     *   "settings": {
     *     "active_features": {
     *       "advanced_analytics": false,
     *       "agent_forwarding": false,
     *       "allow_ccs": true,
     *       "allow_email_template_customization": true,
     *       "automatic_answers": false,
     *       "bcc_archiving": false,
     *       "benchmark_opt_out": false,
     *       "business_hours": false,
     *       "chat": false,
     *       "chat_about_my_ticket": false,
     *       "csat_reason_code": false,
     *       "custom_dkim_domain": true,
     *       "customer_context_as_default": false,
     *       "customer_satisfaction": false,
     *       "dynamic_contents": false,
     *       "explore": true,
     *       "explore_on_support_ent_plan": false,
     *       "explore_on_support_pro_plan": false,
     *       "facebook": false,
     *       "facebook_login": false,
     *       "fallback_composer": false,
     *       "forum_analytics": true,
     *       "good_data_and_explore": false,
     *       "google_login": false,
     *       "insights": false,
     *       "is_abusive": false,
     *       "light_agents": false,
     *       "markdown": false,
     *       "on_hold_status": false,
     *       "organization_access_enabled": true,
     *       "rich_content_in_emails": true,
     *       "sandbox": false,
     *       "satisfaction_prediction": false,
     *       "suspended_ticket_notification": false,
     *       "ticket_forms": true,
     *       "ticket_tagging": true,
     *       "topic_suggestion": false,
     *       "twitter": true,
     *       "twitter_login": false,
     *       "user_org_fields": true,
     *       "user_tagging": true,
     *       "voice": true
     *     },
     *     "agents": {
     *       "agent_home": false,
     *       "agent_workspace": false,
     *       "aw_self_serve_migration_enabled": true,
     *       "focus_mode": false,
     *       "idle_timeout_enabled": false,
     *       "unified_agent_statuses": false
     *     },
     *     "api": {
     *       "accepted_api_agreement": true,
     *       "api_password_access": "true",
     *       "api_token_access": "true"
     *     },
     *     "apps": {
     *       "create_private": true,
     *       "create_public": false,
     *       "use": true
     *     },
     *     "billing": {
     *       "backend": "zuora"
     *     },
     *     "branding": {
     *       "favicon_url": null,
     *       "header_color": "78A300",
     *       "header_logo_url": null,
     *       "page_background_color": "333333",
     *       "tab_background_color": "7FA239",
     *       "text_color": "FFFFFF"
     *     },
     *     "brands": {
     *       "default_brand_id": 1873,
     *       "require_brand_on_new_tickets": false
     *     },
     *     "cdn": {
     *       "cdn_provider": "default",
     *       "fallback_cdn_provider": "cloudfront",
     *       "hosts": [
     *         {
     *           "name": "default",
     *           "url": "https://p18.zdassets.com"
     *         },
     *         {
     *           "name": "cloudfront",
     *           "url": "https://d2y9oszrd3dhjh.cloudfront.net"
     *         }
     *       ]
     *     },
     *     "chat": {
     *       "available": true,
     *       "enabled": false,
     *       "integrated": true,
     *       "maximum_request_count": 1,
     *       "welcome_message": "Hi there. How can I help today?"
     *     },
     *     "cross_sell": {
     *       "show_chat_tooltip": true,
     *       "xsell_source": null
     *     },
     *     "gooddata_advanced_analytics": {
     *       "enabled": true
     *     },
     *     "google_apps": {
     *       "has_google_apps": false,
     *       "has_google_apps_admin": false
     *     },
     *     "groups": {
     *       "check_group_name_uniqueness": true
     *     },
     *     "limits": {
     *       "attachment_size": 52428800
     *     },
     *     "localization": {
     *       "locale_ids": [
     *         1042
     *       ]
     *     },
     *     "lotus": {
     *       "pod_id": 999,
     *       "prefer_lotus": true,
     *       "reporting": true
     *     },
     *     "metrics": {
     *       "account_size": "100-399"
     *     },
     *     "onboarding": {
     *       "checklist_onboarding_version": 2,
     *       "onboarding_segments": null,
     *       "product_sign_up": null
     *     },
     *     "routing": {
     *       "autorouting_tag": "",
     *       "enabled": false,
     *       "max_email_capacity": 0,
     *       "max_messaging_capacity": 0
     *     },
     *     "rule": {
     *       "macro_most_used": true,
     *       "macro_order": "alphabetical",
     *       "skill_based_filtered_views": [],
     *       "using_skill_based_routing": false
     *     },
     *     "side_conversations": {
     *       "email_channel": false,
     *       "msteams_channel": false,
     *       "show_in_context_panel": false,
     *       "slack_channel": false,
     *       "tickets_channel": false
     *     },
     *     "statistics": {
     *       "forum": true,
     *       "rule_usage": true,
     *       "search": true
     *     },
     *     "ticket_form": {
     *       "raw_ticket_forms_instructions": "Please choose your issue below",
     *       "ticket_forms_instructions": "Please choose your issue below"
     *     },
     *     "ticket_sharing_partners": {
     *       "support_addresses": [
     *         "support@grokpetre.zendesk.com"
     *       ]
     *     },
     *     "tickets": {
     *       "accepted_new_collaboration_tos": false,
     *       "agent_collision": true,
     *       "agent_invitation_enabled": true,
     *       "agent_ticket_deletion": false,
     *       "allow_group_reset": true,
     *       "assign_default_organization": true,
     *       "assign_tickets_upon_solve": true,
     *       "auto_translation_enabled": false,
     *       "auto_updated_ccs_followers_rules": false,
     *       "chat_sla_enablement": false,
     *       "collaboration": true,
     *       "comments_public_by_default": true,
     *       "email_attachments": false,
     *       "emoji_autocompletion": true,
     *       "follower_and_email_cc_collaborations": false,
     *       "has_color_text": true,
     *       "is_first_comment_private_enabled": true,
     *       "light_agent_email_ccs_allowed": false,
     *       "list_empty_views": true,
     *       "list_newest_comments_first": true,
     *       "markdown_ticket_comments": false,
     *       "maximum_personal_views_to_list": 8,
     *       "private_attachments": false,
     *       "rich_text_comments": true,
     *       "status_hold": false,
     *       "tagging": true,
     *       "using_skill_based_routing": false
     *     },
     *     "twitter": {
     *       "shorten_url": "optional"
     *     },
     *     "user": {
     *       "agent_created_welcome_emails": true,
     *       "end_user_phone_number_validation": false,
     *       "have_gravatars_enabled": true,
     *       "language_selection": true,
     *       "multiple_organizations": false,
     *       "tagging": true,
     *       "time_zone_selection": true
     *     },
     *     "voice": {
     *       "agent_confirmation_when_forwarding": true,
     *       "agent_wrap_up_after_calls": true,
     *       "enabled": true,
     *       "logging": true,
     *       "maximum_queue_size": 5,
     *       "maximum_queue_wait_time": 1,
     *       "only_during_business_hours": false,
     *       "outbound_enabled": true,
     *       "recordings_public": true,
     *       "uk_mobile_forwarding": true
     *     }
     *   }
     * }
     */
    AccountSettingsResponse: {
      settings?: components["schemas"]["AccountSettingsObject"];
    };
    /** @description Configuration for routing. See [Routing](#routing) */
    AccountSettingsRoutingObject: {
      autorouting_tag?: string;
      enabled?: boolean;
      max_email_capacity?: number;
      max_messaging_capacity?: number;
      reassignment_messaging_enabled?: boolean;
      reassignment_messaging_timeout?: number;
      reassignment_talk_timeout?: number;
    };
    /** @description Rules settings for triggers, macros, views, and automations. See [Rules](#rules) */
    AccountSettingsRuleObject: {
      macro_most_used?: boolean;
      macro_order?: string;
      skill_based_filtered_views?: {
          [key: string]: unknown;
        }[];
      using_skill_based_routing?: boolean;
    };
    /** @description Side conversations settings */
    AccountSettingsSideConversationsObject: {
      email_channel?: boolean;
      msteams_channel?: boolean;
      show_in_context_panel?: boolean;
      slack_channel?: boolean;
      tickets_channel?: boolean;
    };
    /** @description Account statistics settings. See [Statistics](#statistics) */
    AccountSettingsStatisticsObject: {
      forum?: boolean;
      rule_usage?: boolean;
      search?: boolean;
    };
    /** @description Ticket form settings. See [Ticket Form](#ticket-form) */
    AccountSettingsTicketFormObject: {
      raw_ticket_forms_instructions?: string;
      ticket_forms_instructions?: string;
    };
    /** @description Ticket settings. See [Tickets](#tickets) */
    AccountSettingsTicketObject: {
      accepted_new_collaboration_tos?: boolean;
      agent_collision?: boolean;
      agent_invitation_enabled?: boolean;
      agent_ticket_deletion?: boolean;
      allow_group_reset?: boolean;
      assign_default_organization?: boolean;
      assign_tickets_upon_solve?: boolean;
      auto_translation_enabled?: boolean;
      auto_updated_ccs_followers_rules?: boolean;
      chat_sla_enablement?: boolean;
      collaboration?: boolean;
      comments_public_by_default?: boolean;
      email_attachments?: boolean;
      emoji_autocompletion?: boolean;
      follower_and_email_cc_collaborations?: boolean;
      has_color_text?: boolean;
      is_first_comment_private_enabled?: boolean;
      light_agent_email_ccs_allowed?: boolean;
      list_empty_views?: boolean;
      list_newest_comments_first?: boolean;
      markdown_ticket_comments?: boolean;
      maximum_personal_views_to_list?: number;
      private_attachments?: boolean;
      rich_text_comments?: boolean;
      status_hold?: boolean;
      tagging?: boolean;
      using_skill_based_routing?: boolean;
    };
    /** @description Ticket sharing partners settings. See [Ticket Sharing Partners](#ticket-sharing-partners) */
    AccountSettingsTicketSharingPartnersObject: {
      support_addresses?: string[];
    };
    /** @description X (formerly Twitter) settings. See [X](#x-formerly-twitter) */
    AccountSettingsTwitterObject: {
      shorten_url?: string;
    };
    /** @description User settings. See [Users](#users) */
    AccountSettingsUserObject: {
      agent_created_welcome_emails?: boolean;
      end_user_phone_number_validation?: boolean;
      have_gravatars_enabled?: boolean;
      language_selection?: boolean;
      multiple_organizations?: boolean;
      tagging?: boolean;
      time_zone_selection?: boolean;
    };
    /** @description Zendesk Talk settings. See [Voice](#voice) */
    AccountSettingsVoiceObject: {
      agent_confirmation_when_forwarding?: boolean;
      agent_wrap_up_after_calls?: boolean;
      enabled?: boolean;
      logging?: boolean;
      maximum_queue_size?: number;
      maximum_queue_wait_time?: number;
      only_during_business_hours?: boolean;
      outbound_enabled?: boolean;
      recordings_public?: boolean;
      uk_mobile_forwarding?: boolean;
    };
    ActionObject: {
      /** @description The name of a ticket field to modify */
      field?: string;
      /** @description The new value of the field */
      value?: string;
    };
    ActionsObject: {
      actions?: components["schemas"]["ActionObject"][];
    };
    ActivitiesCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    /**
     * @example {
     *   "activities": [
     *     {
     *       "actor": {
     *         "active": true,
     *         "alias": "",
     *         "created_at": "2020-11-17T00:32:12Z",
     *         "custom_role_id": null,
     *         "default_group_id": 1873,
     *         "details": "",
     *         "email": "cgoddard+ted@zendesk.com",
     *         "external_id": null,
     *         "iana_time_zone": "America/Juneau",
     *         "id": 158488612,
     *         "last_login_at": "2020-11-17T00:33:44Z",
     *         "locale": "en-gb",
     *         "locale_id": 5,
     *         "moderator": true,
     *         "name": "Tedd",
     *         "notes": "",
     *         "only_private_comments": false,
     *         "organization_id": null,
     *         "phone": null,
     *         "photo": null,
     *         "report_csv": true,
     *         "restricted_agent": false,
     *         "role": "admin",
     *         "role_type": null,
     *         "shared": false,
     *         "shared_agent": false,
     *         "shared_phone_number": null,
     *         "signature": "",
     *         "suspended": false,
     *         "tags": [],
     *         "ticket_restriction": null,
     *         "time_zone": "Alaska",
     *         "two_factor_auth_enabled": null,
     *         "updated_at": "2020-11-17T00:34:38Z",
     *         "url": "https://example.zendesk.com/api/v2/users/158488612.json",
     *         "user_fields": {
     *           "its_remember_september": null,
     *           "skittles": null,
     *           "user_field_1": null
     *         },
     *         "verified": true
     *       },
     *       "actor_id": 158488612,
     *       "created_at": "2020-11-17T00:34:40Z",
     *       "id": 29183462,
     *       "object": {
     *         "ticket": {
     *           "id": 1521,
     *           "subject": "test"
     *         }
     *       },
     *       "target": {
     *         "ticket": {
     *           "id": 1521,
     *           "subject": "test"
     *         }
     *       },
     *       "title": "Tedd assigned ticket #1521 to you.",
     *       "updated_at": "2020-11-17T00:34:40Z",
     *       "url": "https://example.zendesk.com/api/v2/activities/29183462.json",
     *       "user": {
     *         "active": true,
     *         "alias": "test",
     *         "created_at": "2017-08-14T20:13:53Z",
     *         "custom_role_id": null,
     *         "default_group_id": 1873,
     *         "details": "",
     *         "email": "user@zendesk.com",
     *         "external_id": "oev7jj",
     *         "iana_time_zone": "Pacific/Pago_Pago",
     *         "id": 3343,
     *         "last_login_at": "2020-11-16T22:57:45Z",
     *         "locale": "en-gb",
     *         "locale_id": 5,
     *         "moderator": true,
     *         "name": "Samwise Gamgee",
     *         "notes": "test",
     *         "only_private_comments": false,
     *         "organization_id": 1873,
     *         "phone": null,
     *         "photo": {
     *           "content_type": "image/gif",
     *           "content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *           "deleted": false,
     *           "file_name": "1f84950b8d7949b3.gif",
     *           "height": 80,
     *           "id": 8730791,
     *           "inline": false,
     *           "mapped_content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *           "size": 4566,
     *           "thumbnails": [
     *             {
     *               "content_type": "image/gif",
     *               "content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *               "deleted": false,
     *               "file_name": "1f84950b8d7949b3_thumb.gif",
     *               "height": 32,
     *               "id": 8730801,
     *               "inline": false,
     *               "mapped_content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *               "size": 1517,
     *               "url": "https://example.zendesk.com/api/v2/attachments/8730801.json",
     *               "width": 32
     *             }
     *           ],
     *           "url": "https://example.zendesk.com/api/v2/attachments/8730791.json",
     *           "width": 80
     *         },
     *         "report_csv": true,
     *         "restricted_agent": false,
     *         "role": "admin",
     *         "role_type": null,
     *         "shared": false,
     *         "shared_agent": false,
     *         "shared_phone_number": null,
     *         "signature": "test",
     *         "suspended": false,
     *         "tags": [
     *           "101"
     *         ],
     *         "ticket_restriction": null,
     *         "time_zone": "American Samoa",
     *         "two_factor_auth_enabled": null,
     *         "updated_at": "2020-11-17T00:33:55Z",
     *         "url": "https://example.zendesk.com/api/v2/users/3343.json",
     *         "user_fields": {
     *           "its_remember_september": null,
     *           "skittles": "2018-09-14T00:00:00+00:00",
     *           "user_field_1": "101"
     *         },
     *         "verified": true
     *       },
     *       "user_id": 3343,
     *       "verb": "tickets.assignment"
     *     }
     *   ],
     *   "actors": [
     *     {
     *       "active": true,
     *       "alias": "",
     *       "created_at": "2020-11-17T00:32:12Z",
     *       "custom_role_id": null,
     *       "default_group_id": 1873,
     *       "details": "",
     *       "email": "cgoddard+ted@zendesk.com",
     *       "external_id": null,
     *       "iana_time_zone": "America/Juneau",
     *       "id": 158488612,
     *       "last_login_at": "2020-11-17T00:33:44Z",
     *       "locale": "en-gb",
     *       "locale_id": 5,
     *       "moderator": true,
     *       "name": "Tedd",
     *       "notes": "",
     *       "only_private_comments": false,
     *       "organization_id": null,
     *       "phone": null,
     *       "photo": null,
     *       "report_csv": true,
     *       "restricted_agent": false,
     *       "role": "admin",
     *       "role_type": null,
     *       "shared": false,
     *       "shared_agent": false,
     *       "shared_phone_number": null,
     *       "signature": "",
     *       "suspended": false,
     *       "tags": [],
     *       "ticket_restriction": null,
     *       "time_zone": "Alaska",
     *       "two_factor_auth_enabled": null,
     *       "updated_at": "2020-11-17T00:34:38Z",
     *       "url": "https://example.zendesk.com/api/v2/users/158488612.json",
     *       "user_fields": {
     *         "its_remember_september": null,
     *         "skittles": null,
     *         "user_field_1": null
     *       },
     *       "verified": true
     *     }
     *   ],
     *   "count": 1,
     *   "next_page": null,
     *   "previous_page": null,
     *   "users": [
     *     {
     *       "active": true,
     *       "alias": "test",
     *       "created_at": "2017-08-14T20:13:53Z",
     *       "custom_role_id": null,
     *       "default_group_id": 1873,
     *       "details": "",
     *       "email": "user@zendesk.com",
     *       "external_id": "oev7jj",
     *       "iana_time_zone": "Pacific/Pago_Pago",
     *       "id": 3343,
     *       "last_login_at": "2020-11-16T22:57:45Z",
     *       "locale": "en-gb",
     *       "locale_id": 5,
     *       "moderator": true,
     *       "name": "Samwise Gamgee",
     *       "notes": "test",
     *       "only_private_comments": false,
     *       "organization_id": 1873,
     *       "phone": null,
     *       "photo": {
     *         "content_type": "image/gif",
     *         "content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *         "deleted": false,
     *         "file_name": "1f84950b8d7949b3.gif",
     *         "height": 80,
     *         "id": 8730791,
     *         "inline": false,
     *         "mapped_content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *         "size": 4566,
     *         "thumbnails": [
     *           {
     *             "content_type": "image/gif",
     *             "content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *             "deleted": false,
     *             "file_name": "1f84950b8d7949b3_thumb.gif",
     *             "height": 32,
     *             "id": 8730801,
     *             "inline": false,
     *             "mapped_content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *             "size": 1517,
     *             "url": "https://example.zendesk.com/api/v2/attachments/8730801.json",
     *             "width": 32
     *           }
     *         ],
     *         "url": "https://example.zendesk.com/api/v2/attachments/8730791.json",
     *         "width": 80
     *       },
     *       "report_csv": true,
     *       "restricted_agent": false,
     *       "role": "admin",
     *       "role_type": null,
     *       "shared": false,
     *       "shared_agent": false,
     *       "shared_phone_number": null,
     *       "signature": "test",
     *       "suspended": false,
     *       "tags": [
     *         "101"
     *       ],
     *       "ticket_restriction": null,
     *       "time_zone": "American Samoa",
     *       "two_factor_auth_enabled": null,
     *       "updated_at": "2020-11-17T00:33:55Z",
     *       "url": "https://example.zendesk.com/api/v2/users/3343.json",
     *       "user_fields": {
     *         "its_remember_september": null,
     *         "skittles": "2018-09-14T00:00:00+00:00",
     *         "user_field_1": "101"
     *       },
     *       "verified": true
     *     }
     *   ]
     * }
     */
    ActivitiesResponse: {
      activities?: readonly components["schemas"]["ActivityObject"][];
      actors?: readonly {
          [key: string]: unknown;
        }[];
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
      users?: readonly {
          [key: string]: unknown;
        }[];
    };
    /**
     * Ticket Activities
     * @example {
     *   "actor": {
     *     "id": 8678530,
     *     "name": "James A. Rosen"
     *   },
     *   "actor_id": 23546,
     *   "created_at": "2019-03-05T10:38:52Z",
     *   "id": 35,
     *   "object": {},
     *   "target": {},
     *   "title": "John Hopeful assigned ticket #123 to you",
     *   "updated_at": "2019-03-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/activities/35.json",
     *   "user": {
     *     "id": 223443,
     *     "name": "Johnny Agent"
     *   },
     *   "user_id": 29451,
     *   "verb": "tickets.assignment"
     * }
     */
    ActivityObject: {
      /** @description The full user record of the user responsible for the ticket activity. See [Users](/api-reference/ticketing/users/users/) */
      actor?: components["schemas"]["UserObject"];
      /** @description The id of the user responsible for the ticket activity. An `actor_id` of "-1" is a Zendesk system user, such as an automations action. */
      actor_id?: number;
      /** @description When the record was created */
      created_at?: string;
      /** @description Automatically assigned on creation */
      id?: number;
      /** @description The content of the activity. Can be a ticket, comment, or change. */
      object?: {
        [key: string]: unknown;
      };
      /** @description The target of the activity, a ticket. */
      target?: {
        [key: string]: unknown;
      };
      /** @description Description of the activity */
      title?: string;
      /** @description When the record was last updated */
      updated_at?: string;
      /** @description The API url of the activity */
      url?: string;
      /** @description The full user record of the agent making the request. See [Users](/api-reference/ticketing/users/users/) */
      user?: components["schemas"]["UserObject"];
      /** @description The id of the agent making the request */
      user_id?: number;
      /** @description The type of activity. Can be "tickets.assignment", "tickets.comment", or "tickets.priority_increase" */
      verb?: string;
    };
    /**
     * @example {
     *   "activity": {
     *     "actor": {
     *       "active": true,
     *       "alias": "",
     *       "created_at": "2020-11-17T00:32:12Z",
     *       "custom_role_id": null,
     *       "default_group_id": 1873,
     *       "details": "",
     *       "email": "cgoddard+ted@zendesk.com",
     *       "external_id": null,
     *       "iana_time_zone": "America/Juneau",
     *       "id": 158488612,
     *       "last_login_at": "2020-11-17T00:33:44Z",
     *       "locale": "en-gb",
     *       "locale_id": 5,
     *       "moderator": true,
     *       "name": "Tedd",
     *       "notes": "",
     *       "only_private_comments": false,
     *       "organization_id": null,
     *       "phone": null,
     *       "photo": null,
     *       "report_csv": true,
     *       "restricted_agent": false,
     *       "role": "admin",
     *       "role_type": null,
     *       "shared": false,
     *       "shared_agent": false,
     *       "shared_phone_number": null,
     *       "signature": "",
     *       "suspended": false,
     *       "tags": [],
     *       "ticket_restriction": null,
     *       "time_zone": "Alaska",
     *       "two_factor_auth_enabled": null,
     *       "updated_at": "2020-11-17T00:34:38Z",
     *       "url": "https://example.zendesk.com/api/v2/users/158488612.json",
     *       "user_fields": {
     *         "its_remember_september": null,
     *         "skittles": null,
     *         "user_field_1": null
     *       },
     *       "verified": true
     *     },
     *     "actor_id": 158488612,
     *     "created_at": "2020-11-17T00:34:40Z",
     *     "id": 29183462,
     *     "object": {
     *       "ticket": {
     *         "id": 1521,
     *         "subject": "test"
     *       }
     *     },
     *     "target": {
     *       "ticket": {
     *         "id": 1521,
     *         "subject": "test"
     *       }
     *     },
     *     "title": "Tedd assigned ticket #1521 to you.",
     *     "updated_at": "2020-11-17T00:34:40Z",
     *     "url": "https://example.zendesk.com/api/v2/activities/29183462.json",
     *     "user": {
     *       "active": true,
     *       "alias": "test",
     *       "created_at": "2017-08-14T20:13:53Z",
     *       "custom_role_id": null,
     *       "default_group_id": 1873,
     *       "details": "",
     *       "email": "user@zendesk.com",
     *       "external_id": "oev7jj",
     *       "iana_time_zone": "Pacific/Pago_Pago",
     *       "id": 3343,
     *       "last_login_at": "2020-11-16T22:57:45Z",
     *       "locale": "en-gb",
     *       "locale_id": 5,
     *       "moderator": true,
     *       "name": "Samwise Gamgee",
     *       "notes": "test",
     *       "only_private_comments": false,
     *       "organization_id": 1873,
     *       "phone": null,
     *       "photo": {
     *         "content_type": "image/gif",
     *         "content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *         "deleted": false,
     *         "file_name": "1f84950b8d7949b3.gif",
     *         "height": 80,
     *         "id": 8730791,
     *         "inline": false,
     *         "mapped_content_url": "https://example.zendesk.com/system/photos/8730791/1f84950b8d7949b3.gif",
     *         "size": 4566,
     *         "thumbnails": [
     *           {
     *             "content_type": "image/gif",
     *             "content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *             "deleted": false,
     *             "file_name": "1f84950b8d7949b3_thumb.gif",
     *             "height": 32,
     *             "id": 8730801,
     *             "inline": false,
     *             "mapped_content_url": "https://example.zendesk.com/system/photos/8730801/1f84950b8d7949b3_thumb.gif",
     *             "size": 1517,
     *             "url": "https://example.zendesk.com/api/v2/attachments/8730801.json",
     *             "width": 32
     *           }
     *         ],
     *         "url": "https://example.zendesk.com/api/v2/attachments/8730791.json",
     *         "width": 80
     *       },
     *       "report_csv": true,
     *       "restricted_agent": false,
     *       "role": "admin",
     *       "role_type": null,
     *       "shared": false,
     *       "shared_agent": false,
     *       "shared_phone_number": null,
     *       "signature": "test",
     *       "suspended": false,
     *       "tags": [
     *         "101"
     *       ],
     *       "ticket_restriction": null,
     *       "time_zone": "American Samoa",
     *       "two_factor_auth_enabled": null,
     *       "updated_at": "2020-11-17T00:33:55Z",
     *       "url": "https://example.zendesk.com/api/v2/users/3343.json",
     *       "user_fields": {
     *         "its_remember_september": null,
     *         "skittles": "2018-09-14T00:00:00+00:00",
     *         "user_field_1": "101"
     *       },
     *       "verified": true
     *     },
     *     "user_id": 3343,
     *     "verb": "tickets.assignment"
     *   }
     * }
     */
    ActivityResponse: {
      activity?: components["schemas"]["ActivityObject"];
    };
    /**
     * AssigneeFieldAssignableAgents
     * @example {
     *   "avatar_url": "https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png",
     *   "id": 6473829100,
     *   "name": "Joe Smith"
     * }
     */
    AssigneeFieldAssignableAgentObject: {
      /** @description URL of Agent's avatar */
      avatar_url?: string | null;
      /** @description Agent Support ID */
      id?: number;
      /** @description Name of the agent */
      name?: string;
    };
    /**
     * @example {
     *   "agents": [
     *     {
     *       "avatar_url": "https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png",
     *       "id": 6473829100,
     *       "name": "Joe Smith"
     *     },
     *     {
     *       "avatar_url": "https://z3n-example.zendesk.com/system/photos/412005192023/my_profile.png",
     *       "id": 9182736400,
     *       "name": "Jane Doe"
     *     },
     *     {
     *       "avatar_url": "https://z3n-example.zendesk.com/system/photos/887005192023/my_profile.png",
     *       "id": 1928373460,
     *       "name": "Cookie Monster"
     *     }
     *   ],
     *   "count": 3,
     *   "next_page": null,
     *   "previous_page": null
     * }
     */
    AssigneeFieldAssignableGroupAgentsResponse: {
      agents?: components["schemas"]["AssigneeFieldAssignableAgentObject"][];
      /** @description Number of agents listed in `agents` property. */
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
    };
    /**
     * AssigneeFieldAssignableGroups
     * @example {
     *   "description": "Engineering team for bugs",
     *   "id": 9182736455,
     *   "name": "Engineering"
     * }
     */
    AssigneeFieldAssignableGroupObject: {
      /** @description Description of the group */
      description?: string;
      /** @description Group ID */
      id?: number;
      /** @description Name of the group */
      name?: string;
    };
    /**
     * @example {
     *   "agents": [
     *     {
     *       "group": "Tech",
     *       "group_id": 6574839201,
     *       "id": 8392017465,
     *       "name": "Sam Technologist",
     *       "photo_url": "https://z3n-example.zendesk.com/system/photos/410305192023/my_profile.png"
     *     }
     *   ],
     *   "count": 2,
     *   "groups": [
     *     {
     *       "id": 6574839201,
     *       "name": "Tech"
     *     }
     *   ]
     * }
     */
    AssigneeFieldAssignableGroupsAndAgentsSearchResponse: {
      agents?: components["schemas"]["AssigneeFieldAssignableSearchAgentObject"][];
      /** @description Number of agents + groups listed from search result. */
      count?: number;
      groups?: components["schemas"]["AssigneeFieldAssignableSearchGroupObject"][];
    };
    /**
     * @example {
     *   "count": 3,
     *   "groups": [
     *     {
     *       "description": "Engineering",
     *       "id": 9182736455,
     *       "name": "Group for Bugs for Engineering"
     *     },
     *     {
     *       "description": "Product",
     *       "id": 1928374655,
     *       "name": "Group for feature requests"
     *     },
     *     {
     *       "description": "Customer Support",
     *       "id": 5519283746,
     *       "name": "Group for customer inquiries"
     *     }
     *   ],
     *   "next_page": null,
     *   "previous_page": null
     * }
     */
    AssigneeFieldAssignableGroupsResponse: {
      /** @description Number of groups listed in `groups` property. */
      count?: number;
      groups?: components["schemas"]["AssigneeFieldAssignableGroupObject"][];
      next_page?: string | null;
      previous_page?: string | null;
    };
    /**
     * @example {
     *   "group": "Engineering",
     *   "group_id": 9182736455,
     *   "id": 6473829100,
     *   "name": "Joe Smith",
     *   "photo_url": "https://z3n-example.zendesk.com/system/photos/900005192023/my_profile.png"
     * }
     */
    AssigneeFieldAssignableSearchAgentObject: {
      /** @description Name of the agent's group */
      group?: string;
      /** @description Agent's Group ID */
      group_id?: number;
      /** @description Agent ID */
      id?: number;
      /** @description Name of the agent */
      name?: string;
      /** @description URL of Avatar */
      photo_url?: string | null;
    };
    /**
     * @example {
     *   "id": 9182736455,
     *   "name": "Engineering"
     * }
     */
    AssigneeFieldAssignableSearchGroupObject: {
      /** @description Group ID */
      id?: number;
      /** @description Name of the group */
      name?: string;
    };
    AttachmentBaseObject: {
      /** @description The content type of the image. Example value: "image/png" */
      content_type?: string;
      /** @description A full URL where the attachment image file can be downloaded. The file may be hosted externally so take care not to inadvertently send Zendesk authentication credentials. See [Working with url properties](/documentation/ticketing/managing-tickets/working-with-url-properties) */
      content_url?: string;
      /** @description If true, the attachment has been deleted */
      deleted?: boolean;
      /** @description The name of the image file */
      file_name?: string;
      /** @description The height of the image file in pixels. If height is unknown, returns null */
      height?: string;
      /** @description Automatically assigned when created */
      id?: number;
      /**
       * @description If true, the attachment is excluded from the attachment list and the attachment's URL
       * can be referenced within the comment of a ticket. Default is false
       */
      inline?: boolean;
      /** @description If true, you can download an attachment flagged as malware. If false, you can't download such an attachment. */
      malware_access_override?: boolean;
      /** @description The result of the malware scan. There is a delay between the time the attachment is uploaded and when the malware scan is completed. Usually the scan is done within a few seconds, but high load conditions can delay the scan results. Possible values: "malware_found", "malware_not_found", "failed_to_scan", "not_scanned" */
      malware_scan_result?: string;
      /** @description The URL the attachment image file has been mapped to */
      mapped_content_url?: string;
      /** @description The size of the image file in bytes */
      size?: number;
      /** @description A URL to access the attachment details */
      url?: string;
      /** @description The width of the image file in pixels. If width is unknown, returns null */
      width?: string;
    };
    /**
     * @description A file represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/) object
     * @example {
     *   "content_type": "image/png",
     *   "content_url": "https://company.zendesk.com/attachments/my_funny_profile_pic.png",
     *   "file_name": "my_funny_profile_pic.png",
     *   "id": 928374,
     *   "size": 166144,
     *   "thumbnails": [
     *     {
     *       "content_type": "image/png",
     *       "content_url": "https://company.zendesk.com/attachments/my_funny_profile_pic_thumb.png",
     *       "file_name": "my_funny_profile_pic_thumb.png",
     *       "id": 928375,
     *       "size": 58298
     *     }
     *   ]
     * }
     */
    AttachmentObject: components["schemas"]["AttachmentBaseObject"] & components["schemas"]["AttachmentThumbnails"];
    AttachmentResponse: {
      attachment?: components["schemas"]["AttachmentObject"];
    };
    AttachmentThumbnails: {
      /** @description An array of attachment objects. Note that photo thumbnails do not have thumbnails */
      thumbnails?: readonly components["schemas"]["AttachmentBaseObject"][];
    };
    AttachmentUpdateInput: {
      /** @description If true, allows access to attachments with detected malware. */
      malware_access_override?: boolean;
    };
    AttachmentUpdateRequest: {
      attachment?: components["schemas"]["AttachmentUpdateInput"];
    };
    AttachmentUploadResponse: {
      upload?: {
        attachment?: components["schemas"]["AttachmentObject"];
        attachments?: components["schemas"]["AttachmentObject"][];
        /** @description Token for subsequent request */
        token?: string;
      };
    };
    /**
     * @example {
     *   "action": "update",
     *   "action_label": "Updated",
     *   "actor_id": 1234,
     *   "actor_name": "Sameer Patel",
     *   "change_description": "Role changed from Administrator to End User",
     *   "created_at": "2012-03-05T11:32:44Z",
     *   "id": 498483,
     *   "ip_address": "209.119.38.228",
     *   "source_id": 3456,
     *   "source_label": "John Doe",
     *   "source_type": "user",
     *   "url": "https://company.zendesk.com/api/v2/audit_logs/498483.json"
     * }
     */
    AuditLogObject: {
      /** @description Type of change made. Possible values are "create", "destroy", "exported", "login", and "update" */
      action?: string;
      /** @description Localized string of action field */
      action_label?: string;
      /** @description id of the user or system that initiated the change */
      actor_id?: number;
      /** @description Name of the user or system that initiated the change */
      actor_name?: string;
      /** @description The description of the change that occurred */
      change_description?: string;
      /**
       * Format: date-time
       * @description The time the audit got created
       */
      created_at?: string;
      /** @description The id automatically assigned upon creation */
      id?: number;
      /** @description The IP address of the user doing the audit */
      ip_address?: string;
      /** @description The id of the item being audited */
      source_id?: number;
      /** @description The name of the item being audited */
      source_label?: string;
      /**
       * @description Item type being audited. Typically describes the system where the change
       * was initiated. Possible values vary based on your account's Zendesk
       * products and activity. Common values include "apitoken", "rule", "ticket",
       * "user", and "zendesk/app_market/app". The "rule" value is used for
       * [automations](https://support.zendesk.com/hc/en-us/articles/4408832701850),
       * [macros](https://support.zendesk.com/hc/en-us/articles/4408844187034),
       * [triggers](https://support.zendesk.com/hc/en-us/articles/4408822236058),
       * [views](https://support.zendesk.com/hc/en-us/articles/4408888828570),
       * and other automated business rules
       */
      source_type?: string;
      /** @description The URL to access the audit log */
      url?: string;
    };
    AuditLogResponse: {
      audit_log?: components["schemas"]["AuditLogObject"];
    };
    AuditLogsResponse: {
      audit_logs?: components["schemas"]["AuditLogObject"][];
    };
    AuditObject: {
      author_id?: number;
      /** Format: date-time */
      created_at?: string;
      events?: readonly ({
          body?: string;
          field_name?: string;
          id?: number;
          type?: string;
          value?: string | number;
        })[];
      id?: number;
      metadata?: Record<string, never>;
      ticket_id?: number;
      via?: components["schemas"]["ViaObject"];
    };
    AuthorObject: {
      /** @description The author email */
      email?: string;
      /** @description The author id */
      id?: number;
      /** @description The author name */
      name?: string;
    };
    /**
     * @example {
     *   "actions": [
     *     {
     *       "field": "priority",
     *       "value": "high"
     *     }
     *   ],
     *   "active": true,
     *   "conditions": {
     *     "all": [
     *       {
     *         "field": "status",
     *         "operator": "is",
     *         "value": "open"
     *       },
     *       {
     *         "field": "priority",
     *         "operator": "less_than",
     *         "value": "high"
     *       }
     *     ],
     *     "any": []
     *   },
     *   "default": false,
     *   "id": 9873843,
     *   "position": 8,
     *   "raw_title": "Roger Wilco",
     *   "title": "Roger Wilco"
     * }
     */
    AutomationObject: {
      /** @description An object describing what the automation will do. See [Actions reference](/documentation/ticketing/reference-guides/actions-reference) */
      actions?: components["schemas"]["ActionObject"][];
      /** @description Whether the automation is active */
      active?: boolean;
      conditions?: components["schemas"]["ConditionsObject"];
      /**
       * Format: date-time
       * @description The time the automation was created
       */
      created_at?: string;
      /** @description If true, the automation is a default automation */
      default?: boolean;
      /** @description Automatically assigned when created */
      id?: number;
      /** @description The position of the automation which specifies the order it will be executed */
      position?: number;
      /** @description The raw title of the automation */
      raw_title?: string;
      /** @description The title of the automation */
      title?: string;
      /**
       * Format: date-time
       * @description The time of the last update of the automation
       */
      updated_at?: string;
    };
    AutomationResponse: {
      automation?: components["schemas"]["AutomationObject"];
    };
    AutomationsResponse: {
      automations?: components["schemas"]["AutomationObject"][];
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
    };
    BatchErrorItem: components["schemas"]["Error"] & {
      trigger_id?: string;
    };
    BatchJobRequest: {
      job?: {
        /** @enum {string} */
        action?: "patch";
        items?: {
          trigger_categories?: components["schemas"]["TriggerCategoryBatchRequest"][];
          triggers?: components["schemas"]["TriggerBatchRequest"][];
        };
      };
    };
    BatchJobResponse: {
      errors?: components["schemas"]["BatchErrorItem"][];
      results?: {
        trigger_categories?: components["schemas"]["TriggerCategory"][];
        triggers?: components["schemas"]["TriggerObject"][];
      };
      /** @enum {string} */
      status?: "complete" | "failed";
    };
    BookmarkCreateRequest: {
      bookmark?: components["schemas"]["BookmarkInput"];
    };
    BookmarkInput: {
      /** @description The id of the ticket the bookmark is for. */
      ticket_id?: number;
    };
    /**
     * Bookmarks
     * @example {
     *   "created_at": "2014-11-20T22:55:29Z",
     *   "id": 35436,
     *   "ticket": {
     *     "description": "The fire is very colorful.",
     *     "id": 60,
     *     "priority": "high",
     *     "requester_id": 156,
     *     "subject": "Help, my printer is on fire!"
     *   },
     *   "url": "https://{subdomain}.zendesk.com/api/v2/bookmarks/35436.json"
     * }
     */
    BookmarkObject: {
      /**
       * Format: date-time
       * @description The time the bookmark was created
       */
      created_at?: string;
      /** @description Automatically assigned when the bookmark is created */
      id?: number;
      ticket?: components["schemas"]["TicketObject"];
      /** @description The API url of this bookmark */
      url?: string;
    };
    BookmarkResponse: {
      bookmark?: components["schemas"]["BookmarkObject"];
    };
    /** Bookmarks */
    BookmarksResponse: components["schemas"]["OffsetPaginationObject"] & {
      bookmarks?: components["schemas"]["BookmarkObject"][];
    };
    BrandCreateRequest: {
      brand?: components["schemas"]["BrandObject"];
    };
    /**
     * Brands
     * @example {
     *   "active": true,
     *   "brand_url": "https://brand1.com",
     *   "created_at": "2012-04-02T22:55:29Z",
     *   "default": true,
     *   "has_help_center": true,
     *   "help_center_state": "enabled",
     *   "host_mapping": "brand1.com",
     *   "id": 47,
     *   "logo": {
     *     "content_type": "image/png",
     *     "content_url": "https://company.zendesk.com/logos/brand1_logo.png",
     *     "file_name": "brand1_logo.png",
     *     "id": 928374,
     *     "size": 166144,
     *     "thumbnails": [
     *       {
     *         "content_type": "image/png",
     *         "content_url": "https://company.zendesk.com/photos/brand1_logo_thumb.png",
     *         "file_name": "brand1_logo_thumb.png",
     *         "id": 928375,
     *         "mapped_content_url": "https://company.com/photos/brand1_logo_thumb.png",
     *         "size": 58298,
     *         "url": "https://company.zendesk.com/api/v2/attachments/928375.json"
     *       },
     *       {
     *         "content_type": "image/png",
     *         "content_url": "https://company.zendesk.com/photos/brand1_logo_small.png",
     *         "file_name": "brand1_logo_small.png",
     *         "id": 928376,
     *         "mapped_content_url": "https://company.com/photos/brand1_logo_small.png",
     *         "size": 58298,
     *         "url": "https://company.zendesk.com/api/v2/attachments/928376.json"
     *       }
     *     ],
     *     "url": "https://company.zendesk.com/api/v2/attachments/928374.json"
     *   },
     *   "name": "Brand 1",
     *   "signature_template": "{{agent.signature}}",
     *   "subdomain": "brand1",
     *   "ticket_form_ids": [
     *     47,
     *     33,
     *     22
     *   ],
     *   "updated_at": "2012-04-02T22:55:29Z",
     *   "url": "https://company.zendesk.com/api/v2/brands/47.json"
     * }
     */
    BrandObject: {
      /** @description If the brand is set as active */
      active?: boolean;
      /** @description The url of the brand */
      brand_url?: string;
      /**
       * Format: date-time
       * @description The time the brand was created
       */
      created_at?: string;
      /** @description Is the brand the default brand for this account */
      default?: boolean;
      /** @description If the brand has a Help Center */
      has_help_center?: boolean;
      /**
       * @description The state of the Help Center
       * @enum {string}
       */
      help_center_state?: "enabled" | "disabled" | "restricted";
      /** @description The hostmapping to this brand, if any. Only admins view this property. */
      host_mapping?: string;
      /** @description The ID automatically assigned when the brand is created */
      id?: number;
      /** @description If the brand object is deleted or not */
      is_deleted?: boolean;
      logo?: components["schemas"]["AttachmentObject"];
      /** @description The name of the brand */
      name: string;
      /** @description The signature template for a brand */
      signature_template?: string;
      /** @description The subdomain of the brand */
      subdomain: string;
      /** @description The ids of ticket forms that are available for use by a brand */
      ticket_form_ids?: readonly number[];
      /**
       * Format: date-time
       * @description The time of the last update of the brand
       */
      updated_at?: string;
      /** @description The API url of this brand */
      url?: string;
    };
    BrandResponse: {
      brand?: components["schemas"]["BrandObject"];
    };
    BrandUpdateRequest: {
      brand?: components["schemas"]["BrandObject"];
    };
    /** Brands */
    BrandsResponse: components["schemas"]["OffsetPaginationObject"] & {
      /** @description Array of brands */
      brands?: components["schemas"]["BrandObject"][];
    };
    BulkUpdateDefaultCustomStatusRequest: {
      /** @description The comma-separated list of custom ticket status ids to be set as default for their status categories */
      ids?: string;
    };
    BulkUpdateDefaultCustomStatusResponse: Record<string, never>;
    ChannelFrameworkPushResultsResponse: {
      /** @description An array of [result objects](#result-object) */
      results?: components["schemas"]["ChannelFrameworkResultObject"][];
    };
    ChannelFrameworkResultObject: {
      /** @description The external ID of the resource, as passed in */
      external_resource_id?: string;
      status?: components["schemas"]["ChannelFrameworkResultStatusObject"];
    };
    /** @description The status of the import for the indicated resource */
    ChannelFrameworkResultStatusObject: {
      /** @description A code indicating the status of the import of the resource, as described in [status codes](#status-codes) */
      code?: string;
      /** @description In the case of an exception, a description of the exception. Otherwise, not present. */
      description?: string;
    };
    /**
     * @example {
     *   "email": "someone@example.com",
     *   "name": "Someone Special"
     * }
     */
    CollaboratorObject: {
      /** Format: email */
      email?: string;
      name?: string;
    };
    ComplianceDeletionStatusObject: {
      account_subdomain: string;
      action: string;
      application: string;
      created_at: string;
      executer_id: number | null;
      user_id: number;
    };
    ComplianceDeletionStatusesResponse: {
      compliance_deletion_statuses?: components["schemas"]["ComplianceDeletionStatusObject"][];
    };
    ConditionObject: {
      /** @description The name of a ticket field */
      field?: string;
      /** @description A comparison operator */
      operator?: string;
      /** @description The value of a ticket field */
      value?: string;
    };
    /** @description An object that describes the conditions under which the automation will execute. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference) */
    ConditionsObject: {
      /** @description Logical AND. Tickets must fulfill all of the conditions to be considered matching */
      all?: components["schemas"]["ConditionObject"][];
      /** @description Logical OR. Tickets may satisfy any of the conditions to be considered matching */
      any?: components["schemas"]["ConditionObject"][];
    };
    CountOrganizationObject: {
      refreshed_at?: string;
      value?: number;
    };
    CountOrganizationResponse: {
      count?: components["schemas"]["CountOrganizationObject"];
    };
    CountResponse: {
      count?: {
        /** Format: datetime */
        refreshed_at?: string;
        value?: number;
      };
    };
    CreateResourceResult: {
      /** @description the id of the new resource */
      id: number;
      /** @description the index number of the resul */
      index: number;
    };
    CurrentUserResponse: {
      user?: components["schemas"]["UserObject"] & {
        /** @description CSRF token required by some Zendesk APIs. */
        authenticity_token?: string;
      };
    };
    /**
     * @description See [Tickets](/api-reference/ticketing/tickets/tickets/) for a detailed example.
     *
     * @example {
     *   "after_cursor": "MTU3NjYxMzUzOS4wfHw0Njd8",
     *   "after_url": "https://{subdomain}.zendesk.com/api/v2/incremental/tickets/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8",
     *   "before_cursor": null,
     *   "before_url": null,
     *   "end_of_stream": true,
     *   "tickets": [
     *     {
     *       "assignee_id": 235323,
     *       "collaborator_ids": [
     *         35334,
     *         234
     *       ],
     *       "created_at": "2009-07-20T22:55:29Z",
     *       "custom_fields": [
     *         {
     *           "id": 27642,
     *           "value": "745"
     *         },
     *         {
     *           "id": 27648,
     *           "value": "yes"
     *         }
     *       ],
     *       "description": "The fire is very colorful.",
     *       "due_at": null,
     *       "external_id": "ahg35h3jh",
     *       "follower_ids": [
     *         35334,
     *         234
     *       ],
     *       "group_id": 98738,
     *       "has_incidents": false,
     *       "id": 35436,
     *       "organization_id": 509974,
     *       "priority": "high",
     *       "problem_id": 9873764,
     *       "raw_subject": "{{dc.printer_on_fire}}",
     *       "recipient": "support@company.com",
     *       "requester_id": 20978392,
     *       "satisfaction_rating": {
     *         "comment": "Great support!",
     *         "id": 1234,
     *         "score": "good"
     *       },
     *       "sharing_agreement_ids": [
     *         84432
     *       ],
     *       "status": "open",
     *       "subject": "Help, my printer is on fire!",
     *       "submitter_id": 76872,
     *       "tags": [
     *         "enterprise",
     *         "other_tag"
     *       ],
     *       "type": "incident",
     *       "updated_at": "2011-05-05T10:38:52Z",
     *       "url": "https://company.zendesk.com/api/v2/tickets/35436.json",
     *       "via": {
     *         "channel": "web"
     *       }
     *     }
     *   ]
     * }
     */
    CursorBasedExportIncrementalTicketsResponse: {
      after_cursor?: string | null;
      after_url?: string | null;
      before_cursor?: string | null;
      before_url?: string | null;
      end_of_stream?: boolean;
      tickets?: components["schemas"]["TicketObject"][];
    };
    /**
     * @example {
     *   "after_cursor": "MTU3NjYxMzUzOS4wfHw0Njd8",
     *   "after_url": "https://example.zendesk.com/api/v2/incremental/users/cursor.json?cursor=MTU3NjYxMzUzOS4wfHw0Njd8",
     *   "before_cursor": null,
     *   "before_url": null,
     *   "end_of_stream": true,
     *   "users": [
     *     {
     *       "active": true,
     *       "alias": "Mr. Johnny",
     *       "created_at": "2009-07-20T22:55:29Z",
     *       "custom_role_id": 9373643,
     *       "details": "",
     *       "email": "johnny@example.com",
     *       "external_id": "sai989sur98w9",
     *       "id": 35436,
     *       "last_login_at": "2011-05-05T10:38:52Z",
     *       "locale": "en-US",
     *       "locale_id": 1,
     *       "moderator": true,
     *       "name": "Johnny Agent",
     *       "notes": "Johnny is a nice guy!",
     *       "only_private_comments": false,
     *       "organization_id": 57542,
     *       "phone": "+15551234567",
     *       "photo": {
     *         "content_type": "image/png",
     *         "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic.png",
     *         "id": 928374,
     *         "name": "my_funny_profile_pic.png",
     *         "size": 166144,
     *         "thumbnails": [
     *           {
     *             "content_type": "image/png",
     *             "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png",
     *             "id": 928375,
     *             "name": "my_funny_profile_pic_thumb.png",
     *             "size": 58298
     *           }
     *         ]
     *       },
     *       "restricted_agent": true,
     *       "role": "agent",
     *       "role_type": 0,
     *       "shared": false,
     *       "shared_agent": false,
     *       "signature": "Have a nice day, Johnny",
     *       "suspended": true,
     *       "tags": [
     *         "enterprise",
     *         "other_tag"
     *       ],
     *       "ticket_restriction": "assigned",
     *       "time_zone": "Copenhagen",
     *       "updated_at": "2011-05-05T10:38:52Z",
     *       "url": "https://company.zendesk.com/api/v2/users/35436.json",
     *       "user_fields": {
     *         "user_date": "2012-07-23T00:00:00Z",
     *         "user_decimal": 5.1,
     *         "user_dropdown": "option_1"
     *       },
     *       "verified": true
     *     }
     *   ]
     * }
     */
    CursorBasedExportIncrementalUsersResponse: {
      after_cursor?: string | null;
      after_url?: string | null;
      before_cursor?: string | null;
      before_url?: string | null;
      end_of_stream?: boolean;
      users?: components["schemas"]["UserObject"][];
    };
    CustomFieldObject: {
      /** @description If true, this field is available for use */
      active?: boolean;
      /**
       * Format: date-time
       * @description The time of the last update of the ticket field
       */
      created_at?: string;
      /** @description Required and presented for a custom field of type "dropdown". Each option is represented by an object with a `name` and `value` property */
      custom_field_options?: components["schemas"]["CustomFieldOptionObject"][];
      /** @description User-defined description of this field's purpose */
      description?: string;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description A unique key that identifies this custom field. This is used for updating the field and referencing in placeholders. The key must consist of only letters, numbers, and underscores. It can't be only numbers and can't be reused if deleted. */
      key: string;
      /** @description Ordering of the field relative to other fields */
      position?: number;
      /** @description The dynamic content placeholder, if present, or the `description` value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_description?: string;
      /** @description The dynamic content placeholder, if present, or the `title` value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_title?: string;
      /** @description Regular expression field only. The validation pattern for a field value to be deemed valid */
      regexp_for_validation?: string | null;
      /** @description A filter definition that allows your autocomplete to filter down results */
      relationship_filter?: Record<string, never>;
      /** @description A representation of what type of object the field references. Options are "zen:user", "zen:organization", "zen:ticket", and "zen:custom_object:{key}" where key is a custom object key. For example "zen:custom_object:apartment". */
      relationship_target_type?: string;
      /** @description If true, only active and position values of this field can be changed */
      system?: boolean;
      /** @description Optional for custom field of type "checkbox"; not presented otherwise. */
      tag?: string;
      /** @description The title of the custom field */
      title: string;
      /** @description The custom field type: "checkbox", "date", "decimal", "dropdown", "integer", ["lookup"](/api-reference/ticketing/lookup_relationships/lookup_relationships/), "regexp", "text", or "textarea" */
      type: string;
      /**
       * Format: date-time
       * @description The time of the last update of the ticket field
       */
      updated_at?: string;
      /** @description The URL for this resource */
      url?: string;
    };
    CustomFieldOptionObject: {
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description Name of the dropdown option */
      name: string;
      /** @description Position of the dropdown option */
      position?: number;
      /** @description Raw name of the dropdown option */
      raw_name?: string;
      /** @description URL of the dropdown option */
      url?: string;
      /** @description Value of the dropdown option */
      value: string;
    };
    CustomFieldOptionResponse: {
      custom_field_option?: components["schemas"]["CustomFieldOptionObject"];
    };
    CustomFieldOptionsResponse: {
      /** @description Total count of records retrieved */
      count?: number;
      custom_field_options?: components["schemas"]["CustomFieldOptionObject"][];
      /** @description URL of the next page */
      next_page?: string | null;
      /** @description URL of the previous page */
      previous_page?: string | null;
    };
    CustomObject: {
      /**
       * Format: date-time
       * @description The time the object type was created
       */
      created_at?: string;
      /** @description Id of a user who created the object */
      created_by_user_id?: string;
      /** @description User-defined description of the object */
      description?: string;
      /** @description A user-defined unique identifier. Writable on create only. Cannot be reused if deleted. */
      key: string;
      /** @description The dynamic content placeholder, if present, or the "raw_description" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_description?: string;
      /** @description The dynamic content placeholder, if present, or the "title" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_title?: string;
      /** @description The dynamic content placeholder, if present, or the "raw_title_pluralized" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_title_pluralized?: string;
      /** @description User-defined display name for the object */
      title: string;
      /** @description User-defined pluralized version of the object's title */
      title_pluralized: string;
      /**
       * Format: date-time
       * @description The time of the last update of the object
       */
      updated_at?: string;
      /** @description Id of the last user who updated the object */
      updated_by_user_id?: string;
      /** @description Direct link to the specific custom object */
      url?: string;
    };
    CustomObjectCreateInput: {
      /** @description Unique identifier. Writable on create only */
      key?: string;
      /** @description Display name for the object */
      title?: string;
      /** @description Pluralized version of the object's title */
      title_pluralized?: string;
    };
    /**
     * @example {
     *   "active": true,
     *   "created_at": "2022-09-07T23:21:59Z",
     *   "description": "Make",
     *   "id": 4398096842879,
     *   "key": "make",
     *   "position": 0,
     *   "raw_description": "Make",
     *   "raw_title": "Make",
     *   "regexp_for_validation": null,
     *   "system": false,
     *   "title": "Make",
     *   "type": "text",
     *   "updated_at": "2022-09-07T23:22:00Z",
     *   "url": "https://company.zendesk.com/api/v2/custom_objects/car/fields/4398096842879.json"
     * }
     */
    CustomObjectField: components["schemas"]["CustomFieldObject"];
    CustomObjectFieldResponse: {
      custom_object_field?: components["schemas"]["CustomObjectField"];
    };
    CustomObjectFieldsCreateRequest: {
      custom_object_field?: components["schemas"]["CustomObjectField"];
    };
    CustomObjectFieldsResponse: {
      custom_object_fields?: components["schemas"]["CustomObjectField"][];
    };
    CustomObjectLimitsResponse: {
      /** @description The current numnber of the requested resource */
      count?: number;
      /** @description The maximum allowed number for the requested resource */
      limit?: number;
    };
    CustomObjectRecord: {
      /**
       * Format: date-time
       * @description The time the object was created
       */
      created_at?: string;
      /** @description Id of a user who created the object */
      created_by_user_id?: string;
      custom_object_fields?: {
        [key: string]: unknown;
      };
      /** @description A user-defined unique identifier */
      custom_object_key?: string;
      /** @description An id you can use to link custom object records to external data */
      external_id?: string | null;
      /** @description Automatically assigned upon creation */
      id?: string;
      /** @description User-defined display name for the object */
      name: string;
      /**
       * Format: date-time
       * @description The time of the last update of the object
       */
      updated_at?: string;
      /** @description Id of the last user who updated the object */
      updated_by_user_id?: string;
      /** @description Direct link to the specific custom object */
      url?: string;
    };
    CustomObjectRecordResponse: {
      custom_object_record?: components["schemas"]["CustomObjectRecord"];
    };
    CustomObjectRecordsBulkCreateRequest: {
      job?: {
        action?: string;
        /** @description An array of record objects for job actions that create, update, or set. An array of strings for job actions that delete. */
        items?: components["schemas"]["CustomObjectRecord"][];
      };
    };
    CustomObjectRecordsCreateRequest: {
      custom_object_record?: components["schemas"]["CustomObjectRecord"];
    };
    CustomObjectRecordsJobsResponse: {
      job_status?: {
        id?: string;
        message?: string | null;
        progress?: number | null;
        results?: components["schemas"]["CustomObjectRecord"][] | null;
        status?: string;
        total?: number;
        url?: string;
      };
    };
    CustomObjectRecordsResponse: {
      /** @description The number of results returned for the current request */
      count?: number;
      custom_object_records?: components["schemas"]["CustomObjectRecord"][];
      links?: {
        next: string | null;
        prev: string | null;
      };
      meta?: {
        after_cursor: string | null;
        before_cursor: string | null;
        has_more: boolean;
      };
    };
    CustomObjectRecordsUpsertRequest: {
      custom_object_record?: components["schemas"]["CustomObjectRecord"];
    };
    CustomObjectResponse: {
      custom_object?: components["schemas"]["CustomObject"];
    };
    CustomObjectsCreateRequest: {
      custom_object?: components["schemas"]["CustomObjectCreateInput"];
    };
    CustomObjectsResponse: {
      custom_objects?: components["schemas"]["CustomObject"][];
    };
    /** @description Configuration settings for the role. See [Configuration](#configuration) */
    CustomRoleConfigurationObject: {
      /** @description Whether or not the agent can assign tickets to any group */
      assign_tickets_to_any_group?: boolean;
      /** @description Whether or not the agent has access to Chat */
      chat_access?: boolean;
      /** @description Whether or not the agent can view lists of user profiles. Allowed values: "full", "none" */
      end_user_list_access?: string;
      /** @description What the agent can do with end-user profiles. Allowed values: "edit", "edit-within-org", "full", "readonly" */
      end_user_profile_access?: string;
      /** @description Allowed values: "edit", "full", "none", "readonly" */
      explore_access?: string;
      /** @description The kind of access the agent has to Guide. Allowed values: "edit-topics", "full", "readonly" */
      forum_access?: string;
      forum_access_restricted_content?: boolean;
      /** @description Whether or not the agent can add or modify groups */
      group_access?: boolean;
      light_agent?: boolean;
      /** @description What the agent can do with macros. Allowed values: "full", "manage-group", "manage-personal", "readonly" */
      macro_access?: string;
      /** @description Whether or not the agent can manage business rules */
      manage_business_rules?: boolean;
      /** @description Whether or not the agent can view, add, and edit contextual workspaces */
      manage_contextual_workspaces?: boolean;
      /** @description Whether or not the agent can access dynamic content */
      manage_dynamic_content?: boolean;
      /** @description Whether or not the agent can manage channels and extensions */
      manage_extensions_and_channels?: boolean;
      /** @description Whether or not the agent can manage Facebook pages */
      manage_facebook?: boolean;
      /** @description Whether or not the agent can create and manage organization fields */
      manage_organization_fields?: boolean;
      /** @description Whether or not the agent can create and manage ticket fields */
      manage_ticket_fields?: boolean;
      /** @description Whether or not the agent can create and manage ticket forms */
      manage_ticket_forms?: boolean;
      /** @description Whether or not the agent can create and manage user fields */
      manage_user_fields?: boolean;
      moderate_forums?: boolean;
      /** @description Whether or not the agent can add or modify organizations */
      organization_editing?: boolean;
      /** @description Whether or not the agent can add or modify organization notes */
      organization_notes_editing?: boolean;
      /** @description What the agent can do with reports. Allowed values: "full", "none", "readonly" */
      report_access?: string;
      /** @description Whether or not the agent can contribute to side conversations */
      side_conversation_create?: boolean;
      /** @description What kind of tickets the agent can access. Allowed values: "all", "assigned-only", "within-groups", "within-groups-and-public-groups", "within-organization" */
      ticket_access?: string;
      /** @description What type of comments the agent can make. Allowed values: "public", "none" */
      ticket_comment_access?: string;
      /** @description Whether or not the agent can delete tickets */
      ticket_deletion?: boolean;
      /** @description Whether or not the agent can edit ticket properties */
      ticket_editing?: boolean;
      /** @description Whether or not the agent can merge tickets */
      ticket_merge?: boolean;
      /** @description Whether or not the agent can edit ticket tags */
      ticket_tag_editing?: boolean;
      twitter_search_access?: boolean;
      /** @description What the agent can do with customer lists. Allowed values: "full", "manage-group", "manage-personal", "none", "readonly" */
      user_view_access?: string;
      /** @description What the agent can do with views. Allowed values: "full", "manage-group", "manage-personal", "playonly", "readonly" */
      view_access?: string;
      /** @description Whether or not the agent can view deleted tickets */
      view_deleted_tickets?: boolean;
      /** @description Whether or not the agent can answer and place calls to end users */
      voice_access?: boolean;
      /** @description Whether or not the agent can view details about calls on the Talk dashboard */
      voice_dashboard_access?: boolean;
    };
    /** Custom Agent Roles */
    CustomRoleObject: {
      configuration?: components["schemas"]["CustomRoleConfigurationObject"];
      /**
       * Format: date-time
       * @description The time the record was created
       */
      created_at?: string;
      /** @description A description of the role */
      description?: string;
      /** @description Automatically assigned on creation */
      id?: number;
      /** @description Name of the custom role */
      name: string;
      /** @description The user's role. 0 stands for a custom agent, 1 for a light agent, 2 for a chat agent, 3 for a contributor, 4 for an admin and 5 for a billing admin. See [Understanding standard agent roles in Zendesk Support](https://support.zendesk.com/hc/en-us/articles/4409155971354-Understanding-standard-agent-roles-in-Zendesk-Support) in Zendesk help */
      role_type: number;
      /** @description The number of team members assigned to this role */
      team_member_count?: number;
      /**
       * Format: date-time
       * @description The time the record was last updated
       */
      updated_at?: string;
    };
    CustomRoleResponse: {
      custom_role?: components["schemas"]["CustomRoleObject"];
    };
    CustomRolesResponse: {
      custom_roles?: components["schemas"]["CustomRoleObject"][];
    };
    CustomStatusCreateInput: components["schemas"]["CustomStatusUpdateInput"] & ({
      /**
       * @description The status category the custom ticket status belongs to
       * @enum {string}
       */
      status_category?: "new" | "open" | "pending" | "hold" | "solved";
    });
    CustomStatusCreateRequest: {
      custom_status?: components["schemas"]["CustomStatusCreateInput"];
    };
    CustomStatusObject: {
      /** @description If true, the custom status is set to active, If false, the custom status is set to inactive */
      active?: boolean;
      /** @description The label displayed to agents. Maximum length is 48 characters */
      agent_label: string;
      /**
       * Format: date-time
       * @description The date and time the custom ticket status was created
       */
      created_at?: string;
      /** @description If true, the custom status is set to default. If false, the custom status is set to non-default */
      default?: boolean;
      /** @description The description of when the user should select this custom ticket status */
      description?: string;
      /** @description The description displayed to end users */
      end_user_description?: string;
      /** @description The label displayed to end users. Maximum length is 48 characters */
      end_user_label?: string;
      /** @description Automatically assigned when the custom ticket status is created */
      id?: number;
      /** @description The dynamic content placeholder. If the dynamic content placeholder is not available, this is the "agent_label" value. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_agent_label?: string;
      /** @description The dynamic content placeholder. If the dynamic content placeholder is not available, this is the "description" value. [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_description?: string;
      /** @description The dynamic content placeholder. If the dynamic content placeholder is not available, this is the "end_user_description" value. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_end_user_description?: string;
      /** @description The dynamic content placeholder. If the dynamic content placeholder is not available, this is the "end_user_label" value. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_end_user_label?: string;
      /**
       * @description The status category the custom ticket status belongs to
       * @enum {string}
       */
      status_category: "new" | "open" | "pending" | "hold" | "solved";
      /**
       * Format: date-time
       * @description The date and time the custom ticket status was last updated
       */
      updated_at?: string;
    };
    CustomStatusResponse: {
      custom_status?: components["schemas"]["CustomStatusObject"];
    };
    CustomStatusUpdateInput: {
      /** @description True if the custom status is set as active; inactive if false */
      active?: boolean;
      /** @description The dynamic content placeholder, if present, or the "agent_label" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      agent_label?: string;
      /** @description The dynamic content placeholder, if present, or the "description" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      description?: string;
      /** @description The dynamic content placeholder, if present, or the "end_user_description" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      end_user_description?: string;
      /** @description The dynamic content placeholder, if present, or the "end_user_label" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      end_user_label?: string;
    };
    CustomStatusUpdateRequest: {
      custom_status?: components["schemas"]["CustomStatusUpdateInput"];
    };
    CustomStatusesResponse: {
      custom_statuses?: components["schemas"]["CustomStatusObject"][];
    };
    DefinitionsResponse: {
      definitions?: {
        conditions_all?: {
            group?: string;
            nullable?: boolean;
            operators?: {
                terminal?: boolean;
                title?: string;
                value?: string;
              }[];
            repeatable?: boolean;
            subject?: string;
            title?: string;
            type?: string;
            values?: {
                enabled?: boolean;
                title?: string;
                value?: string;
              }[];
          }[];
        conditions_any?: {
            group?: string;
            nullable?: boolean;
            operators?: {
                terminal?: boolean;
                title?: string;
                value?: string;
              }[];
            repeatable?: boolean;
            subject?: string;
            title?: string;
            type?: string;
            values?: {
                enabled?: boolean;
                title?: string;
                value?: string;
              }[];
          }[];
      };
    };
    DeletedUserObject: {
      active: boolean;
      created_at: string;
      email: string;
      id: number;
      locale: string;
      locale_id: number;
      name: string;
      organization_id: number;
      phone: string | null;
      photo: Record<string, unknown> | null;
      role: string;
      shared_phone_number: string | null;
      time_zone: string;
      updated_at: string;
      url: string;
    };
    DeletedUserResponse: {
      deleted_user?: components["schemas"]["DeletedUserObject"];
    };
    DeletedUsersResponse: {
      deleted_users?: components["schemas"]["DeletedUserObject"][];
    };
    /** Dynamic Content Items */
    DynamicContentObject: {
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description The default locale for the item. Must be one of the [locales the account has active](/api-reference/ticketing/account-configuration/locales/#list-locales). */
      default_locale_id: number;
      /** @description Automatically assigned when creating items */
      id?: number;
      /** @description The unique name of the item */
      name: string;
      /** @description Indicates the item has outdated variants within it */
      outdated?: boolean;
      /** @description Automatically generated placeholder for the item, derived from name */
      placeholder?: string;
      /**
       * Format: date-time
       * @description When this record was last updated
       */
      updated_at?: string;
      /** @description The API url of this item */
      url?: string;
      /** @description All variants within this item. See [Dynamic Content Item Variants](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/) */
      variants: components["schemas"]["DynamicContentVariantObject"][];
    };
    DynamicContentResponse: {
      item?: components["schemas"]["DynamicContentObject"];
    };
    /**
     * @example {
     *   "active": true,
     *   "content": "This is my dynamic content in English",
     *   "created_at": "2014-04-09T19:53:23Z",
     *   "default": true,
     *   "id": 23,
     *   "locale_id": 125,
     *   "outdated": false,
     *   "updated_at": "2014-04-09T19:53:23Z",
     *   "url": "https://subdomain.zendesk.com/api/v2/dynamic_content/items/3/variants/23.json"
     * }
     */
    DynamicContentVariantObject: {
      /** @description If the variant is active and useable */
      active?: boolean;
      /** @description The content of the variant */
      content: string;
      /**
       * Format: date-time
       * @description When the variant was created
       */
      created_at?: string;
      /** @description If the variant is the default for the item it belongs to */
      default?: boolean;
      /** @description Automatically assigned when the variant is created */
      id?: number;
      /** @description An active locale */
      locale_id: number;
      /** @description If the variant is outdated */
      outdated?: boolean;
      /**
       * Format: date-time
       * @description When the variant was last updated
       */
      updated_at?: string;
      /** @description The API url of the variant */
      url?: string;
    };
    DynamicContentVariantResponse: {
      variant?: components["schemas"]["DynamicContentVariantObject"];
    };
    DynamicContentVariantsResponse: {
      variants?: components["schemas"]["DynamicContentVariantObject"][];
    };
    DynamicContentsResponse: {
      items?: components["schemas"]["DynamicContentObject"][];
    };
    EmailCCObject: components["schemas"]["FollowerObject"] & ({
      /** @enum {string} */
      action?: "put" | "delete";
      user_email?: string;
      user_id?: string;
      user_name?: string;
    });
    Error: {
      code: string;
      detail?: string;
      id?: string;
      links?: Record<string, never>;
      source?: Record<string, never>;
      status?: string;
      title: string;
    };
    Errors: {
      errors?: components["schemas"]["Error"][];
    };
    /**
     * @example {
     *   "created_at": "2012-04-02T22:55:29Z",
     *   "default": true,
     *   "fields": [
     *     {
     *       "id": null,
     *       "zrn": "zen:user:identity:email"
     *     },
     *     {
     *       "id": null,
     *       "zrn": "zen:user:field:standard:external_id"
     *     },
     *     {
     *       "id": null,
     *       "zrn": "zen:user:field:standard:iana_time_zone"
     *     },
     *     {
     *       "id": null,
     *       "zrn": "zen:user:field:standard:locale"
     *     },
     *     {
     *       "id": null,
     *       "zrn": "zen:user:field:standard:organization_id"
     *     }
     *   ],
     *   "id": "123",
     *   "key": "zen:custom_object:boat",
     *   "layout": "essentials_card",
     *   "max_count": 20,
     *   "updated_at": "2012-04-02T22:55:29Z"
     * }
     */
    EssentialsCardObject: {
      /**
       * Format: date-time
       * @description Date and time the essentials card were created
       */
      created_at?: string;
      /** @description If true, the system has used the first twenty fields for the custom object type as the essentials card. */
      default?: boolean;
      /** @description Fields that are displayed in the essentials card details. The order is defined by the order of the fields in the array */
      fields: {
          [key: string]: unknown;
        }[];
      /** @description id of the essentials card */
      id?: string | null;
      /** @description Object type. Example: `zen:user` refers to `User` type */
      key?: string;
      /** @description layout type */
      layout?: string;
      /** @description Maximum number of fields allowed in the essentials card */
      max_count?: number;
      /**
       * Format: date-time
       * @description Date and time the essentials card were last updated
       */
      updated_at?: string;
    };
    EssentialsCardResponse: {
      object_layout?: components["schemas"]["EssentialsCardObject"];
    };
    EssentialsCardsResponse: {
      object_layouts?: components["schemas"]["EssentialsCardObject"][];
    };
    /**
     * @example {
     *   "count": 1,
     *   "end_of_stream": true,
     *   "end_time": 1601357503,
     *   "next_page": "https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503",
     *   "organizations": [
     *     {
     *       "created_at": "2018-11-14T00:14:52Z",
     *       "details": "caterpillar =)",
     *       "domain_names": [
     *         "remain.com"
     *       ],
     *       "external_id": "ABC198",
     *       "group_id": 1835962,
     *       "id": 4112492,
     *       "name": "Groablet Enterprises",
     *       "notes": "donkey",
     *       "organization_fields": {
     *         "datepudding": "2018-11-04T00:00:00+00:00",
     *         "org_field_1": "happy happy",
     *         "org_field_2": "teapot_kettle"
     *       },
     *       "shared_comments": false,
     *       "shared_tickets": false,
     *       "tags": [
     *         "smiley",
     *         "teapot_kettle"
     *       ],
     *       "updated_at": "2018-11-14T00:54:22Z",
     *       "url": "https://example.zendesk.com/api/v2/organizations/4112492.json"
     *     }
     *   ]
     * }
     */
    ExportIncrementalOrganizationsResponse: {
      count?: number;
      end_of_stream?: boolean;
      end_time?: number;
      next_page?: string | null;
      organizations?: components["schemas"]["OrganizationObject"][];
    };
    /**
     * @example {
     *   "count": 1,
     *   "end_of_stream": true,
     *   "end_time": 1601357503,
     *   "next_page": "https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503",
     *   "ticket_events": [
     *     {
     *       "id": 926256957613,
     *       "instance_id": 1,
     *       "metric": "agent_work_time",
     *       "ticket_id": 155,
     *       "time": "2020-10-26T12:53:12Z",
     *       "type": "measure"
     *     }
     *   ]
     * }
     */
    ExportIncrementalTicketEventsResponse: {
      count?: number;
      end_of_stream?: boolean;
      end_time?: number;
      next_page?: string | null;
      ticket_events?: components["schemas"]["TicketMetricEventBaseObject"][];
    };
    FollowerObject: {
      /** @enum {string} */
      action?: "put" | "delete";
      /** Format: email */
      user_email?: string;
      user_id?: string;
    };
    GroupMembershipObject: {
      /**
       * Format: date-time
       * @description The time the group was created
       */
      created_at?: string;
      /** @description If true, tickets assigned directly to the agent will assume this membership's group */
      default?: boolean;
      /** @description The id of a group */
      group_id: number;
      /** @description Automatically assigned upon creation */
      id?: number;
      /**
       * Format: date-time
       * @description The time of the last update of the group
       */
      updated_at?: string;
      /** @description The API url of this record */
      url?: string;
      /** @description The id of an agent */
      user_id: number;
    };
    GroupMembershipResponse: {
      group_membership?: components["schemas"]["GroupMembershipObject"];
    };
    GroupMembershipsResponse: {
      group_memberships?: components["schemas"]["GroupMembershipObject"][];
    };
    /**
     * @example {
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "default": true,
     *   "deleted": false,
     *   "description": "Some clever description here",
     *   "id": 3432,
     *   "is_public": true,
     *   "name": "First Level Support",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/groups/3432.json"
     * }
     */
    GroupObject: {
      /**
       * Format: date-time
       * @description The time the group was created
       */
      created_at?: string;
      /** @description If the group is the default one for the account */
      default?: boolean;
      /** @description Deleted groups get marked as such */
      deleted?: boolean;
      /** @description The description of the group */
      description?: string;
      /** @description Automatically assigned when creating groups */
      id?: number;
      /**
       * @description If true, the group is public.
       * If false, the group is private.
       * You can't change a private group to a public group
       */
      is_public?: boolean;
      /** @description The name of the group */
      name: string;
      /**
       * Format: date-time
       * @description The time of the last update of the group
       */
      updated_at?: string;
      /** @description The API url of the group */
      url?: string;
    };
    GroupResponse: {
      group?: components["schemas"]["GroupObject"];
    };
    GroupSLAPoliciesResponse: {
      count?: number;
      group_sla_policies?: components["schemas"]["GroupSLAPolicyObject"][];
      next_page?: string | null;
      previous_page?: string | null;
    };
    GroupSLAPolicyFilterConditionObject: {
      /** @description The name of a ticket field */
      field?: string;
      /** @description A comparison operator */
      operator?: string;
      /** @description The value of a ticket field */
      value?: (string | number)[];
    };
    GroupSLAPolicyFilterDefinitionResponse: {
      definitions?: {
        all?: ({
            group?: string;
            operators?: {
                title?: string;
                value?: string;
              }[];
            title?: string;
            value?: string;
            values?: {
              list?: ({
                  title?: string;
                  value?: number | null;
                })[];
              type?: string;
            };
          })[];
      };
    };
    /** @description An object that describes the conditions a ticket must match for a Group SLA policy to be applied to the ticket. See [Filter](#filter). */
    GroupSLAPolicyFilterObject: {
      all?: components["schemas"]["GroupSLAPolicyFilterConditionObject"][];
    };
    GroupSLAPolicyMetricObject: {
      /** @description Whether the metric targets are being measured in business hours or calendar hours */
      business_hours?: boolean;
      /** @description The definition of the time that is being measured */
      metric?: string;
      /** @description Priority that a ticket must match */
      priority?: string;
      /** @description The time within which the end-state for a metric should be met */
      target?: number;
    };
    /**
     * @example {
     *   "created_at": "2023-03-17T22:50:26Z",
     *   "description": "Group: Tier 1",
     *   "filter": {
     *     "all": []
     *   },
     *   "id": "01H078CBDY28BZG7P6BONY09DN",
     *   "policy_metrics": [
     *     {
     *       "business_hours": false,
     *       "metric": "group_ownership_time",
     *       "priority": "low",
     *       "target": 3600
     *     }
     *   ],
     *   "position": 3,
     *   "title": "Tier 1",
     *   "updated_at": "2023-03-17T22:50:26Z",
     *   "url": "https://company.zendesk.com/api/v2/group_slas/policies/01H078CBDY28BZG7P6BONY09DN.json"
     * }
     */
    GroupSLAPolicyObject: {
      /**
       * Format: date-time
       * @description The time the Group SLA policy was created
       */
      created_at?: string;
      /** @description The description of the Group SLA policy */
      description?: string;
      filter: components["schemas"]["GroupSLAPolicyFilterObject"];
      /** @description Automatically assigned when created */
      id?: string;
      /** @description Array of [policy metric](#policy-metric) objects */
      policy_metrics?: components["schemas"]["GroupSLAPolicyMetricObject"][];
      /** @description Position of the Group SLA policy. This position determines the order in which policies are matched to tickets. If not specified, the Group SLA policy is added at the last position */
      position?: number;
      /** @description The title of the Group SLA policy */
      title: string;
      /**
       * Format: date-time
       * @description The time of the last update of the Group SLA policy
       */
      updated_at?: string;
      /** @description URL of the Group SLA policy record */
      url?: string;
    };
    GroupSLAPolicyResponse: {
      group_sla_policy?: components["schemas"]["GroupSLAPolicyObject"];
    };
    GroupsCountObject: {
      count?: {
        /**
         * Format: date-time
         * @description Timestamp that indicates when the count was last updated
         */
        refreshed_at?: string;
        /** @description Approximate count of groups */
        value?: number;
      };
    };
    GroupsResponse: {
      groups?: components["schemas"]["GroupObject"][];
    };
    /**
     * Host Mapping
     * @example {
     *   "cname": "google.com",
     *   "expected_cnames": [
     *     "bar.zendesk.coom"
     *   ],
     *   "is_valid": false,
     *   "reason": "wrong_cname"
     * }
     */
    HostMappingObject: {
      /** @description The canonical name record for a host mapping */
      cname?: string;
      /** @description Array of expected CNAME records for host mapping(s) of a given brand */
      expected_cnames?: string[];
      /** @description Whether a host mapping is valid or not for a given brand */
      is_valid?: boolean;
      /** @description Reason why a host mapping is valid or not */
      reason?: string;
    };
    /** Incremental Skill-based Routing */
    IncrementalSkillBasedRouting: {
      /** @description Routing attribute values */
      attribute_values?: components["schemas"]["IncrementalSkillBasedRoutingAttributeValue"][];
      /** @description Routing attributes */
      attributes?: components["schemas"]["IncrementalSkillBasedRoutingAttribute"][];
      /** @description The number of results returned for the current request */
      count?: number;
      /** @description The most recent resource creation time present in this result set in Unix epoch time */
      end_time?: number;
      /** @description Routing instance values */
      instance_values?: components["schemas"]["IncrementalSkillBasedRoutingInstanceValue"][];
      /** @description The URL that should be called to get the next set of results */
      next_page?: string;
    };
    IncrementalSkillBasedRoutingAttribute: {
      /** @description Automatically assigned when an attribute is created */
      id?: string;
      /** @description The name of the attribute */
      name?: string;
      /**
       * Format: date-time
       * @description The time the attribute was created, updated, or deleted
       */
      time?: string;
      /** @description One of "create", "update", or "delete" */
      type?: string;
    };
    IncrementalSkillBasedRoutingAttributeValue: {
      /** @description Id of the associated attribute */
      attribute_id?: string;
      /** @description Automatically assigned when an attribute value is created */
      id?: string;
      /** @description The name of the attribute value */
      name?: string;
      /**
       * Format: date-time
       * @description The time the attribute value was created, updated, or deleted
       */
      time?: string;
      /** @description One of "create", "update", or "delete" */
      type?: string;
    };
    IncrementalSkillBasedRoutingInstanceValue: {
      /** @description Id of the associated attribute value */
      attribute_value_id?: string;
      /** @description Automatically assigned when an instance value is created */
      id?: string;
      /** @description Id of the associated agent or ticket */
      instance_id?: string;
      /**
       * Format: date-time
       * @description The time the instance value was created or deleted
       */
      time?: string;
      /** @description One of "associate_agent", "unassociate_agent", "associate_ticket", or "unassociate_ticket" */
      type?: string;
    };
    /**
     * @example {
     *   "id": "82de0b044094f0c67893ac9fe64f1a99",
     *   "message": "Completed at 2018-03-08 10:07:04 +0000",
     *   "progress": 2,
     *   "results": [
     *     {
     *       "action": "update",
     *       "id": 244,
     *       "status": "Updated",
     *       "success": true
     *     },
     *     {
     *       "action": "update",
     *       "id": 245,
     *       "status": "Updated",
     *       "success": true
     *     }
     *   ],
     *   "status": "completed",
     *   "total": 2,
     *   "url": "https://example.zendesk.com/api/v2/job_statuses/82de0b0467893ac9fe64f1a99.json"
     * }
     */
    JobStatusObject: {
      /** @description Automatically assigned when the job is queued */
      id?: string;
      /** @description The type of the job */
      job_type?: string;
      /** @description Message from the job worker, if any */
      message?: string | null;
      /** @description Number of tasks that have already been completed */
      progress?: number | null;
      /** @description Result data from processed tasks. See [Results](#results) below */
      results?: OneOf<[components["schemas"]["JobStatusResultObject"][] | null, {
        /** @description Whether the action was successful or not */
        success: boolean;
      }]>;
      /** @description The current status. One of the following: "queued", "working", "failed", "completed" */
      status?: string;
      /** @description The total number of tasks this job is batching through */
      total?: number | null;
      /** @description The URL to poll for status updates */
      url?: string;
    };
    JobStatusResponse: {
      job_status?: components["schemas"]["JobStatusObject"];
    };
    JobStatusResultObject: components["schemas"]["CreateResourceResult"] | components["schemas"]["UpdateResourceResult"];
    JobStatusesResponse: {
      job_statuses: components["schemas"]["JobStatusObject"][];
    };
    ListDeletedTicketsResponse: {
      deleted_tickets?: {
          actor?: {
            id?: number;
            name?: string;
          };
          deleted_at?: string;
          id?: number;
          previous_state?: string;
          subject?: string;
        }[];
    } & components["schemas"]["OffsetPaginationObject"];
    ListTicketCollaboratorsResponse: {
      [key: string]: unknown;
    };
    ListTicketEmailCCsResponse: {
      [key: string]: unknown;
    };
    ListTicketFollowersResponse: {
      [key: string]: unknown;
    };
    ListTicketIncidentsResponse: {
      [key: string]: unknown;
    };
    ListTicketProblemsResponse: {
      [key: string]: unknown;
    };
    /**
     * @example {
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "id": 1,
     *   "locale": "en-US",
     *   "name": "English",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/locales/en-US.json"
     * }
     */
    LocaleObject: {
      /**
       * Format: date-time
       * @description The ISO 8601 formatted date-time the locale was created
       */
      created_at?: string;
      /** @description The unique ID of the locale */
      id?: number;
      /** @description The name of the locale */
      locale?: string;
      /** @description The name of the language */
      name?: string;
      /**
       * Format: date-time
       * @description The ISO 8601 formatted date-time when the locale was last updated
       */
      updated_at?: string;
      /** @description The URL of the locale record */
      url?: string;
    };
    LocaleResponse: {
      locale?: components["schemas"]["LocaleObject"];
    };
    LocalesResponse: {
      locales?: components["schemas"]["LocaleObject"][];
    };
    MacroApplyTicketResponse: {
      result?: {
        ticket?: {
          assignee_id?: number;
          comment?: {
            body?: string;
            public?: boolean;
            scoped_body?: string[][];
          };
          fields?: {
            id?: number;
            value?: string;
          };
          group_id?: number;
          id?: number;
          url?: string;
        };
      };
    };
    MacroAttachmentObject: {
      /** @description The content type of the image. Example value: "image/png" */
      content_type?: string;
      /** @description A full URL where the attachment image file can be downloaded */
      content_url?: string;
      /**
       * Format: date-time
       * @description The time when this attachment was created
       */
      created_at?: string;
      /** @description The name of the image file */
      filename?: string;
      /** @description Automatically assigned when created */
      id?: number;
      /** @description The size of the image file in bytes */
      size?: number;
    };
    MacroAttachmentResponse: {
      macro_attachment?: components["schemas"]["MacroAttachmentObject"];
    };
    MacroAttachmentsResponse: {
      macro_attachments?: components["schemas"]["MacroAttachmentObject"][];
    };
    MacroCategoriesResponse: {
      categories?: string[];
    };
    /**
     * @example {
     *   "actions": [
     *     {
     *       "field": "status",
     *       "value": "solved"
     *     },
     *     {
     *       "field": "priority",
     *       "value": "normal"
     *     },
     *     {
     *       "field": "type",
     *       "value": "incident"
     *     },
     *     {
     *       "field": "assignee_id",
     *       "value": "current_user"
     *     },
     *     {
     *       "field": "group_id",
     *       "value": "current_groups"
     *     },
     *     {
     *       "field": "comment_value",
     *       "value": "Thanks for your request. This issue you reported is a known issue. For more information, please visit our forums. "
     *     }
     *   ],
     *   "active": true,
     *   "created_at": "2019-09-16T02:17:38Z",
     *   "default": false,
     *   "description": null,
     *   "id": 360111062754,
     *   "position": 9999,
     *   "restriction": null,
     *   "title": "Close and redirect to topics",
     *   "updated_at": "2019-09-16T02:17:38Z",
     *   "url": "https://subdomain.zendesk.com/api/v2/macros/360111062754.json"
     * }
     */
    MacroCommonObject: {
      /** @description Each action describes what the macro will do. See [Actions reference](/documentation/ticketing/reference-guides/actions-reference) */
      actions: components["schemas"]["ActionObject"][];
      /** @description Useful for determining if the macro should be displayed */
      active?: boolean;
      /**
       * Format: date-time
       * @description The time the macro was created
       */
      created_at?: string;
      /** @description If true, the macro is a default macro */
      default?: boolean;
      /** @description The description of the macro */
      description?: string | null;
      /** @description The ID automatically assigned when a macro is created */
      id?: number;
      /** @description The position of the macro */
      position?: number;
      /** @description Access to this macro. A null value allows unrestricted access for all users in the account */
      restriction?: {
        [key: string]: unknown;
      } | null;
      /** @description The title of the macro */
      title: string;
      /**
       * Format: date-time
       * @description The time of the last update of the macro
       */
      updated_at?: string;
      /** @description A URL to access the macro's details */
      url?: string;
    };
    MacroInput: {
      /** @description Each action describes what the macro will do */
      actions: components["schemas"]["ActionObject"][];
      /** @description Useful for determining if the macro should be displayed */
      active?: boolean;
      /** @description The description of the macro */
      description?: string | null;
      /** @description Who may access this macro. Will be null when everyone in the account can access it */
      restriction?: {
        /** @description The numeric ID of the group or user */
        id?: number;
        /** @description The numeric IDs of the groups */
        ids?: number[];
        /** @description Allowed values are Group or User */
        type?: string;
        [key: string]: unknown;
      };
      /** @description The title of the macro */
      title: string;
    };
    /**
     * @example {
     *   "actions": [],
     *   "active": true,
     *   "description": "Sets the ticket status to `solved`",
     *   "id": 25,
     *   "position": 42,
     *   "restriction": {
     *     "id": 4,
     *     "type": "User"
     *   },
     *   "title": "Close and Save"
     * }
     */
    MacroObject: components["schemas"]["MacroCommonObject"] & ({
      /** @description The app installation that requires each macro, if present */
      app_installation?: string | null;
      /** @description The macro categories */
      categories?: string | null;
      /** @description Permissions for each macro */
      permissions?: string | null;
      /** @description The number of times each macro has been used in the past hour */
      usage_1h?: number;
      /** @description The number of times each macro has been used in the past week */
      usage_7d?: number;
      /** @description The number of times each macro has been used in the past day */
      usage_24h?: number;
      /** @description The number of times each macro has been used in the past thirty days */
      usage_30d?: number;
    });
    MacroResponse: {
      macro?: components["schemas"]["MacroObject"];
    };
    MacroUpdateManyInput: {
      macros?: {
          /** @description The active status of the macro (true or false) */
          active?: boolean;
          /** @description The ID of the macro to update */
          id: number;
          /** @description The new position of the macro */
          position?: number;
        }[];
    };
    MacrosResponse: {
      macros?: components["schemas"]["MacroObject"][];
    } & components["schemas"]["OffsetPaginationObject"];
    OffsetPaginationObject: {
      /** @description the total record count */
      count?: number;
      /**
       * Format: url
       * @description the URL of the next page
       */
      next_page?: string | null;
      /**
       * Format: url
       * @description the URL of the previous page
       */
      previous_page?: string | null;
    };
    /**
     * @example {
     *   "active": true,
     *   "created_at": "2012-10-16T16:04:06Z",
     *   "description": "Description of Custom Field",
     *   "id": 7,
     *   "key": "custom_field_1",
     *   "position": 9999,
     *   "raw_description": "{{dc.my_description}}",
     *   "raw_title": "Custom Field 1",
     *   "regexp_for_validation": null,
     *   "title": "Custom Field 1",
     *   "type": "text",
     *   "updated_at": "2012-10-16T16:04:06Z",
     *   "url": "https://company.zendesk.com/api/v2/organization_fields/7.json"
     * }
     */
    OrganizationFieldObject: components["schemas"]["CustomFieldObject"];
    OrganizationFieldResponse: {
      organization_field?: components["schemas"]["OrganizationFieldObject"];
    };
    OrganizationFieldsResponse: {
      /** @description Total count of records retrieved */
      count?: number;
      /** @description URL of the next page */
      next_page?: string | null;
      organization_fields?: components["schemas"]["OrganizationFieldObject"][];
      /** @description URL of the previous page */
      previous_page?: string | null;
    };
    /**
     * @example {
     *   "created_at": "2009-05-13T00:07:08Z",
     *   "default": true,
     *   "id": 4,
     *   "organization_id": 12,
     *   "organization_name": "first organization",
     *   "updated_at": "2011-07-22T00:11:12Z",
     *   "url": "https://example.zendesk.com/api/v2/organization_memberships/4.json",
     *   "user_id": 29,
     *   "view_tickets": true
     * }
     */
    OrganizationMembershipObject: {
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description Denotes whether this is the default organization membership for the user. If false, returns `null` */
      default: boolean | null;
      /** @description Automatically assigned when the membership is created */
      id?: number;
      /** @description The ID of the organization associated with this user, in this membership */
      organization_id: number;
      /** @description The name of the organization associated with this user, in this membership */
      organization_name?: string;
      /**
       * Format: date-time
       * @description When this record last got updated
       */
      updated_at?: string;
      /** @description The API url of this membership */
      url?: string;
      /** @description The ID of the user for whom this memberships belongs */
      user_id: number;
      /** @description Denotes whether the user can or cannot have access to all organization's tickets. */
      view_tickets?: boolean;
    };
    OrganizationMembershipResponse: {
      organization_membership?: components["schemas"]["OrganizationMembershipObject"];
    };
    OrganizationMembershipsResponse: {
      organization_memberships?: components["schemas"]["OrganizationMembershipObject"][];
    };
    OrganizationMetadataObject: {
      /** @description The number of tickets for the organization */
      tickets_count?: number;
      /** @description The number of users for the organization */
      users_count?: number;
    };
    /**
     * @example {
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "details": "This is a kind of organization",
     *   "domain_names": [
     *     "example.com",
     *     "test.com"
     *   ],
     *   "external_id": "ABC123",
     *   "group_id": null,
     *   "id": 35436,
     *   "name": "One Organization",
     *   "notes": "",
     *   "organization_fields": {
     *     "org_decimal": 5.2,
     *     "org_dropdown": "option_1"
     *   },
     *   "shared_comments": true,
     *   "shared_tickets": true,
     *   "tags": [
     *     "enterprise",
     *     "other_tag"
     *   ],
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/organizations/35436.json"
     * }
     */
    OrganizationObject: {
      /** @description The time the organization was created */
      created_at?: string;
      /** @description Any details obout the organization, such as the address */
      details?: string | null;
      /** @description An array of domain names associated with this organization */
      domain_names?: string[];
      /** @description A unique external id to associate organizations to an external record. The id is case-insensitive. For example, "company1" and "Company1" are considered the same */
      external_id?: string | null;
      /** @description New tickets from users in this organization are automatically put in this group */
      group_id?: number | null;
      /** @description Automatically assigned when the organization is created */
      id?: number;
      /** @description A unique name for the organization */
      name?: string;
      /** @description Any notes you have about the organization */
      notes?: string | null;
      /** @description Custom fields for this organization. See [Custom organization fields](/api-reference/ticketing/organizations/organizations/#custom-organization-fields) */
      organization_fields?: ({
        [key: string]: string | number;
      }) | null;
      /** @description End users in this organization are able to comment on each other's tickets */
      shared_comments?: boolean;
      /** @description End users in this organization are able to see each other's tickets */
      shared_tickets?: boolean;
      /** @description The tags of the organization */
      tags?: string[];
      /** @description The time of the last update of the organization */
      updated_at?: string;
      /** @description The API url of this organization */
      url?: string;
    };
    OrganizationResponse: {
      organization?: components["schemas"]["OrganizationObject"];
    };
    OrganizationSubscriptionCreateRequest: {
      organization_subscription?: components["schemas"]["OrganizationSubscriptionInput"];
    };
    OrganizationSubscriptionInput: {
      /** @description The ID of the organization */
      organization_id?: number;
      /** @description The ID of the user */
      user_id?: number;
    };
    /**
     * Organization Subscriptions
     * @example {
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "id": 1234,
     *   "organization_id": 32,
     *   "user_id": 482
     * }
     */
    OrganizationSubscriptionObject: {
      /**
       * Format: date-time
       * @description The date the organization subscription was created
       */
      created_at?: string;
      /** @description The ID of the organization subscription */
      id?: number;
      /** @description The ID of the organization */
      organization_id?: number;
      /** @description The ID of the user */
      user_id?: number;
    };
    OrganizationSubscriptionResponse: {
      organization_subscription?: components["schemas"]["OrganizationSubscriptionObject"];
    };
    OrganizationSubscriptionsResponse: components["schemas"]["OffsetPaginationObject"] & {
      /** @description An array of organization subscriptions */
      organization_subscriptions?: components["schemas"]["OrganizationSubscriptionObject"][];
    };
    OrganizationsRelatedResponse: {
      organization_related?: components["schemas"]["OrganizationMetadataObject"];
    };
    OrganizationsResponse: {
      count?: number;
      next_page?: string | null;
      organizations?: components["schemas"]["OrganizationObject"][];
      previous_page?: string | null;
    };
    Pagination: {
      links?: {
        next?: string;
        prev?: string;
      };
      meta?: {
        after_cursor?: string;
        before_cursor?: string;
        has_more?: boolean;
      };
    };
    PushNotificationDevicesInput: string[];
    PushNotificationDevicesRequest: {
      push_notification_devices?: components["schemas"]["PushNotificationDevicesInput"];
    };
    /**
     * @example {
     *   "created_at": "2023-11-27T09:03:59Z",
     *   "definition": {
     *     "all": [
     *       {
     *         "field": "priority",
     *         "operator": "is",
     *         "value": "urgent"
     *       }
     *     ],
     *     "any": []
     *   },
     *   "description": "Queue description",
     *   "id": "01HG80ATNNZK1N7XRFVKX48XD6",
     *   "name": "New queue with valid definition",
     *   "order": 1,
     *   "primary_groups": {
     *     "count": 2,
     *     "groups": [
     *       {
     *         "id": 6784729637757,
     *         "name": "EWR"
     *       },
     *       {
     *         "id": 5399674286077,
     *         "name": "test"
     *       }
     *     ]
     *   },
     *   "priority": 1,
     *   "secondary_groups": {
     *     "count": 0,
     *     "groups": []
     *   },
     *   "updated_at": "2023-11-27T09:03:59Z",
     *   "url": "https://company.zendesk.com/api/v2/queues/01HG80ATNNZK1N7XRFVKX48XD6.json"
     * }
     */
    QueueObject: {
      /**
       * Format: date-time
       * @description The time the queue was created
       */
      created_at?: string;
      /** @description Conditions when queue could be applied */
      definition?: {
        all?: {
            field?: string;
            operator?: string;
            value?: string;
          }[];
        any?: {
            field?: string;
            operator?: string;
            value?: string;
          }[];
      };
      /** @description The description of the queue */
      description?: string;
      /** @description Automatically assigned when creating queue */
      id?: string;
      /** @description The name of the queue */
      name?: string;
      /** @description The queue-applied order */
      order?: number;
      /** @description Primary group ids linked to the queue */
      primary_groups?: {
        count?: number;
        groups?: {
            id?: number;
            name?: string;
          }[];
      };
      /** @description The queue-applied priority */
      priority?: number;
      /** @description Secondary group ids linked to the queue */
      secondary_groups?: {
        count?: number;
        groups?: {
            id?: number;
            name?: string;
          }[];
      };
      /**
       * Format: date-time
       * @description The time of the queue's last update
       */
      updated_at?: string;
      /** @description The API URL of the queue */
      url?: string;
    };
    QueueResponse: {
      queue?: components["schemas"]["QueueObject"];
    };
    QueuesResponse: {
      queues?: components["schemas"]["QueueObject"][];
    };
    RecoverSuspendedTicketResponse: {
      ticket?: components["schemas"]["SuspendedTicketObject"][];
    };
    RecoverSuspendedTicketUnprocessableContentResponse: {
      ticket?: components["schemas"]["SuspendedTicketObject"][];
    };
    RecoverSuspendedTicketsResponse: {
      tickets?: components["schemas"]["SuspendedTicketObject"][];
    };
    RelationshipFilterDefinition: {
      conditions_all?: components["schemas"]["TriggerConditionDefinitionObjectAll"][];
      conditions_any?: components["schemas"]["TriggerConditionDefinitionObjectAny"][];
    };
    RelationshipFilterDefinitionResponse: {
      definitions?: components["schemas"]["RelationshipFilterDefinition"];
    };
    RenewSessionResponse: {
      /** @description A token of authenticity for the request */
      authenticity_token?: string;
    };
    /**
     * @example {
     *   "assignee_id": 72983,
     *   "can_be_solved_by_me": false,
     *   "collaborator_ids": [],
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "description": "The fire is very colorful.",
     *   "due_at": "2011-05-24T12:00:00Z",
     *   "group_id": 8665,
     *   "id": 35436,
     *   "organization_id": 509974,
     *   "priority": "normal",
     *   "requester_id": 1462,
     *   "status": "open",
     *   "subject": "Help, my printer is on fire!",
     *   "ticket_form_id": 2,
     *   "type": "problem",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/requests/35436.json",
     *   "via": {
     *     "channel": "web"
     *   }
     * }
     */
    RequestObject: {
      /** @description The id of the assignee if the field is visible to end users */
      assignee_id?: number;
      /** @description If true, an end user can mark the request as solved. See [Update Request](/api-reference/ticketing/tickets/ticket-requests/#update-request) */
      can_be_solved_by_me?: boolean;
      /** @description The ids of users currently CC'ed on the ticket */
      collaborator_ids?: readonly number[];
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description Custom fields for the request. See [Setting custom field values](/api-reference/ticketing/tickets/tickets/#setting-custom-field-values) in the Tickets doc */
      custom_fields?: {
          id?: number;
          value?: string;
        }[];
      /** @description The custom ticket status id of the ticket */
      custom_status_id?: number;
      /** @description Read-only first comment on the request. When [creating a request](#create-request), use `comment` to set the description */
      description?: string;
      /**
       * Format: date-time
       * @description When the task is due (only applies if the request is of type "task")
       */
      due_at?: string;
      /** @description The ids of users who are currently email CCs on the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) in the Support Help Center */
      email_cc_ids?: readonly number[];
      /** @description The id of the original ticket if this request is a follow-up ticket. See [Create Request](#create-request) */
      followup_source_id?: number;
      /** @description The id of the assigned group if the field is visible to end users */
      group_id?: number;
      /** @description Automatically assigned when creating requests */
      id?: number;
      /** @description Is true if any comments are public, false otherwise */
      is_public?: boolean;
      /** @description The organization of the requester */
      organization_id?: number;
      /** @description The priority of the request, "low", "normal", "high", "urgent" */
      priority?: string;
      /** @description The original recipient e-mail address of the request */
      recipient?: string;
      /** @description The id of the requester */
      requester_id?: number;
      /** @description Whether or not request is solved (an end user can set this if "can_be_solved_by_me", above, is true for that user) */
      solved?: boolean;
      /** @description The state of the request, "new", "open", "pending", "hold", "solved", "closed" */
      status?: string;
      /** @description The value of the subject field for this request if the subject field is visible to end users; a truncated version of the description otherwise */
      subject: string;
      /** @description The numeric id of the ticket form associated with this request if the form is visible to end users - only applicable for enterprise accounts */
      ticket_form_id?: number;
      /** @description The type of the request, "question", "incident", "problem", "task" */
      type?: string;
      /**
       * Format: date-time
       * @description When this record last got updated
       */
      updated_at?: string;
      /** @description The API url of this request */
      url?: string;
      via?: components["schemas"]["TicketAuditViaObject"];
    };
    RequestResponse: {
      request?: components["schemas"]["RequestObject"];
    };
    RequestsResponse: {
      requests?: components["schemas"]["RequestObject"][];
    };
    /**
     * @example {
     *   "created_at": "2011-07-20T22:55:29Z",
     *   "id": 35436,
     *   "resources": [
     *     {
     *       "deleted": false,
     *       "identifier": "email_on_ticket_solved",
     *       "resource_id": 10824486485524,
     *       "type": "triggers"
     *     },
     *     {
     *       "deleted": false,
     *       "identifier": "support_description",
     *       "resource_id": 10824486482580,
     *       "type": "ticket_fields"
     *     }
     *   ],
     *   "updated_at": "2011-07-20T22:55:29Z"
     * }
     */
    ResourceCollectionObject: {
      /**
       * Format: date-time
       * @description When the resource collection was created
       */
      created_at?: string;
      /** @description id for the resource collection. Automatically assigned upon creation */
      id?: number;
      /** @description Array of resource metadata objects. See [Resource objects](#resource-objects) */
      resources?: readonly {
          deleted?: boolean;
          identifier?: string;
          resource_id?: number;
          type?: string;
        }[];
      /**
       * Format: date-time
       * @description Last time the resource collection was updated
       */
      updated_at?: string;
    };
    ResourceCollectionResponse: {
      resource_collection?: components["schemas"]["ResourceCollectionObject"];
    };
    ResourceCollectionsResponse: {
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
      resource_collections?: components["schemas"]["ResourceCollectionObject"][];
    };
    ReverseLookupResponse: components["schemas"]["UsersResponse"];
    SLAPoliciesResponse: {
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
      sla_policies?: components["schemas"]["SLAPolicyObject"][];
    };
    SLAPolicyFilterConditionObject: {
      /** @description The name of a ticket field */
      field?: string;
      /** @description A comparison operator */
      operator?: string;
      /** @description The value of a ticket field */
      value?: string | ((string | number)[]);
    };
    SLAPolicyFilterDefinitionResponse: {
      definitions?: {
        all?: ({
            group?: string;
            operators?: {
                title?: string;
                value?: string;
              }[];
            target?: string | null;
            title?: string;
            value?: string;
            values?: {
              list?: ({
                  title?: string;
                  value?: string | null;
                })[];
              type?: string;
            };
          })[];
        any?: ({
            group?: string;
            operators?: {
                title?: string;
                value?: string;
              }[];
            target?: string | null;
            title?: string;
            value?: string;
            values?: {
              list?: ({
                  title?: string;
                  value?: string | null;
                })[];
              type?: string;
            };
          })[];
      };
    };
    /** @description An object that describes the conditions that a ticket must match in order for an SLA policy to be applied to that ticket. See [Filter](#filter). */
    SLAPolicyFilterObject: {
      all?: components["schemas"]["SLAPolicyFilterConditionObject"][];
      any?: components["schemas"]["SLAPolicyFilterConditionObject"][];
    };
    SLAPolicyMetricObject: {
      /** @description Whether the metric targets are being measured in business hours or calendar hours */
      business_hours?: boolean;
      /** @description The definition of the time that is being measured */
      metric?: string;
      /** @description Priority that a ticket must match */
      priority?: string;
      /** @description The time within which the end-state for a metric should be met */
      target?: number;
    };
    /**
     * @example {
     *   "created_at": "2015-03-17T22:50:26Z",
     *   "description": "Organizations: Silver Plan",
     *   "filter": {
     *     "all": [
     *       {
     *         "field": "type",
     *         "operator": "is",
     *         "value": "incident"
     *       },
     *       {
     *         "field": "via_id",
     *         "operator": "is",
     *         "value": "4"
     *       },
     *       {
     *         "field": "custom_status_id",
     *         "operator": "includes",
     *         "value": [
     *           "1",
     *           "2"
     *         ]
     *       }
     *     ],
     *     "any": []
     *   },
     *   "id": 25,
     *   "policy_metrics": [
     *     {
     *       "business_hours": false,
     *       "metric": "first_reply_time",
     *       "priority": "low",
     *       "target": 60
     *     }
     *   ],
     *   "position": 3,
     *   "title": "Silver Plan",
     *   "updated_at": "2015-03-17T22:50:26Z",
     *   "url": "https://company.zendesk.com/api/v2/slas/policies/25.json"
     * }
     */
    SLAPolicyObject: {
      /**
       * Format: date-time
       * @description The time the SLA policy was created
       */
      created_at?: string;
      /** @description The description of the SLA policy */
      description?: string;
      filter: components["schemas"]["SLAPolicyFilterObject"];
      /** @description Automatically assigned when created */
      id?: number;
      /** @description Array of [Policy Metric](#policy-metric) objects */
      policy_metrics?: components["schemas"]["SLAPolicyMetricObject"][];
      /** @description Position of the SLA policy that determines the order they will be matched. If not specified, the SLA policy is added as the last position */
      position?: number;
      /** @description The title of the SLA policy */
      title: string;
      /**
       * Format: date-time
       * @description The time of the last update of the SLA policy
       */
      updated_at?: string;
      /** @description URL of the SLA Policy reacord */
      url?: string;
    };
    SLAPolicyResponse: {
      sla_policy?: components["schemas"]["SLAPolicyObject"];
    };
    /**
     * @example {
     *   "assignee_id": 135,
     *   "created_at": "2011-07-20T22:55:29Z",
     *   "group_id": 44,
     *   "id": 35436,
     *   "requester_id": 7881,
     *   "score": "good",
     *   "ticket_id": 208,
     *   "updated_at": "2011-07-20T22:55:29Z",
     *   "url": "https://company.zendesk.com/api/v2/satisfaction_ratings/62.json"
     * }
     */
    SatisfactionRatingObject: {
      /** @description The id of agent assigned to at the time of rating */
      assignee_id: number;
      /** @description The comment received with this rating, if available */
      comment?: string;
      /**
       * Format: date-time
       * @description The time the satisfaction rating got created
       */
      created_at?: string;
      /** @description The id of group assigned to at the time of rating */
      group_id: number;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description The reason for a bad rating given by the requester in a follow-up question. Satisfaction reasons must be [enabled](https://support.zendesk.com/hc/en-us/articles/223152967) */
      reason?: string;
      /** @description The default reasons the user can select from a list menu for giving a negative rating. See [Reason codes](/api-reference/ticketing/ticket-management/satisfaction_reasons/#reason-codes) in the Satisfaction Reasons API. Can only be set on ratings with a `score` of "bad". Responses don't include this property */
      reason_code?: number;
      /** @description id for the reason the user gave a negative rating. Can only be set on ratings with a `score` of "bad". To get a descriptive value for the id, use the [Show Reason for Satisfaction Rating](/api-reference/ticketing/ticket-management/satisfaction_reasons/#show-reason-for-satisfaction-rating) endpoint */
      reason_id?: number;
      /** @description The id of ticket requester submitting the rating */
      requester_id: number;
      /** @description The rating "offered", "unoffered", "good" or "bad" */
      score: string;
      /** @description The id of ticket being rated */
      ticket_id: number;
      /**
       * Format: date-time
       * @description The time the satisfaction rating got updated
       */
      updated_at?: string;
      /** @description The API url of this rating */
      url?: string;
    };
    SatisfactionRatingResponse: {
      satisfaction_rating?: components["schemas"]["SatisfactionRatingObject"][];
    };
    SatisfactionRatingsCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    SatisfactionRatingsResponse: {
      satisfaction_ratings?: components["schemas"]["SatisfactionRatingObject"][];
    };
    /**
     * @example {
     *   "created_at": "2011-07-20T22:55:29Z",
     *   "deleted_at": "2012-03-12T12:45:32Z",
     *   "id": 35436,
     *   "raw_value": "{{dc.reason_code_1003}}",
     *   "reason_code": 1003,
     *   "updated_at": "2011-07-20T22:55:29Z",
     *   "url": "https://example.zendesk.com/api/v2/satisfaction_reasons/35436.json",
     *   "value": "Agent did not respond quickly"
     * }
     */
    SatisfactionReasonObject: {
      /**
       * Format: date-time
       * @description The time the reason was created
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The time the reason was deleted
       */
      deleted_at?: string;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description The dynamic content placeholder, if present, or the current "value", if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_value?: string;
      /** @description An account-level code for referencing the reason. Custom reasons are assigned an auto-incrementing integer (non-system reason codes begin at 1000). See [Reason codes](#reason-codes) */
      reason_code?: number;
      /**
       * Format: date-time
       * @description The time the reason was updated
       */
      updated_at?: string;
      /** @description API URL for the resource */
      url?: string;
      /** @description Translated value of the reason in the account locale */
      value: string;
    };
    SatisfactionReasonResponse: {
      reason?: components["schemas"]["SatisfactionReasonObject"][];
    };
    SatisfactionReasonsResponse: {
      reasons?: components["schemas"]["SatisfactionReasonObject"][];
    };
    SearchCountResponse: {
      count?: number;
    };
    /**
     * @example {
     *   "facets": null,
     *   "links": {
     *     "next": "https://example.zendesk.com/api/v2/search/export.json?filter%5Btype%5D=ticket&page%5Bafter%5D=eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ%3D%3D&page%5Bsize%5D=100&query=hello%26page%5Bsize%5D%3D100%26filter%5Btype%5D%3Dticket",
     *     "prev": null
     *   },
     *   "meta": {
     *     "after_cursor": "eyJmaWVsZCI6ImNyZWF0ZWRfYXQiLCJkZXNjIjp0cnVlLCJ0aWVCcmVha0ZpZWxkIjoiaWQiLCJ0aWVCcmVha0Rlc2MiOmZhbHNlLCJzb3J0VmFsdWVzIjpudWxsLCJleHBvcnRlZFRodXNGYXIiOjAsInNlc3Npb25TdGFydCI6MTYwNzAzOTI1Mzk4NSwiY3JlYXRlZEF0IjoxNjA3MDM5MjUzOTg1LCJzYWx0ZWRSZXF1ZXN0SGFzaCI6LTQ5ODM0ODc3LCJzYWx0ZWRDdXJzb3JIYXNoIjotMjQwMzQ4MjgwfQ==",
     *     "before_cursor": null,
     *     "has_more": true
     *   },
     *   "results": []
     * }
     */
    SearchExportResponse: {
      /** @description The facets corresponding to the search query */
      facets?: string | null;
      /** @description The links to the previous and next entries via the cursor ids in the metadata. */
      links?: {
        /** @description The url to the next entry via the cursor. */
        next?: string | null;
        /** @description The url to the previous entry via the cursor. */
        prev?: string | null;
      };
      /** @description Metadata for the export query response. */
      meta?: {
        /** @description The cursor id for the next object. */
        after_cursor?: string | null;
        /** @description The cursor id for the previous object. */
        before_cursor?: string | null;
        /** @description Whether there are more items yet to be returned by the cursor. */
        has_more?: boolean;
      };
      /** @description May consist of tickets, users, groups, or organizations, as specified by the `result_type` property in each result object */
      results?: readonly components["schemas"]["SearchResultObject"][];
    };
    /**
     * @example {
     *   "count": 1,
     *   "facets": null,
     *   "next_page": null,
     *   "previous_page": null,
     *   "results": [
     *     {
     *       "created_at": "2018-04-06T03:17:05Z",
     *       "default": false,
     *       "deleted": false,
     *       "description": "",
     *       "id": 1835972,
     *       "name": "Ragtail",
     *       "result_type": "group",
     *       "updated_at": "2018-04-06T03:17:05Z",
     *       "url": "https://example.zendesk.com/api/v2/groups/1835972.json"
     *     }
     *   ]
     * }
     */
    SearchResponse: {
      /** @description The number of resources returned by the query corresponding to this page of results in the paginated response */
      count?: number;
      /** @description The facets corresponding to the search query */
      facets?: string | null;
      /** @description URL to the next page of results */
      next_page?: string | null;
      /** @description URL to the previous page of results */
      previous_page?: string | null;
      /** @description May consist of tickets, users, groups, or organizations, as specified by the `result_type` property in each result object */
      results?: readonly components["schemas"]["SearchResultObject"][];
    };
    SearchResultObject: {
      /** @description When the resource was created */
      created_at?: string;
      /** @description Flag to indicate whether this is the default resource */
      default?: boolean;
      /** @description Flag to indicate whether or not resource has been deleted */
      deleted?: boolean;
      /** @description The description of the resource */
      description?: string;
      /** @description The ID of the resource */
      id?: number;
      /** @description The name of the resource */
      name?: string;
      /** @description The type of the resource */
      result_type?: string;
      /** @description When the resource was last updated */
      updated_at?: string;
      /** @description The url of the resource */
      url?: string;
    };
    /**
     * @example {
     *   "authenticated_at": "2014-11-18T17:24:29Z",
     *   "id": 3432,
     *   "last_seen_at": "2014-11-18T17:30:52Z",
     *   "url": "https://company.zendesk.com/api/v2/users/12345/sessions/3432.json",
     *   "user_id": 12345
     * }
     */
    SessionObject: {
      /** @description When the session was created */
      authenticated_at?: string | null;
      /** @description Automatically assigned when the session is created */
      id: number;
      /** @description The last approximate time this session was seen. This does not update on every request. */
      last_seen_at?: string | null;
      /** @description The API URL of this session */
      url?: string | null;
      /** @description The id of the user */
      user_id?: number | null;
    };
    SessionResponse: {
      session?: components["schemas"]["SessionObject"][];
    };
    SessionsResponse: {
      sessions?: components["schemas"]["SessionObject"][];
    };
    /**
     * @example {
     *   "created_at": "2012-02-20T22:55:29Z",
     *   "id": 88335,
     *   "name": "Ticket Sharing",
     *   "partner_name": "jira",
     *   "status": "accepted",
     *   "type": "inbound",
     *   "updated_at": "2013-02-20T22:55:29Z",
     *   "url": "https://company.zendesk.com/api/v2/agreements/88335.json"
     * }
     */
    SharingAgreementObject: {
      /**
       * Format: date-time
       * @description The time the record was created
       */
      created_at?: string;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description Name of this sharing agreement */
      name?: string;
      /** @description Can be one of the following: "jira", null */
      partner_name?: string | null;
      /** @description Subdomain of the remote account or null if not associated with an account */
      remote_subdomain?: string;
      /** @description Can be one of the following: "accepted", "declined", "pending", "inactive", "failed", "ssl_error", "configuration_error" */
      status?: string;
      /** @description Can be one of the following: "inbound", "outbound" */
      type?: string;
      /**
       * Format: date-time
       * @description The time the record was updated
       */
      updated_at?: string;
      /** @description URL of the sharing agreement record */
      url?: string;
    };
    SharingAgreementResponse: {
      sharing_agreement?: components["schemas"]["SharingAgreementObject"];
    };
    SharingAgreementsResponse: {
      sharing_agreements?: components["schemas"]["SharingAgreementObject"][];
    };
    SkillBasedRoutingAttributeDefinitions: {
      definitions?: {
        conditions_all?: {
            subject?: string;
            title?: string;
          }[];
        conditions_any?: {
            subject?: string;
            title?: string;
          }[];
      };
    };
    /**
     * @example {
     *   "created_at": "2017-12-01T19:29:31Z",
     *   "id": "15821cba-7326-11e8-b07e-950ba849aa27",
     *   "name": "color",
     *   "updated_at": "2017-12-01T19:29:31Z",
     *   "url": "https://{subdomain}.zendesk.com/api/v2/routing/attributes/15821cba-7326-11e8-b07e-950ba849aa27.json"
     * }
     */
    SkillBasedRoutingAttributeObject: {
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description Automatically assigned when an attribute is created */
      id?: string;
      /** @description The name of the attribute */
      name: string;
      /**
       * Format: date-time
       * @description When this record was last updated
       */
      updated_at?: string;
      /** @description URL of the attribute */
      url?: string;
    };
    SkillBasedRoutingAttributeResponse: {
      attribute?: components["schemas"]["SkillBasedRoutingAttributeObject"];
    };
    SkillBasedRoutingAttributeValueObject: {
      /** @description Id of the associated attribute */
      attribute_id?: string;
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description Automatically assigned when an attribute value is created */
      id?: string;
      /** @description The name of the attribute value */
      name?: string;
      /**
       * Format: date-time
       * @description When this record was last updated
       */
      updated_at?: string;
      /** @description URL of the attribute value */
      url?: string;
    };
    SkillBasedRoutingAttributeValueResponse: {
      attribute_value?: components["schemas"]["SkillBasedRoutingAttributeValueObject"];
    };
    SkillBasedRoutingAttributeValuesResponse: {
      attribute_values?: components["schemas"]["SkillBasedRoutingAttributeValueObject"][];
    };
    SkillBasedRoutingAttributesResponse: {
      attributes?: components["schemas"]["SkillBasedRoutingAttributeObject"][];
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
    };
    SkillBasedRoutingTicketFulfilledResponse: {
      fulfilled_ticket_ids?: number[];
    };
    /**
     * @example {
     *   "brand_id": 123,
     *   "cname_status": "verified",
     *   "created_at": "2015-07-20T22:55:29Z",
     *   "default": true,
     *   "domain_verification_status": "verified",
     *   "email": "support@example.zendesk.com",
     *   "forwarding_status": "unknown",
     *   "id": 35436,
     *   "name": "all",
     *   "spf_status": "verified",
     *   "updated_at": "2016-09-21T20:15:20Z"
     * }
     */
    SupportAddressObject: {
      /** @description The ID of the [brand](/api-reference/ticketing/account-configuration/brands/) */
      brand_id?: number;
      /**
       * @description Whether all of the required CNAME records are set. Possible values: "unknown", "verified", "failed"
       * @enum {string}
       */
      cname_status?: "unknown" | "verified" | "failed";
      /**
       * Format: date-time
       * @description When the address was created
       */
      created_at?: string;
      /** @description Whether the address is the account's default support address */
      default?: boolean;
      /**
       * @description Verification statuses for the domain and CNAME records. Possible types: "verified", "failed"
       * @enum {string}
       */
      dns_results?: "verified" | "failed";
      /** @description Verification string to be added as a TXT record to the domain. Possible types: string or null. */
      domain_verification_code?: string;
      /**
       * @description Whether the domain verification record is valid. Possible values: "unknown", "verified", "failed"
       * @enum {string}
       */
      domain_verification_status?: "unknown" | "verified" | "failed";
      /** @description The email address. You can't change the email address of an existing support address. */
      email: string;
      /**
       * @description Status of email forwarding. Possible values: "unknown", "waiting", "verified", or "failed"
       * @enum {string}
       */
      forwarding_status?: "unknown" | "waiting" | "verified" | "failed";
      /** @description Automatically assigned when created */
      id?: number;
      /** @description The name for the address */
      name?: string;
      /**
       * @description Whether the SPF record is set up correctly. Possible values: "unknown", "verified", "failed"
       * @enum {string}
       */
      spf_status?: "unknown" | "verified" | "failed";
      /**
       * Format: date-time
       * @description When the address was updated
       */
      updated_at?: string;
    };
    SupportAddressResponse: {
      recipient_address?: components["schemas"]["SupportAddressObject"];
    };
    SupportAddressesResponse: {
      recipient_addresses?: components["schemas"]["SupportAddressObject"][];
    };
    /**
     * @example {
     *   "attachments": [],
     *   "author": {
     *     "email": "styx@example.com",
     *     "id": 1111,
     *     "name": "Mr. Roboto"
     *   },
     *   "brand_id": 123,
     *   "cause": "Detected as spam",
     *   "cause_id": 0,
     *   "content": "Out Of Office Reply",
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "error_messages": null,
     *   "id": 435,
     *   "message_id": "Spambot@spam.co.evil",
     *   "recipient": "john@example.com",
     *   "subject": "Help, my printer is on fire!",
     *   "ticket_id": 67321,
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://example.zendesk.com/api/v2/tickets/35436.json",
     *   "via": {
     *     "channel": "email",
     *     "source": {
     *       "from": {
     *         "address": "totallylegit@emailaddress.com",
     *         "name": "TotallyLegit"
     *       },
     *       "rel": null,
     *       "to": {
     *         "address": "support@example.zendesk.com",
     *         "name": "Example Account"
     *       }
     *     }
     *   }
     * }
     */
    SuspendedTicketObject: {
      /** @description The attachments, if any associated to this suspended ticket. See [Attachments](/api-reference/ticketing/tickets/ticket-attachments/) */
      attachments?: (readonly components["schemas"]["AttachmentObject"][]) | null;
      /** @description The author id (if available), name and email */
      author?: components["schemas"]["AuthorObject"];
      /** @description The id of the brand this ticket is associated with. Only applicable for Enterprise accounts */
      brand_id?: number;
      /** @description Why the ticket was suspended */
      cause?: string;
      /** @description The ID of the cause */
      cause_id?: number;
      /** @description The content that was flagged */
      content?: string;
      /**
       * Format: date-time
       * @description The ticket ID this suspended email is associated with, if available
       */
      created_at?: string;
      /** @description The error messages if any associated to this suspended ticket */
      error_messages?: (readonly Record<string, never>[]) | null;
      /** @description Automatically assigned */
      id?: number;
      /** @description The ID of the email, if available */
      message_id?: string;
      /** @description The original recipient e-mail address of the ticket */
      recipient?: string;
      /** @description The value of the subject field for this ticket */
      subject?: string;
      /** @description The ticket ID this suspended email is associated with, if available */
      ticket_id?: number;
      /**
       * Format: date-time
       * @description When the ticket was assigned
       */
      updated_at?: string;
      /** @description The API url of this ticket */
      url?: string;
      via?: components["schemas"]["ViaObject"];
    };
    SuspendedTicketResponse: {
      suspended_ticket?: components["schemas"]["SuspendedTicketObject"][];
    };
    SuspendedTicketsAttachmentsResponse: {
      upload?: {
        attachments?: components["schemas"]["AttachmentObject"][];
        /** @description Token for subsequent request */
        token?: string;
      };
    };
    SuspendedTicketsExportResponse: {
      export?: {
        status?: string;
        view_id?: string;
      };
    };
    SuspendedTicketsResponse: {
      suspended_tickets?: components["schemas"]["SuspendedTicketObject"][];
    };
    SystemFieldOptionObject: {
      /** @description Name of the system field option */
      name?: string;
      /** @description Value of the system field option */
      value?: string;
    };
    TagCountObject: {
      /** @description The time that the count value was last refreshed */
      refreshed_at?: string;
      /** @description The count of tags created in the last 24 hours */
      value?: number;
    };
    TagCountResponse: {
      count?: components["schemas"]["TagCountObject"];
    };
    TagListTagObject: {
      /** @description The number of tags */
      count?: number;
      /** @description A name for the tag */
      name?: string;
    };
    TagUrlObject: {
      /** @description The url associated to the api request */
      url?: string;
    };
    TagsByObjectIdResponse: {
      /** @description An array of strings */
      tags: string[];
    };
    TagsResponse: {
      /** @description The number of pages */
      count?: number;
      /** @description The url of the previous page */
      next_page?: string | null;
      /** @description The url of the next page */
      previous_page?: string | null;
      tags?: components["schemas"]["TagListTagObject"][];
    };
    TargetBasecamp: {
      /** @description Can be filled if it is a "message" resource */
      message_id?: string;
      /** @description The 37Signals password for the Basecamp account (only writable) */
      password?: string;
      /** @description The ID of the project in Basecamp where updates should be pushed */
      project_id: string;
      /** @description "todo" or "message" */
      resource: string;
      /** @description The URL of your Basecamp account, including protocol and path */
      target_url: string;
      /** @description Can be filled if it is a "todo" resource */
      todo_list_id?: string;
      /** @description Get the API token from My info > Show your tokens > Token for feed readers or the Basecamp API in your Basecamp account */
      token: string;
      /** @description The 37Signals username of the account you use to log in to Basecamp */
      username?: string;
    };
    TargetCampfire: {
      preserve_format?: boolean;
      room: string;
      ssl?: boolean;
      subdomain: string;
      token: string;
    };
    TargetClickatell: {
      api_id: string;
      /** @description Read-only */
      attribute?: string;
      from?: string;
      /** @description Read-only */
      method?: string;
      /** @description only writable */
      password: string;
      /** @description Read-only */
      target_url?: string;
      to: string;
      us_small_business_account?: string;
      username: string;
    };
    TargetCommonFields: {
      /** @description Whether or not the target is activated */
      active?: boolean;
      /**
       * Format: date-time
       * @description The time the target was created
       */
      created_at?: string;
      /** @description Automatically assigned when created */
      id?: number;
      /** @description A name for the target */
      title: string;
      /** @description A pre-defined target, such as "basecamp_target". See the additional attributes for the type that follow */
      type: string;
    };
    TargetEmail: {
      email: string;
      subject: string;
    };
    /**
     * @example {
     *   "consecutive_failure_count": 1,
     *   "created_at": "2017-09-05T10:38:52Z",
     *   "id": 6001326,
     *   "raw_request": "GET /api/v2/tickets.json HTTP/1.1\r\nUser-Agent: Zendesk Target\r\n ...",
     *   "raw_response": "HTTP/1.1 401 Unauthorized\r\nServer: nginx\r\n ...",
     *   "status_code": 401,
     *   "target_name": "My URL Target",
     *   "url": "https://example.zendesk.com/api/v2/target_failures/6001326.json"
     * }
     */
    TargetFailureObject: {
      /** @description Number of times the target failed consecutively */
      consecutive_failure_count?: number;
      /**
       * Format: date-time
       * @description Time of the failure
       */
      created_at?: string;
      /** @description The ID of the target failure */
      id?: number;
      /** @description The raw message of the target request */
      raw_request?: string;
      /** @description The raw response of the failure */
      raw_response?: string;
      /** @description HTTP status code of the target failure */
      status_code?: number;
      /** @description Name of the target failure */
      target_name?: string;
      /** @description The API url of the failure record */
      url?: string;
    };
    TargetFailureResponse: {
      target_failure?: components["schemas"]["TargetFailureObject"];
    };
    TargetFailuresResponse: {
      target_failures?: components["schemas"]["TargetFailureObject"][];
    };
    TargetFlowdock: {
      api_token: string;
    };
    TargetGetSatisfaction: {
      account_name: string;
      email: string;
      /** @description only writable */
      password: string;
      target_url?: string;
    };
    TargetHTTP: {
      /** @description "application/json", "application/xml", or "application/x-www-form-urlencoded" */
      content_type: string;
      /** @description "get", "patch", "put", "post", or "delete" */
      method: string;
      /** @description only writable */
      password?: string;
      target_url: string;
      username?: string;
    };
    TargetJira: {
      /** @description only writable */
      password: string;
      target_url: string;
      username: string;
    };
    /**
     * @example {
     *   "active": false,
     *   "created_at": "2012-02-20T22:55:29Z",
     *   "id": 88335,
     *   "title": "basecamp target",
     *   "type": "basecamp_target",
     *   "url": "https://company.zendesk.com/api/v2/targets/88335.json"
     * }
     */
    TargetObject: {
      [key: string]: unknown;
    } & components["schemas"]["TargetCommonFields"] & (components["schemas"]["TargetBasecamp"] | components["schemas"]["TargetCampfire"] | components["schemas"]["TargetClickatell"] | components["schemas"]["TargetEmail"] | components["schemas"]["TargetFlowdock"] | components["schemas"]["TargetGetSatisfaction"] | components["schemas"]["TargetJira"] | components["schemas"]["TargetPivotal"] | components["schemas"]["TargetTwitter"] | components["schemas"]["TargetURL"] | components["schemas"]["TargetHTTP"] | components["schemas"]["TargetYammer"]);
    TargetPivotal: {
      owner_by?: string;
      project_id: string;
      requested_by?: string;
      story_labels?: string;
      story_title: string;
      story_type: string;
      token: string;
    };
    TargetResponse: {
      target?: components["schemas"]["TargetObject"];
    };
    TargetTwitter: {
      /** @description only writable */
      secret?: string;
      token?: string;
    };
    TargetURL: {
      attribute: string;
      /** @description "get" */
      method?: string;
      /** @description only writable */
      password?: string;
      target_url: string;
      username?: string;
    };
    TargetYammer: {
      group_id?: string;
      token?: string;
    };
    TargetsResponse: {
      targets?: components["schemas"]["TargetObject"][];
    };
    /**
     * @example {
     *   "author_id": 35436,
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "events": [
     *     {
     *       "attachments": [],
     *       "body": "Thanks for your help!",
     *       "id": 1564245,
     *       "public": true,
     *       "type": "Comment"
     *     },
     *     {
     *       "body": "Ticket #47 has been updated",
     *       "id": 1564246,
     *       "subject": "Your ticket has been updated",
     *       "type": "Notification"
     *     }
     *   ],
     *   "id": 35436,
     *   "metadata": {
     *     "custom": {
     *       "time_spent": "3m22s"
     *     },
     *     "system": {
     *       "ip_address": "184.106.40.75"
     *     }
     *   },
     *   "ticket_id": 47,
     *   "via": {
     *     "channel": "web"
     *   }
     * }
     */
    TicketAuditObject: {
      /** @description The user who created the audit */
      author_id?: number;
      /**
       * Format: date-time
       * @description The time the audit was created
       */
      created_at?: string;
      /** @description An array of the events that happened in this audit. See the [Ticket Audit events reference](/documentation/ticketing/reference-guides/ticket-audit-events-reference) */
      events?: {
          [key: string]: unknown;
        }[];
      /** @description Automatically assigned when creating audits */
      id?: number;
      /** @description Metadata for the audit, custom and system data */
      metadata?: {
        [key: string]: unknown;
      };
      /** @description The ID of the associated ticket */
      ticket_id?: number;
      via?: components["schemas"]["TicketAuditViaObject"];
    };
    TicketAuditResponse: {
      audit?: components["schemas"]["TicketAuditObject"];
    };
    /** @description Describes how the object was created. See the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference) */
    TicketAuditViaObject: {
      /** @description This tells you how the ticket or event was created. Examples: "web", "mobile", "rule", "system" */
      channel?: string;
      /** @description For some channels a source object gives more information about how or why the ticket or event was created */
      source?: {
        [key: string]: unknown;
      };
    };
    TicketAuditsCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    TicketAuditsResponse: {
      after_cursor?: string;
      after_url?: string;
      audits?: components["schemas"]["TicketAuditObject"][];
      before_cursor?: string;
      before_url?: string;
    };
    TicketAuditsResponseNoneCursor: {
      audits?: components["schemas"]["TicketAuditObject"][];
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
    };
    TicketBulkImportRequest: {
      tickets?: components["schemas"]["TicketImportInput"][];
    };
    /**
     * @example {
     *   "chat_event": {
     *     "id": 1932802680168,
     *     "type": "ChatStartedEvent",
     *     "value": {
     *       "chat_id": "2109.10502823.Sjuj2YrBpXwei",
     *       "history": [
     *         {
     *           "actor_id": 1900448983828,
     *           "actor_name": "Visitor 36044085",
     *           "actor_type": "end-user",
     *           "chat_index": 0,
     *           "timestamp": 1632470783218,
     *           "type": "ChatJoin"
     *         }
     *       ],
     *       "visitor_id": "10502823-16EkM3T6VNq7KMd"
     *     }
     *   }
     * }
     */
    TicketChatCommentRedactionResponse: {
      /** @description Chat event object */
      chat_event?: {
        /** @description Id assigned to the chat event object */
        readonly id?: number;
        /** @description Type of chat event */
        readonly type?: string;
        /** @description The value of the chat event object */
        readonly value?: {
          /** @description Id of the chat session */
          readonly chat_id?: string;
          /** @description Chat events within the chat session */
          readonly history?: {
              [key: string]: unknown;
            }[];
          /** @description Id assigned to the visitor */
          readonly visitor_id?: string;
        };
      };
    };
    /**
     * @example {
     *   "attachments": [
     *     {
     *       "content_type": "text/plain",
     *       "content_url": "https://company.zendesk.com/attachments/crash.log",
     *       "file_name": "crash.log",
     *       "id": 498483,
     *       "size": 2532,
     *       "thumbnails": []
     *     }
     *   ],
     *   "author_id": 123123,
     *   "body": "Thanks for your help!",
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "id": 1274,
     *   "metadata": {
     *     "system": {
     *       "client": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36",
     *       "ip_address": "1.1.1.1",
     *       "latitude": -37.000000000001,
     *       "location": "Melbourne, 07, Australia",
     *       "longitude": 144.0000000000002
     *     },
     *     "via": {
     *       "channel": "web",
     *       "source": {
     *         "from": {},
     *         "rel": "web_widget",
     *         "to": {}
     *       }
     *     }
     *   },
     *   "public": true,
     *   "type": "Comment"
     * }
     */
    TicketCommentObject: {
      /** @description Attachments, if any. See [Attachment](/api-reference/ticketing/tickets/ticket-attachments/) */
      attachments?: readonly components["schemas"]["AttachmentObject"][];
      /** @description The id of the ticket audit record. See [Show Audit](/api-reference/ticketing/tickets/ticket_audits/#show-audit) */
      audit_id?: number;
      /** @description The id of the comment author. See [Author id](#author-id) */
      author_id?: number;
      /** @description The comment string. See [Bodies](#bodies) */
      body?: string;
      /**
       * Format: date-time
       * @description The time the comment was created
       */
      created_at?: string;
      /** @description The comment formatted as HTML. See [Bodies](#bodies) */
      html_body?: string;
      /** @description Automatically assigned when the comment is created */
      id?: number;
      /** @description System information (web client, IP address, etc.) and comment flags, if any. See [Comment flags](#comment-flags) */
      metadata?: {
        [key: string]: unknown;
      };
      /** @description The comment presented as plain text. See [Bodies](#bodies) */
      plain_body?: string;
      /** @description true if a public comment; false if an internal note. The initial value set on ticket creation persists for any additional comment unless you change it */
      public?: boolean;
      /** @description `Comment` or `VoiceComment`. The JSON object for adding voice comments to tickets is different. See [Adding voice comments to tickets](/documentation/ticketing/managing-tickets/adding-voice-comments-to-tickets) */
      type?: string;
      /** @description List of tokens received from [uploading files](/api-reference/ticketing/tickets/ticket-attachments/#upload-files) for comment attachments. The files are attached by creating or updating tickets with the tokens. See [Attaching files](/api-reference/ticketing/tickets/tickets/#attaching-files) in Tickets */
      uploads?: string[];
      via?: components["schemas"]["TicketAuditViaObject"];
    };
    TicketCommentResponse: {
      comment?: components["schemas"]["TicketCommentObject"];
    };
    TicketCommentsCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    TicketCommentsResponse: {
      comments?: components["schemas"]["TicketCommentObject"][];
    };
    /**
     * @example {
     *   "comment": {
     *     "body": "The smoke is very colorful."
     *   },
     *   "priority": "urgent",
     *   "subject": "My printer is on fire!"
     * }
     */
    TicketCreateInput: components["schemas"]["TicketUpdateInput"] & {
      /** @description Enterprise only. The id of the brand this ticket is associated with */
      brand_id?: number;
      /** @description POST requests only. Users to add as cc's when creating a ticket. See [Setting Collaborators](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-collaborators) */
      collaborators?: components["schemas"]["CollaboratorObject"][];
      /** @description The ids of agents or end users currently CC'ed on the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) in the Support Help Center */
      email_cc_ids?: number[];
      /** @description The ids of agents currently following the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) */
      follower_ids?: number[];
      /** @description POST requests only. List of macro IDs to be recorded in the ticket audit */
      macro_ids?: number[];
      /** @description The dynamic content placeholder, if present, or the "subject" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_subject?: string;
      /** @description The original recipient e-mail address of the ticket */
      recipient?: string;
      /** @description The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket */
      submitter_id?: number;
      /** @description Enterprise only. The id of the ticket form to render for the ticket */
      ticket_form_id?: number;
      via?: components["schemas"]["ViaObject"];
      /** @description POST requests only. The id of a closed ticket when creating a follow-up ticket. See [Creating a follow-up ticket](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#creating-a-follow-up-ticket) */
      via_followup_source_id?: number;
    };
    TicketCreateRequest: {
      ticket?: components["schemas"]["TicketCreateInput"];
    };
    TicketCreateVoicemailTicketInput: {
      comment?: components["schemas"]["TicketCommentObject"];
      /**
       * @description The urgency with which the ticket should be addressed.
       * @enum {string}
       */
      priority?: "urgent" | "high" | "normal" | "low";
      /**
       * @description Required for Create Ticket operation
       * @enum {integer}
       */
      via_id?: 44 | 45 | 46;
      /** @description Required if creating voicemail ticket */
      voice_comment?: components["schemas"]["TicketCreateVoicemailTicketVoiceCommentInput"];
    };
    TicketCreateVoicemailTicketRequest: {
      /** @description Optional value such as the ID of the agent that will see the newly created ticket. */
      display_to_agent?: number;
      /** @description Ticket object that lists the values to set when the ticket is created */
      ticket?: components["schemas"]["TicketCreateVoicemailTicketInput"];
    };
    TicketCreateVoicemailTicketVoiceCommentInput: {
      /** @description The agent who answered the call */
      answered_by_id?: number;
      /** @description Duration in seconds of the call */
      call_duration?: number;
      /** @description Incoming phone number */
      from?: string;
      /** @description Location of the caller (optional) */
      location?: string;
      /** @description Incoming phone number */
      recording_url?: string;
      /**
       * Format: date-time
       * @description [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the call starting time
       */
      started_at?: string;
      /** @description Dialed phone number */
      to?: string;
      /** @description Transcription of the call (optional) */
      transcription_text?: string;
    };
    TicketFieldCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    TicketFieldCustomStatusObject: {
      /** @description If true, if the custom status is set to active. If false, the custom status is set to inactive */
      active?: boolean;
      /** @description The label displayed to agents */
      agent_label?: string;
      /**
       * Format: date-time
       * @description The date and time at which the custom ticket status was created
       */
      created_at?: string;
      /** @description If true, the custom status is set to default. If false, the custom status is set to non-default */
      default?: boolean;
      /** @description The description of when the user should select this custom ticket status */
      description?: string;
      /** @description The description displayed to end users */
      end_user_description?: string;
      /** @description The label displayed to end users */
      end_user_label?: string;
      /** @description Automatically assigned when the custom ticket status is created */
      id?: number;
      /**
       * @description The status category the custom ticket status belongs to
       * @enum {string}
       */
      status_category?: "new" | "open" | "pending" | "hold" | "solved";
      /**
       * Format: date-time
       * @description The date and time at which the custom ticket status was last updated
       */
      updated_at?: string;
    };
    /**
     * @example {
     *   "active": true,
     *   "agent_description": "This is the agent only description for the subject field",
     *   "collapsed_for_agents": false,
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "description": "This is the subject field of a ticket",
     *   "editable_in_portal": true,
     *   "id": 34,
     *   "position": 21,
     *   "raw_description": "This is the subject field of a ticket",
     *   "raw_title": "{{dc.my_title}}",
     *   "raw_title_in_portal": "{{dc.my_title_in_portal}}",
     *   "regexp_for_validation": null,
     *   "removable": false,
     *   "required": true,
     *   "required_in_portal": true,
     *   "tag": null,
     *   "title": "Subject",
     *   "title_in_portal": "Subject",
     *   "type": "subject",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/ticket_fields/34.json",
     *   "visible_in_portal": true
     * }
     */
    TicketFieldObject: {
      /** @description Whether this field is available */
      active?: boolean;
      /** @description A description of the ticket field that only agents can see */
      agent_description?: string;
      /** @description If true, the field is shown to agents by default. If false, the field is hidden alongside infrequently used fields. Classic interface only */
      collapsed_for_agents?: boolean;
      /**
       * Format: date-time
       * @description The time the custom ticket field was created
       */
      created_at?: string;
      /** @description Name of the app that created the ticket field, or a null value if no app created the ticket field */
      creator_app_name?: string;
      /** @description The id of the user that created the ticket field, or a value of "-1" if an app created the ticket field */
      creator_user_id?: number;
      /** @description Required and presented for a custom ticket field of type "multiselect" or "tagger" */
      custom_field_options?: components["schemas"]["CustomFieldOptionObject"][];
      /** @description List of customized ticket statuses. Only presented for a system ticket field of type "custom_status" */
      custom_statuses?: readonly components["schemas"]["TicketFieldCustomStatusObject"][];
      /** @description Describes the purpose of the ticket field to users */
      description?: string;
      /** @description Whether this field is editable by end users in Help Center */
      editable_in_portal?: boolean;
      /** @description Automatically assigned when created */
      id?: number;
      /** @description The relative position of the ticket field on a ticket. Note that for accounts with ticket forms, positions are controlled by the different forms */
      position?: number;
      /** @description The dynamic content placeholder if present, or the `description` value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_description?: string;
      /** @description The dynamic content placeholder if present, or the `title` value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_title?: string;
      /** @description The dynamic content placeholder if present, or the "title_in_portal" value if not. See [Dynamic Content](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_title_in_portal?: string;
      /** @description For "regexp" fields only. The validation pattern for a field value to be deemed valid */
      regexp_for_validation?: string | null;
      /** @description A filter definition that allows your autocomplete to filter down results */
      relationship_filter?: Record<string, never>;
      /** @description A representation of what type of object the field references. Options are "zen:user", "zen:organization", "zen:ticket", or "zen:custom_object:{key}" where key is a custom object key. For example "zen:custom_object:apartment". */
      relationship_target_type?: string;
      /** @description If false, this field is a system field that must be present on all tickets */
      removable?: boolean;
      /** @description If true, agents must enter a value in the field to change the ticket status to solved */
      required?: boolean;
      /** @description If true, end users must enter a value in the field to create the request */
      required_in_portal?: boolean;
      /** @description For system ticket fields of type "priority" and "status". Defaults to 0. A "priority" sub type of 1 removes the "Low" and "Urgent" options. A "status" sub type of 1 adds the "On-Hold" option */
      sub_type_id?: number;
      /** @description Presented for a system ticket field of type "tickettype", "priority" or "status" */
      system_field_options?: readonly components["schemas"]["SystemFieldOptionObject"][];
      /** @description For "checkbox" fields only. A tag added to tickets when the checkbox field is selected */
      tag?: string | null;
      /** @description The title of the ticket field */
      title: string;
      /** @description The title of the ticket field for end users in Help Center */
      title_in_portal?: string;
      /** @description System or custom field type. Editable for custom field types and only on creation. See [Create Ticket Field](#create-ticket-field) */
      type: string;
      /**
       * Format: date-time
       * @description The time the custom ticket field was last updated
       */
      updated_at?: string;
      /** @description The URL for this resource */
      url?: string;
      /** @description Whether this field is visible to end users in Help Center */
      visible_in_portal?: boolean;
    };
    TicketFieldResponse: {
      ticket_field?: components["schemas"]["TicketFieldObject"];
    };
    TicketFieldsResponse: {
      ticket_fields?: components["schemas"]["TicketFieldObject"][];
    };
    /**
     * @example {
     *   "active": true,
     *   "agent_conditions": [
     *     {
     *       "child_fields": [
     *         {
     *           "id": 101,
     *           "is_required": false,
     *           "required_on_statuses": {
     *             "statuses": [
     *               "new",
     *               "open",
     *               "pending",
     *               "hold"
     *             ],
     *             "type": "SOME_STATUSES"
     *           }
     *         },
     *         {
     *           "id": 200,
     *           "is_required": true,
     *           "required_on_statuses": {
     *             "statuses": [
     *               "solved"
     *             ],
     *             "type": "SOME_STATUSES"
     *           }
     *         }
     *       ],
     *       "parent_field_id": 100,
     *       "value": "matching_value"
     *     },
     *     {
     *       "child_fields": [
     *         {
     *           "id": 102,
     *           "is_required": true,
     *           "required_on_statuses": {
     *             "type": "ALL_STATUSES"
     *           }
     *         },
     *         {
     *           "id": 200,
     *           "is_required": false,
     *           "required_on_statuses": {
     *             "type": "NO_STATUSES"
     *           }
     *         }
     *       ],
     *       "parent_field_id": 101,
     *       "value": "matching_value_2"
     *     }
     *   ],
     *   "created_at": "2012-04-02T22:55:29Z",
     *   "default": true,
     *   "display_name": "Snowboard Damage",
     *   "end_user_conditions": [
     *     {
     *       "child_fields": [
     *         {
     *           "id": 101,
     *           "is_required": true
     *         }
     *       ],
     *       "parent_field_id": 100,
     *       "value": "matching_value"
     *     },
     *     {
     *       "child_fields": [
     *         {
     *           "id": 202,
     *           "is_required": false
     *         }
     *       ],
     *       "parent_field_id": 200,
     *       "value": "matching_value"
     *     }
     *   ],
     *   "end_user_visible": true,
     *   "id": 47,
     *   "in_all_brands": false,
     *   "name": "Snowboard Problem",
     *   "position": 9999,
     *   "raw_display_name": "{{dc.my_display_name}}",
     *   "raw_name": "Snowboard Problem",
     *   "restricted_brand_ids": [
     *     47,
     *     33,
     *     22
     *   ],
     *   "ticket_field_ids": [
     *     2,
     *     4,
     *     5,
     *     10,
     *     100,
     *     101,
     *     102,
     *     200
     *   ],
     *   "updated_at": "2012-04-02T22:55:29Z",
     *   "url": "https://company.zendesk.com/api/v2/ticket_forms/47.json"
     * }
     */
    TicketFormObject: {
      /** @description If the form is set as active */
      active?: boolean;
      /** @description Array of condition sets for agent workspaces */
      agent_conditions?: {
          [key: string]: unknown;
        }[];
      /**
       * Format: date-time
       * @description The time the ticket form was created
       */
      created_at?: string;
      /** @description Is the form the default form for this account */
      default?: boolean;
      /** @description The name of the form that is displayed to an end user */
      display_name?: string;
      /** @description Array of condition sets for end user products */
      end_user_conditions?: {
          [key: string]: unknown;
        }[];
      /** @description Is the form visible to the end user */
      end_user_visible?: boolean;
      /** @description Automatically assigned when creating ticket form */
      id?: number;
      /** @description Is the form available for use in all brands on this account */
      in_all_brands?: boolean;
      /** @description The name of the form */
      name: string;
      /** @description The position of this form among other forms in the account, i.e. dropdown */
      position?: number;
      /** @description The dynamic content placeholder, if present, or the "display_name" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_display_name?: string;
      /** @description The dynamic content placeholder, if present, or the "name" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_name?: string;
      /** @description ids of all brands that this ticket form is restricted to */
      restricted_brand_ids?: readonly number[];
      /** @description ids of all ticket fields which are in this ticket form. The products use the order of the ids to show the field values in the tickets */
      ticket_field_ids?: number[];
      /**
       * Format: date-time
       * @description The time of the last update of the ticket form
       */
      updated_at?: string;
      /** @description URL of the ticket form */
      url?: string;
    };
    TicketFormResponse: {
      ticket_form?: components["schemas"]["TicketFormObject"];
    };
    TicketFormsResponse: {
      ticket_forms?: components["schemas"]["TicketFormObject"][];
    };
    TicketImportInput: {
      /** @description The agent currently assigned to the ticket */
      assignee_id?: number;
      /** @description The conversation between requesters, collaborators, and agents */
      comments?: ({
          /** @description The comment string value */
          value?: string;
        } & components["schemas"]["TicketCommentObject"])[];
      /** @description Read-only first comment on the ticket. When [creating a ticket](#create-ticket), use `comment` to set the description. See [Description and first comment](#description-and-first-comment) */
      description?: string;
      /** @description The user who requested this ticket */
      requester_id?: number;
      /** @description The value of the subject field for this ticket */
      subject?: string;
      /** @description The array of tags applied to this ticket */
      tags?: string[];
    };
    TicketImportRequest: {
      ticket?: components["schemas"]["TicketImportInput"];
    };
    TicketMergeInput: {
      /** @description Ids of tickets to merge into the target ticket */
      ids: number[];
      /** @description Private comment to add to the source ticket */
      source_comment?: string;
      /** @description Whether comment in source tickets are public or private */
      source_comment_is_public?: boolean;
      /** @description Private comment to add to the target ticket */
      target_comment?: string;
      /** @description Whether comment in target ticket is public or private */
      target_comment_is_public?: boolean;
    };
    /**
     * Ticket Metric Events
     * @example {
     *   "id": 926256957613,
     *   "instance_id": 1,
     *   "metric": "agent_work_time",
     *   "ticket_id": 155,
     *   "time": "2020-10-26T12:53:12Z",
     *   "type": "measure"
     * }
     */
    TicketMetricEventBaseObject: {
      /** @description Automatically assigned when the record is created */
      id?: number;
      /** @description The instance of the metric associated with the event. See [instance_id](#instance_id) */
      instance_id?: number;
      /**
       * @description The metric being tracked
       * @enum {string}
       */
      metric?: "agent_work_time" | "pausable_update_time" | "periodic_update_time" | "reply_time" | "requester_wait_time" | "resolution_time";
      /** @description Id of the associated ticket */
      ticket_id?: number;
      /**
       * Format: date-time
       * @description The time the event occurred
       */
      time?: string;
      /**
       * @description The type of the metric event. See [Ticket metric event types reference](/documentation/ticketing/reference-guides/ticket-metric-event-types-reference)
       * @enum {string}
       */
      type?: "activate" | "pause" | "fulfill" | "apply_sla" | "breach" | "update_status" | "measure";
    };
    /** Ticket Metric Event */
    TicketMetricEventBreachObject: components["schemas"]["TicketMetricEventBaseObject"] & {
      /** @description Available if `type` is `breach`. In general, you can ignore any breach event when `deleted` is true. See [deleted](#deleted) */
      deleted?: boolean;
    };
    /** Ticket Metric Event */
    TicketMetricEventGroupSLAObject: components["schemas"]["TicketMetricEventBaseObject"] & {
      /** @description Available if `type` is "apply_group_sla". The Group SLA policy and target being enforced on the ticket and metric in question, if any. See [group_sla](#group_sla) */
      group_sla?: Record<string, never>;
    };
    /** Ticket Metric Event */
    TicketMetricEventSLAObject: components["schemas"]["TicketMetricEventBaseObject"] & {
      /** @description Available if `type` is `apply_sla`. The SLA policy and target being enforced on the ticket and metric in question, if any. See [sla](#sla) */
      sla?: Record<string, never>;
    };
    /** Ticket Metric Event */
    TicketMetricEventUpdateStatusObject: components["schemas"]["TicketMetricEventBaseObject"] & {
      /** @description Available if `type` is `update_status`. Minutes since the metric has been open. See [status](#status) */
      status?: Record<string, never>;
    };
    TicketMetricEventsResponse: {
      ticket_metric_events?: components["schemas"]["TicketMetricEventBaseObject"][];
    } & {
      count?: number;
      end_time?: number;
      next_page?: string;
    };
    /**
     * @example {
     *   "agent_wait_time_in_minutes": {
     *     "business": 737,
     *     "calendar": 2391
     *   },
     *   "assigned_at": "2011-05-05T10:38:52Z",
     *   "assignee_stations": 1,
     *   "assignee_updated_at": "2011-05-06T10:38:52Z",
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "custom_status_updated_at": "2011-05-09T10:38:52Z",
     *   "first_resolution_time_in_minutes": {
     *     "business": 737,
     *     "calendar": 2391
     *   },
     *   "full_resolution_time_in_minutes": {
     *     "business": 737,
     *     "calendar": 2391
     *   },
     *   "group_stations": 7,
     *   "id": 33,
     *   "initially_assigned_at": "2011-05-03T10:38:52Z",
     *   "latest_comment_added_at": "2011-05-09T10:38:52Z",
     *   "on_hold_time_in_minutes": {
     *     "business": 637,
     *     "calendar": 2290
     *   },
     *   "reopens": 55,
     *   "replies": 322,
     *   "reply_time_in_minutes": {
     *     "business": 737,
     *     "calendar": 2391
     *   },
     *   "reply_time_in_seconds": {
     *     "calendar": 143460
     *   },
     *   "requester_updated_at": "2011-05-07T10:38:52Z",
     *   "requester_wait_time_in_minutes": {
     *     "business": 737,
     *     "calendar": 2391
     *   },
     *   "solved_at": "2011-05-09T10:38:52Z",
     *   "status_updated_at": "2011-05-04T10:38:52Z",
     *   "ticket_id": 4343,
     *   "updated_at": "2011-05-05T10:38:52Z"
     * }
     */
    TicketMetricObject: {
      /** @description Number of minutes the agent spent waiting during calendar and business hours */
      agent_wait_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /**
       * Format: date-time
       * @description When the ticket was assigned
       */
      assigned_at?: string;
      /** @description Number of assignees the ticket had */
      assignee_stations?: number;
      /**
       * Format: date-time
       * @description When the assignee last updated the ticket
       */
      assignee_updated_at?: string;
      /**
       * Format: date-time
       * @description When the record was created
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date and time the ticket's custom status was last updated
       */
      custom_status_updated_at?: string;
      /** @description Number of minutes to the first resolution time during calendar and business hours */
      first_resolution_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /** @description Number of minutes to the full resolution during calendar and business hours */
      full_resolution_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /** @description Number of groups the ticket passed through */
      group_stations?: number;
      /** @description Automatically assigned when the client is created */
      id?: number;
      /**
       * Format: date-time
       * @description When the ticket was initially assigned
       */
      initially_assigned_at?: string;
      /**
       * Format: date-time
       * @description When the latest comment was added
       */
      latest_comment_added_at?: string;
      /** @description Number of minutes on hold */
      on_hold_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /** @description Total number of times the ticket was reopened */
      reopens?: number;
      /** @description The number of public replies added to a ticket by an agent */
      replies?: number;
      /** @description Number of minutes to the first reply during calendar and business hours */
      reply_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /** @description Number of seconds to the first reply during calendar hours, only available for Messaging tickets */
      reply_time_in_seconds?: components["schemas"]["TicketMetricTimeObject"];
      /**
       * Format: date-time
       * @description When the requester last updated the ticket
       */
      requester_updated_at?: string;
      /** @description Number of minutes the requester spent waiting during calendar and business hours */
      requester_wait_time_in_minutes?: components["schemas"]["TicketMetricTimeObject"];
      /**
       * Format: date-time
       * @description When the ticket was solved
       */
      solved_at?: string;
      /**
       * Format: date-time
       * @description When the status of the ticket was last updated
       */
      status_updated_at?: string;
      /** @description Id of the associated ticket */
      ticket_id?: number;
      /**
       * Format: date-time
       * @description When the record was last updated
       */
      updated_at?: string;
      /** @description The API url of the ticket metric */
      url?: string;
    };
    TicketMetricTimeObject: {
      /** @description Time in business hours */
      business?: number;
      /** @description Time in calendar hours */
      calendar?: number;
    };
    TicketMetricsByTicketMetricIdResponse: {
      ticket_metric?: components["schemas"]["TicketMetricObject"][];
    };
    TicketMetricsResponse: {
      ticket_metrics?: components["schemas"]["TicketMetricObject"][];
    };
    /**
     * @example {
     *   "assignee_id": 235323,
     *   "collaborator_ids": [
     *     35334,
     *     234
     *   ],
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "custom_fields": [
     *     {
     *       "id": 27642,
     *       "value": "745"
     *     },
     *     {
     *       "id": 27648,
     *       "value": "yes"
     *     }
     *   ],
     *   "custom_status_id": 123,
     *   "description": "The fire is very colorful.",
     *   "due_at": null,
     *   "external_id": "ahg35h3jh",
     *   "follower_ids": [
     *     35334,
     *     234
     *   ],
     *   "from_messaging_channel": false,
     *   "group_id": 98738,
     *   "has_incidents": false,
     *   "id": 35436,
     *   "organization_id": 509974,
     *   "priority": "high",
     *   "problem_id": 9873764,
     *   "raw_subject": "{{dc.printer_on_fire}}",
     *   "recipient": "support@company.com",
     *   "requester_id": 20978392,
     *   "satisfaction_rating": {
     *     "comment": "Great support!",
     *     "id": 1234,
     *     "score": "good"
     *   },
     *   "sharing_agreement_ids": [
     *     84432
     *   ],
     *   "status": "open",
     *   "subject": "Help, my printer is on fire!",
     *   "submitter_id": 76872,
     *   "tags": [
     *     "enterprise",
     *     "other_tag"
     *   ],
     *   "type": "incident",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/tickets/35436.json",
     *   "via": {
     *     "channel": "web"
     *   }
     * }
     */
    TicketObject: {
      /** @description Permission for agents to add add attachments to a comment. Defaults to true */
      allow_attachments?: boolean;
      /** @description Is false if channelback is disabled, true otherwise. Only applicable for channels framework ticket */
      allow_channelback?: boolean;
      /** @description Write only. The email address of the agent to assign the ticket to */
      assignee_email?: string;
      /** @description The agent currently assigned to the ticket */
      assignee_id?: number;
      /** @description Write only. An array of the IDs of attribute values to be associated with the ticket */
      attribute_value_ids?: number[];
      /** @description The id of the brand this ticket is associated with. See [Setting up multiple brands](https://support.zendesk.com/hc/en-us/articles/4408829476378) */
      brand_id?: number;
      /** @description The ids of users currently CC'ed on the ticket */
      collaborator_ids?: number[];
      /** @description POST requests only. Users to add as cc's when creating a ticket. See [Setting Collaborators](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-collaborators) */
      collaborators?: components["schemas"]["CollaboratorObject"][];
      /** @description Write only. An object that adds a comment to the ticket. See [Ticket comments](/api-reference/ticketing/tickets/ticket_comments/). To include an attachment with the comment, see [Attaching files](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#attaching-files) */
      comment?: Record<string, never>;
      /**
       * Format: date-time
       * @description When this record was created
       */
      created_at?: string;
      /** @description Custom fields for the ticket. See [Setting custom field values](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-custom-field-values) */
      custom_fields?: {
          /** @description The id of the custom field */
          id?: number;
          /** @description The value of the custom field */
          value?: string;
        }[];
      /** @description The custom ticket status id of the ticket. See [custom ticket statuses](#custom-ticket-statuses) */
      custom_status_id?: number;
      /** @description Read-only first comment on the ticket. When [creating a ticket](#create-ticket), use `comment` to set the description. See [Description and first comment](#description-and-first-comment) */
      description?: string;
      /**
       * Format: date-time
       * @description If this is a ticket of type "task" it has a due date.  Due date format uses [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
       */
      due_at?: string | null;
      /** @description The ids of agents or end users currently CC'ed on the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) in the Support Help Center */
      email_cc_ids?: number[];
      /** @description Write only. An array of objects that represent agent or end users email CCs to add or delete from the ticket. See [Setting email CCs](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-email-ccs) */
      email_ccs?: Record<string, never>;
      /** @description An id you can use to link Zendesk Support tickets to local records */
      external_id?: string;
      /** @description The ids of agents currently following the ticket. See [CCs and followers resources](https://support.zendesk.com/hc/en-us/articles/360020585233) */
      follower_ids?: number[];
      /** @description Write only. An array of objects that represent agent followers to add or delete from the ticket. See [Setting followers](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-followers) */
      followers?: Record<string, never>;
      /** @description The ids of the followups created from this ticket. Ids are only visible once the ticket is closed */
      followup_ids?: readonly number[];
      /** @description The topic in the Zendesk Web portal this ticket originated from, if any. The Web portal is deprecated */
      forum_topic_id?: number;
      /** @description If true, the ticket's [via type](/documentation/ticketing/reference-guides/via-object-reference/) is a messaging channel. */
      from_messaging_channel?: boolean;
      /** @description The group this ticket is assigned to */
      group_id?: number;
      /** @description Is true if a ticket is a problem type and has one or more incidents linked to it. Otherwise, the value is false. */
      has_incidents?: boolean;
      /** @description Automatically assigned when the ticket is created */
      id?: number;
      /** @description Is true if any comments are public, false otherwise */
      is_public?: boolean;
      /** @description Write only. A macro ID to be recorded in the ticket audit */
      macro_id?: number;
      /** @description POST requests only. List of macro IDs to be recorded in the ticket audit */
      macro_ids?: number[];
      /** @description Write only. Metadata for the audit. In the `audit` object, the data is specified in the `custom` property of the `metadata` object. See [Setting Metadata](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#setting-metadata) */
      metadata?: Record<string, never>;
      /** @description The organization of the requester. You can only specify the ID of an organization associated with the requester. See [Organization Memberships](/api-reference/ticketing/organizations/organization_memberships/) */
      organization_id?: number;
      /**
       * @description The urgency with which the ticket should be addressed
       * @enum {string}
       */
      priority?: "urgent" | "high" | "normal" | "low";
      /** @description For tickets of type "incident", the ID of the problem the incident is linked to */
      problem_id?: number;
      /** @description The dynamic content placeholder, if present, or the "subject" value, if not. See [Dynamic Content Items](/api-reference/ticketing/ticket-management/dynamic_content/) */
      raw_subject?: string;
      /** @description The original recipient e-mail address of the ticket. Notification emails for the ticket are sent from this address */
      recipient?: string;
      /** @description Write only. See [Creating a ticket with a new requester](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#creating-a-ticket-with-a-new-requester) */
      requester?: Record<string, never>;
      /** @description The user who requested this ticket */
      requester_id: number;
      /** @description Write only. Optional boolean. When true and an `update_stamp` date is included, protects against ticket update collisions and returns a message to let you know if one occurs. See [Protecting against ticket update collisions](/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#protecting-against-ticket-update-collisions). A value of false has the same effect as true. Omit the property to force the updates to not be safe */
      safe_update?: boolean;
      /** @description The satisfaction rating of the ticket, if it exists, or the state of satisfaction, "offered" or "unoffered". The value is null for plan types that don't support CSAT */
      satisfaction_rating?: {
        [key: string]: unknown;
      };
      /** @description The ids of the sharing agreements used for this ticket */
      sharing_agreement_ids?: readonly number[];
      /**
       * @description The state of the ticket.
       *
       * If your account has activated custom ticket statuses, this is the ticket's
       * status category. See [custom ticket statuses](#custom-ticket-statuses)
       *
       * @enum {string}
       */
      status?: "new" | "open" | "pending" | "hold" | "solved" | "closed";
      /** @description The value of the subject field for this ticket. See [Subject](/api-reference/ticketing/tickets/tickets/#subject) */
      subject?: string;
      /** @description The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket */
      submitter_id?: number;
      /** @description The array of tags applied to this ticket */
      tags?: string[];
      /** @description Enterprise only. The id of the ticket form to render for the ticket */
      ticket_form_id?: number;
      /**
       * @description The type of this ticket
       * @enum {string}
       */
      type?: "problem" | "incident" | "question" | "task";
      /**
       * Format: date-time
       * @description When this record last got updated. It is updated only if the update generates a [ticket event](#incremental-ticket-event-export)
       */
      updated_at?: string;
      /** @description Write only. Datetime of last update received from API. See the `safe_update` property */
      updated_stamp?: string;
      /** @description The API url of this ticket */
      url?: string;
      /** @description For more information, see the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference) */
      via?: {
        /** @description This tells you how the ticket or event was created. Examples: "web", "mobile", "rule", "system" */
        channel?: string;
        /** @description For some channels a source object gives more information about how or why the ticket or event was created */
        source?: {
          [key: string]: unknown;
        };
      };
      /** @description POST requests only. The id of a closed ticket when creating a follow-up ticket. See [Creating a follow-up ticket](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#creating-a-follow-up-ticket) */
      via_followup_source_id?: number;
      /** @description Write only. For more information, see the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference/) */
      via_id?: number;
      /** @description Write only. See [Creating voicemail ticket](/api-reference/voice/talk-partner-edition-api/reference/#creating-voicemail-tickets) */
      voice_comment?: Record<string, never>;
    };
    TicketRelatedInformation: {
      followup_source_ids?: string[];
      /** @description Is true if the current ticket is archived */
      from_archive?: boolean;
      /** @description A count of related incident occurrences */
      incidents?: number;
      /** @description Related topic in the Web portal (deprecated feature) */
      topic_id?: string | null;
      /** @description X (formerly Twitter) information associated with the ticket */
      twitter?: {
        [key: string]: unknown;
      };
    };
    TicketResponse: {
      ticket?: components["schemas"]["TicketObject"];
    };
    TicketSkipCreation: {
      skip?: components["schemas"]["TicketSkipObject"];
    };
    /**
     * @example {
     *   "created_at": "2015-09-30T21:44:03Z",
     *   "id": 1,
     *   "reason": "I have no idea.",
     *   "ticket": {
     *     "assignee_id": 235323,
     *     "collaborator_ids": [
     *       35334,
     *       234
     *     ],
     *     "created_at": "2009-07-20T22:55:29Z",
     *     "custom_fields": [
     *       {
     *         "id": 27642,
     *         "value": "745"
     *       },
     *       {
     *         "id": 27648,
     *         "value": "yes"
     *       }
     *     ],
     *     "description": "The fire is very colorful.",
     *     "due_at": null,
     *     "external_id": "ahg35h3jh",
     *     "follower_ids": [
     *       35334,
     *       234
     *     ],
     *     "from_messaging_channel": false,
     *     "group_id": 98738,
     *     "has_incidents": false,
     *     "id": 123,
     *     "organization_id": 509974,
     *     "priority": "high",
     *     "problem_id": 9873764,
     *     "raw_subject": "{{dc.printer_on_fire}}",
     *     "recipient": "support@company.com",
     *     "requester_id": 20978392,
     *     "satisfaction_rating": {
     *       "comment": "Great support!",
     *       "id": 1234,
     *       "score": "good"
     *     },
     *     "sharing_agreement_ids": [
     *       84432
     *     ],
     *     "status": "open",
     *     "subject": "Help, my printer is on fire!",
     *     "submitter_id": 76872,
     *     "tags": [
     *       "enterprise",
     *       "other_tag"
     *     ],
     *     "type": "incident",
     *     "updated_at": "2011-05-05T10:38:52Z",
     *     "url": "https://company.zendesk.com/api/v2/tickets/35436.json",
     *     "via": {
     *       "channel": "web"
     *     }
     *   },
     *   "ticket_id": 123,
     *   "updated_at": "2015-09-30T21:44:03Z",
     *   "user_id": 456
     * }
     */
    TicketSkipObject: {
      /**
       * Format: date-time
       * @description Time the skip was created
       */
      created_at?: string;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description Reason for skipping the ticket */
      reason?: string;
      /** @description The skipped ticket. See the [Ticket object reference](/api-reference/ticketing/tickets/tickets/#json-format) */
      ticket?: components["schemas"]["TicketObject"];
      /** @description ID of the skipped ticket */
      ticket_id?: number;
      /**
       * Format: date-time
       * @description Time the skip was last updated
       */
      updated_at?: string;
      /** @description ID of the skipping agent */
      user_id?: number;
    };
    TicketSkipsResponse: {
      skips?: components["schemas"]["TicketSkipObject"][];
    };
    /**
     * @example {
     *   "comment": {
     *     "body": "The smoke is very colorful."
     *   },
     *   "priority": "urgent",
     *   "subject": "My printer is on fire!"
     * }
     */
    TicketUpdateInput: {
      /** @description An array of numeric IDs, emails, or objects containing name and email properties. See [Setting Collaborators](/api-reference/ticketing/tickets/tickets/#setting-collaborators). An email notification is sent to them when the ticket is updated */
      additional_collaborators?: components["schemas"]["CollaboratorObject"][];
      /**
       * Format: email
       * @description The email address of the agent to assign the ticket to
       */
      assignee_email?: string;
      /** @description The agent currently assigned to the ticket */
      assignee_id?: number;
      /** @description An array of the IDs of attribute values to be associated with the ticket */
      attribute_value_ids?: number[];
      /** @description The ids of users currently CC'ed on the ticket */
      collaborator_ids?: number[];
      comment?: components["schemas"]["TicketCommentObject"];
      /** @description Custom fields for the ticket. See [Setting custom field values](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-custom-field-values) */
      custom_fields?: components["schemas"]["CustomFieldObject"][];
      /** @description The custom ticket status id of the ticket. See [custom ticket statuses](#custom-ticket-statuses) */
      custom_status_id?: number;
      /**
       * Format: date-time
       * @description If this is a ticket of type "task" it has a due date.  Due date format uses [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
       */
      due_at?: string | null;
      /** @description An array of objects that represent agent or end users email CCs to add or delete from the ticket. See [Setting email CCs](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-email-ccs) */
      email_ccs?: components["schemas"]["EmailCCObject"][];
      /** @description An id you can use to link Zendesk Support tickets to local records */
      external_id?: string;
      /** @description An array of objects that represent agent followers to add or delete from the ticket. See [Setting followers](/documentation/ticketing/managing-tickets/creating-and-updating-tickets#setting-followers) */
      followers?: components["schemas"]["FollowerObject"][];
      /** @description The group this ticket is assigned to */
      group_id?: number;
      /** @description The organization of the requester. You can only specify the ID of an organization associated with the requester. See [Organization Memberships](/api-reference/ticketing/organizations/organization_memberships/) */
      organization_id?: number;
      /**
       * @description The urgency with which the ticket should be addressed.
       * @enum {string}
       */
      priority?: "urgent" | "high" | "normal" | "low";
      /** @description For tickets of type "incident", the ID of the problem the incident is linked to */
      problem_id?: number;
      /** @description The user who requested this ticket */
      requester_id?: number;
      /** @description Optional boolean. Prevents updates with outdated ticket data (`updated_stamp` property required when true) */
      safe_update?: boolean;
      /** @description An array of the numeric IDs of sharing agreements. Note that this replaces any existing agreements */
      sharing_agreement_ids?: number[];
      /**
       * @description The state of the ticket.
       *
       * If your account has activated custom ticket statuses, this is the ticket's
       * status category. See [custom ticket statuses](#custom-ticket-statuses).
       *
       * @enum {string}
       */
      status?: "new" | "open" | "pending" | "hold" | "solved" | "closed";
      /** @description The value of the subject field for this ticket */
      subject?: string;
      /** @description The array of tags applied to this ticket */
      tags?: string[];
      /**
       * @description The type of this ticket.
       * @enum {string}
       */
      type?: "problem" | "incident" | "question" | "task";
      /**
       * Format: date-time
       * @description Datetime of last update received from API. See the safe_update property
       */
      updated_stamp?: string;
    };
    TicketUpdateRequest: {
      ticket?: components["schemas"]["TicketUpdateInput"];
    };
    TicketUpdateResponse: {
      audit?: components["schemas"]["AuditObject"];
      ticket?: components["schemas"]["TicketObject"];
    };
    TicketsCreateRequest: {
      tickets?: components["schemas"]["TicketCreateInput"][];
    };
    TicketsResponse: {
      tickets?: components["schemas"]["TicketObject"][];
    };
    /**
     * @description See [Tickets](/api-reference/ticketing/tickets/tickets/) for a detailed example.
     *
     * @example {
     *   "count": 2,
     *   "end_of_stream": true,
     *   "end_time": 1390362485,
     *   "next_page": "https://{subdomain}.zendesk.com/api/v2/incremental/tickets.json?per_page=3&start_time=1390362485",
     *   "tickets": [
     *     {
     *       "assignee_id": 235323,
     *       "collaborator_ids": [
     *         35334,
     *         234
     *       ],
     *       "created_at": "2009-07-20T22:55:29Z",
     *       "custom_fields": [
     *         {
     *           "id": 27642,
     *           "value": "745"
     *         },
     *         {
     *           "id": 27648,
     *           "value": "yes"
     *         }
     *       ],
     *       "description": "The fire is very colorful.",
     *       "due_at": null,
     *       "external_id": "ahg35h3jh",
     *       "follower_ids": [
     *         35334,
     *         234
     *       ],
     *       "group_id": 98738,
     *       "has_incidents": false,
     *       "id": 35436,
     *       "organization_id": 509974,
     *       "priority": "high",
     *       "problem_id": 9873764,
     *       "raw_subject": "{{dc.printer_on_fire}}",
     *       "recipient": "support@company.com",
     *       "requester_id": 20978392,
     *       "satisfaction_rating": {
     *         "comment": "Great support!",
     *         "id": 1234,
     *         "score": "good"
     *       },
     *       "sharing_agreement_ids": [
     *         84432
     *       ],
     *       "status": "open",
     *       "subject": "Help, my printer is on fire!",
     *       "submitter_id": 76872,
     *       "tags": [
     *         "enterprise",
     *         "other_tag"
     *       ],
     *       "type": "incident",
     *       "updated_at": "2011-05-05T10:38:52Z",
     *       "url": "https://company.zendesk.com/api/v2/tickets/35436.json",
     *       "via": {
     *         "channel": "web"
     *       }
     *     }
     *   ]
     * }
     */
    TimeBasedExportIncrementalTicketsResponse: {
      count?: number;
      end_of_stream?: boolean;
      end_time?: number;
      next_page?: string | null;
      tickets?: components["schemas"]["TicketObject"][];
    };
    /**
     * @example {
     *   "count": 1,
     *   "end_of_stream": true,
     *   "end_time": 1601357503,
     *   "next_page": "https://example.zendesk.com/api/v2/incremental/ticket_events.json?start_time=1601357503",
     *   "users": [
     *     {
     *       "active": true,
     *       "alias": "Mr. Johnny",
     *       "created_at": "2009-07-20T22:55:29Z",
     *       "custom_role_id": 9373643,
     *       "details": "",
     *       "email": "johnny@example.com",
     *       "external_id": "sai989sur98w9",
     *       "id": 35436,
     *       "last_login_at": "2011-05-05T10:38:52Z",
     *       "locale": "en-US",
     *       "locale_id": 1,
     *       "moderator": true,
     *       "name": "Johnny Agent",
     *       "notes": "Johnny is a nice guy!",
     *       "only_private_comments": false,
     *       "organization_id": 57542,
     *       "phone": "+15551234567",
     *       "photo": {
     *         "content_type": "image/png",
     *         "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic.png",
     *         "id": 928374,
     *         "name": "my_funny_profile_pic.png",
     *         "size": 166144,
     *         "thumbnails": [
     *           {
     *             "content_type": "image/png",
     *             "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png",
     *             "id": 928375,
     *             "name": "my_funny_profile_pic_thumb.png",
     *             "size": 58298
     *           }
     *         ]
     *       },
     *       "restricted_agent": true,
     *       "role": "agent",
     *       "role_type": 0,
     *       "shared": false,
     *       "shared_agent": false,
     *       "signature": "Have a nice day, Johnny",
     *       "suspended": true,
     *       "tags": [
     *         "enterprise",
     *         "other_tag"
     *       ],
     *       "ticket_restriction": "assigned",
     *       "time_zone": "Copenhagen",
     *       "updated_at": "2011-05-05T10:38:52Z",
     *       "url": "https://company.zendesk.com/api/v2/users/35436.json",
     *       "user_fields": {
     *         "user_date": "2012-07-23T00:00:00Z",
     *         "user_decimal": 5.1,
     *         "user_dropdown": "option_1"
     *       },
     *       "verified": true
     *     }
     *   ]
     * }
     */
    TimeBasedExportIncrementalUsersResponse: {
      count?: number;
      end_of_stream?: boolean;
      end_time?: number;
      next_page?: string | null;
      users?: components["schemas"]["UserObject"][];
    };
    TrialAccountObject: {
      /** @description The name of the account */
      name?: string;
      /** @description The subdomain of the account */
      subdomain?: string;
      /** @description The URL of the account */
      url?: string;
    };
    TrialAccountResponse: {
      account?: components["schemas"]["TrialAccountObject"];
    };
    TriggerActionDefinitionObject: {
      group?: string;
      nullable?: boolean;
      repeatable?: boolean;
      subject?: string;
      title?: string;
      type?: string;
      values?: {
          enabled?: boolean;
          title?: string;
          value?: string;
        }[];
    };
    /**
     * @example {
     *   "field": [
     *     {
     *       "change": "+",
     *       "content": "solved"
     *     }
     *   ],
     *   "value": [
     *     {
     *       "change": "-",
     *       "content": "open"
     *     }
     *   ]
     * }
     */
    TriggerActionDiffObject: {
      /** @description An array of [change](#change) objects. */
      field?: components["schemas"]["TriggerChangeObject"][];
      /** @description An array of [change](#change) objects. */
      value?: components["schemas"]["TriggerChangeObject"][];
    };
    /**
     * @example {
     *   "field": "status",
     *   "value": "solved"
     * }
     */
    TriggerActionObject: {
      field?: string;
      value?: string | number | ((string | number)[]);
    };
    TriggerBatchRequest: {
      active?: boolean;
      category_id?: string;
      id: string;
      /** Format: int64 */
      position?: number;
    };
    /**
     * @example {
     *   "active": true,
     *   "category_id": "10026",
     *   "id": 25,
     *   "position": 8
     * }
     */
    TriggerBulkUpdateItem: {
      /** @description The active status of the trigger (true or false) */
      active?: boolean;
      /** @description The ID of the new category the trigger is to be moved to */
      category_id?: string;
      /** @description The ID of the trigger to update */
      id: number;
      /** @description The new position of the trigger */
      position?: number;
    };
    TriggerBulkUpdateRequest: {
      triggers?: components["schemas"]["TriggerBulkUpdateItem"][];
    };
    TriggerCategoriesResponse: {
      trigger_categories?: (components["schemas"]["TriggerCategory"] & components["schemas"]["TriggerCategoryRuleCounts"])[];
    };
    TriggerCategory: {
      created_at?: string;
      id?: string;
      name?: string;
      /** Format: int64 */
      position?: number;
      updated_at?: string;
    };
    TriggerCategoryBatchRequest: {
      id: string;
      /** Format: int64 */
      position: number;
    };
    TriggerCategoryId: string;
    TriggerCategoryRequest: {
      name?: string;
      /** Format: int64 */
      position?: number;
    };
    TriggerCategoryRequestRequired: Record<string, never>;
    TriggerCategoryResponse: {
      trigger_category?: components["schemas"]["TriggerCategory"];
    };
    TriggerCategoryRuleCounts: {
      /** Format: int64 */
      active_count?: number;
      /** Format: int64 */
      inactive_count?: number;
    };
    /**
     * @example {
     *   "change": "+",
     *   "content": "solved"
     * }
     */
    TriggerChangeObject: {
      /** @description One of `-`, `+`, `=` representing the type of change */
      change?: string;
      /** @description The value of the item it represents */
      content?: boolean | string | number | ((string | number | boolean)[]);
    };
    TriggerConditionDefinitionObjectAll: {
      group?: string;
      nullable?: boolean;
      operators?: {
          terminal?: boolean;
          title?: string;
          value?: string;
        }[];
      repeatable?: boolean;
      subject?: string;
      title?: string;
      type?: string;
      values?: {
          enabled?: boolean;
          title?: string;
          value?: string;
        }[];
    };
    TriggerConditionDefinitionObjectAny: {
      group?: string;
      nullable?: boolean;
      operators?: {
          terminal?: boolean;
          title?: string;
          value?: string;
        }[];
      repeatable?: boolean;
      subject?: string;
      title?: string;
      type?: string;
    };
    /**
     * @example {
     *   "field": [
     *     {
     *       "change": "=",
     *       "content": "status"
     *     }
     *   ],
     *   "operator": [
     *     {
     *       "change": "=",
     *       "content": "less_than"
     *     }
     *   ],
     *   "value": [
     *     {
     *       "change": "+",
     *       "content": "solved"
     *     }
     *   ]
     * }
     */
    TriggerConditionDiffObject: {
      /** @description An array of [change](#change) objects */
      field?: components["schemas"]["TriggerChangeObject"][];
      /** @description An array of [change](#change) objects */
      operator?: components["schemas"]["TriggerChangeObject"][];
      /** @description An array of [change](#change) objects */
      value?: components["schemas"]["TriggerChangeObject"][];
    };
    /**
     * @example {
     *   "field": "status",
     *   "operator": "less_than",
     *   "value": "solved"
     * }
     */
    TriggerConditionObject: {
      field?: string;
      operator?: string;
      value?: string | number | ((string | number)[]);
    };
    TriggerConditionsDiffObject: {
      all?: components["schemas"]["TriggerConditionDiffObject"][] | null;
      any?: components["schemas"]["TriggerConditionDiffObject"][] | null;
    };
    /**
     * @description An object that describes the conditions under which the trigger will execute. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
     * @example {
     *   "all": [
     *     {
     *       "field": "status",
     *       "operator": "less_than",
     *       "value": "solved"
     *     },
     *     {
     *       "field": "assignee_id",
     *       "operator": "is",
     *       "value": "296220096"
     *     },
     *     {
     *       "field": "custom_status_id",
     *       "operator": "includes",
     *       "value": [
     *         "1",
     *         "2"
     *       ]
     *     }
     *   ],
     *   "any": [
     *     {
     *       "field": "status",
     *       "operator": "less_than",
     *       "value": "solved"
     *     },
     *     {
     *       "field": "custom_status_id",
     *       "operator": "includes",
     *       "value": [
     *         "1",
     *         "2"
     *       ]
     *     }
     *   ]
     * }
     */
    TriggerConditionsObject: {
      all?: components["schemas"]["TriggerConditionObject"][] | null;
      any?: components["schemas"]["TriggerConditionObject"][] | null;
    };
    TriggerDefinitionObject: {
      actions?: components["schemas"]["TriggerActionDefinitionObject"][];
      conditions_all?: components["schemas"]["TriggerConditionDefinitionObjectAll"][];
      conditions_any?: components["schemas"]["TriggerConditionDefinitionObjectAny"][];
    };
    TriggerDefinitionResponse: {
      definitions?: components["schemas"]["TriggerDefinitionObject"];
    };
    /**
     * @example {
     *   "actions": [
     *     {}
     *   ],
     *   "active": true,
     *   "category_id": "10026",
     *   "conditions": {},
     *   "created_at": "2012-09-25T22:50:26Z",
     *   "default": false,
     *   "description": "Close and save a ticket",
     *   "id": 25,
     *   "position": 8,
     *   "raw_title": "Close and Save",
     *   "title": "Close and Save",
     *   "updated_at": "2012-09-25T22:50:26Z",
     *   "url": "http://{subdomain}.zendesk.com/api/v2/triggers/25.json"
     * }
     */
    TriggerObject: {
      /** @description An array of actions describing what the trigger will do. See [Actions reference](/documentation/ticketing/reference-guides/actions-reference) */
      actions: components["schemas"]["TriggerActionObject"][];
      /** @description Whether the trigger is active */
      active?: boolean;
      /** @description The ID of the category the trigger belongs to */
      category_id?: string;
      conditions: components["schemas"]["TriggerConditionsObject"];
      /** @description The time the trigger was created */
      created_at?: string;
      /** @description If true, the trigger is a default trigger */
      default?: boolean;
      /** @description The description of the trigger */
      description?: string;
      /** @description Automatically assigned when created */
      id?: number;
      /** @description Position of the trigger, determines the order they will execute in */
      position?: number;
      /** @description The raw format of the title of the trigger */
      raw_title?: string;
      /** @description The title of the trigger */
      title: string;
      /** @description The time of the last update of the trigger */
      updated_at?: string;
      /** @description The url of the trigger */
      url?: string;
    };
    TriggerResponse: {
      trigger?: components["schemas"]["TriggerObject"];
    };
    TriggerRevisionResponse: {
      trigger_revision?: {
        author_id?: number;
        created_at?: string;
        id?: number;
        snapshot?: {
          actions?: components["schemas"]["TriggerActionObject"][];
          active?: boolean;
          conditions?: components["schemas"]["TriggerConditionsObject"];
          description?: string | null;
          title?: string;
        };
        url?: string;
      };
    };
    TriggerRevisionsResponse: {
      after_cursor?: string;
      after_url?: string;
      before_cursor?: string;
      before_url?: string;
      count?: number;
      trigger_revisions?: {
          author_id?: number;
          created_at?: string;
          diff?: {
            /** @description An array that contain [action diff objects](#Action Diffs) */
            actions?: components["schemas"]["TriggerActionDiffObject"][];
            /** @description An array of [change](#change) objects */
            active?: components["schemas"]["TriggerChangeObject"][];
            conditions?: components["schemas"]["TriggerConditionDiffObject"];
            /** @description An array of [change](#change) objects */
            description?: components["schemas"]["TriggerChangeObject"][];
            /** @description ID of the source revision */
            source_id?: number;
            /** @description ID of the target revision */
            target_id?: number;
            /** @description An array of [change](#change) objects */
            title?: components["schemas"]["TriggerChangeObject"][];
          };
          id?: number;
          snapshot?: components["schemas"]["TriggerSnapshotObject"];
          url?: string;
        }[];
    };
    /**
     * @example {
     *   "actions": [],
     *   "active": true,
     *   "conditions": {},
     *   "description": "Notifies requester that a comment was updated",
     *   "title": "Notify requester of comment update"
     * }
     */
    TriggerSnapshotObject: {
      /** @description An array of [Actions](#actions) describing what the trigger will do */
      actions?: components["schemas"]["TriggerActionObject"][];
      /** @description Whether the trigger is active */
      active?: boolean;
      conditions?: components["schemas"]["TriggerConditionsObject"];
      /** @description The description of the trigger */
      description?: string | null;
      /** @description The title of the trigger */
      title?: string;
    };
    TriggerWithCategoryRequest: {
      trigger?: components["schemas"]["TriggerObject"] & (components["schemas"]["TriggerCategory"] | components["schemas"]["TriggerCategoryId"]);
    };
    TriggersResponse: {
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
      triggers?: components["schemas"]["TriggerObject"][];
    };
    /**
     * Monitored Twitter handles
     * @example {
     *   "created_at": "2009-05-13T00:07:08Z",
     *   "id": 211,
     *   "screen_name": "@zendesk",
     *   "twitter_user_id": 67462376832,
     *   "updated_at": "2011-07-22T00:11:12Z"
     * }
     */
    TwitterChannelObject: {
      /** @description If replies are allowed for this handle */
      allow_reply?: boolean;
      /** @description The profile image url of the handle */
      avatar_url?: string;
      /** @description What brand the handle is associated with */
      brand_id?: number;
      /** @description If replies are allowed for this handle */
      can_reply?: boolean;
      /**
       * Format: date-time
       * @description The time the handle was created
       */
      created_at?: string;
      /** @description Automatically assigned upon creation */
      id: number;
      /** @description The profile name of the handle */
      name?: string;
      /** @description The Twitter handle */
      screen_name: string;
      /** @description The country's code */
      twitter_user_id: number;
      /**
       * Format: date-time
       * @description The time of the last update of the handle
       */
      updated_at?: string;
    };
    TwitterChannelResponse: {
      monitored_twitter_handle?: components["schemas"]["TwitterChannelObject"];
    };
    TwitterChannelTwicketStatusResponse: {
      statuses?: {
          favorited?: boolean;
          id?: number;
          retweeted?: boolean;
          user_followed?: boolean;
        }[];
    };
    TwitterChannelsResponse: {
      monitored_twitter_handles?: components["schemas"]["TwitterChannelObject"][];
    };
    UpdateResourceResult: {
      /** @description the action the job attempted (`"action": "update"`) */
      action: string;
      /** @description the id of the resource the job attempted to update */
      id: number;
      /** @description the status (`"status": "Updated"`) */
      status: string;
      /** @description whether the action was successful or not (`"success": true`) */
      success: boolean;
    };
    UrlObject: {
      url?: string;
    };
    UserCreateInput: {
      custom_role_id?: number;
      email: string;
      external_id?: string;
      identities?: {
          type: string;
          value: string;
        }[];
      name: string;
      organization?: {
        name: string;
      };
      organization_id?: number;
      role?: string;
    };
    /**
     * @example {
     *   "active": true,
     *   "created_at": "2012-10-16T16:04:06Z",
     *   "description": "Description of Custom Field",
     *   "id": 7,
     *   "key": "custom_field_1",
     *   "position": 9999,
     *   "raw_description": "{{dc.my_description}}",
     *   "raw_title": "Custom Field 1",
     *   "regexp_for_validation": null,
     *   "title": "Custom Field 1",
     *   "type": "text",
     *   "updated_at": "2012-10-16T16:04:06Z",
     *   "url": "https://company.zendesk.com/api/v2/user_fields/7.json"
     * }
     */
    UserFieldObject: components["schemas"]["CustomFieldObject"];
    UserFieldResponse: {
      user_field?: components["schemas"]["UserFieldObject"];
    };
    UserFieldsResponse: {
      /** @description Total count of records retrieved */
      count?: number;
      /** @description URL of the next page */
      next_page?: string | null;
      /** @description URL of the previous page */
      previous_page?: string | null;
      user_fields?: components["schemas"]["UserFieldObject"][];
    };
    /**
     * Users
     * @example {
     *   "active": true,
     *   "alias": "Mr. Johnny",
     *   "created_at": "2009-07-20T22:55:29Z",
     *   "custom_role_id": 9373643,
     *   "details": "",
     *   "email": "johnny@example.com",
     *   "external_id": "sai989sur98w9",
     *   "iana_time_zone": "Pacific/Pago_Pago",
     *   "id": 35436,
     *   "last_login_at": "2011-05-05T10:38:52Z",
     *   "locale": "en-US",
     *   "locale_id": 1,
     *   "moderator": true,
     *   "name": "Johnny Agent",
     *   "notes": "Johnny is a nice guy!",
     *   "only_private_comments": false,
     *   "organization_id": 57542,
     *   "phone": "+15551234567",
     *   "photo": {
     *     "content_type": "image/png",
     *     "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic.png",
     *     "id": 928374,
     *     "name": "my_funny_profile_pic.png",
     *     "size": 166144,
     *     "thumbnails": [
     *       {
     *         "content_type": "image/png",
     *         "content_url": "https://company.zendesk.com/photos/my_funny_profile_pic_thumb.png",
     *         "id": 928375,
     *         "name": "my_funny_profile_pic_thumb.png",
     *         "size": 58298
     *       }
     *     ]
     *   },
     *   "restricted_agent": true,
     *   "role": "agent",
     *   "role_type": 0,
     *   "shared": false,
     *   "shared_agent": false,
     *   "signature": "Have a nice day, Johnny",
     *   "suspended": true,
     *   "tags": [
     *     "enterprise",
     *     "other_tag"
     *   ],
     *   "ticket_restriction": "assigned",
     *   "time_zone": "Copenhagen",
     *   "updated_at": "2011-05-05T10:38:52Z",
     *   "url": "https://company.zendesk.com/api/v2/users/35436.json",
     *   "user_fields": {
     *     "user_date": "2012-07-23T00:00:00Z",
     *     "user_decimal": 5.1,
     *     "user_dropdown": "option_1"
     *   },
     *   "verified": true
     * }
     */
    UserForAdmin: {
      /** @description false if the user has been deleted */
      active?: boolean;
      /** @description An alias displayed to end users */
      alias?: string;
      /** @description Whether or not the user is a chat-only agent */
      chat_only?: boolean;
      /**
       * Format: datetime
       * @description The time the user was created
       */
      created_at?: string;
      /** @description A custom role if the user is an agent on the Enterprise plan or above */
      custom_role_id?: number | null;
      /** @description The id of the user's default group */
      default_group_id?: number;
      /** @description Any details you want to store about the user, such as an address */
      details?: string;
      /** @description The user's primary email address. *Writeable on create only. On update, a secondary email is added. See [Email Address](#email-address) */
      email?: string;
      /** @description A unique identifier from another system. The API treats the id as case insensitive. Example: "ian1" and "IAN1" are the same value. */
      external_id?: string | null;
      /** @description The time zone for the user */
      iana_time_zone?: string;
      /** @description Automatically assigned when the user is created */
      id?: number;
      /**
       * Format: datetime
       * @description Last time the user signed in to Zendesk Support or made an API request
       * using an API token or basic authentication
       */
      last_login_at?: string;
      /** @description The user's locale. A BCP-47 compliant tag for the locale. If both "locale" and "locale_id" are present on create or update, "locale_id" is ignored and only "locale" is used. */
      locale?: string;
      /** @description The user's language identifier */
      locale_id?: number;
      /** @description Designates whether the user has forum moderation capabilities */
      moderator?: boolean;
      /** @description The user's name */
      name: string;
      /** @description Any notes you want to store about the user */
      notes?: string;
      /** @description true if the user can only create private comments */
      only_private_comments?: boolean;
      /** @description The id of the user's organization. If the user has more than one [organization memberships](/api-reference/ticketing/organizations/organization_memberships/), the id of the user's default organization. If updating, see [Organization ID](#organization-id) */
      organization_id?: number | null;
      /** @description The user's primary phone number. See [Phone Number](#phone-number) below */
      phone?: string | null;
      /** @description The user's profile picture represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/) object */
      photo?: {
        [key: string]: unknown;
      } | null;
      /** @description A URL pointing to the user's profile picture. */
      remote_photo_url?: string;
      /**
       * @description This parameter is inert and has no effect. It may be deprecated in the
       * future.
       *
       * Previously, this parameter determined whether a user could access a CSV
       * report in a legacy Guide dashboard. This dashboard has been removed. See
       * [Announcing Guide legacy reporting upgrade to
       * Explore](https://support.zendesk.com/hc/en-us/articles/4762263171610-Announcing-Guide-legacy-reporting-upgrade-to-Explore-)
       */
      report_csv?: boolean;
      /** @description If the agent has any restrictions; false for admins and unrestricted agents, true for other agents */
      restricted_agent?: boolean;
      /** @description The user's role. Possible values are "end-user", "agent", or "admin" */
      role?: string;
      /** @description The user's role id. 0 for a custom agent, 1 for a light agent, 2 for a chat agent, 3 for a chat agent added to the Support account as a contributor ([Chat Phase 4](https://support.zendesk.com/hc/en-us/articles/360022365373#topic_djh_1zk_4fb)), 4 for an admin, and 5 for a billing admin */
      role_type?: number | null;
      /** @description If the user is shared from a different Zendesk Support instance. Ticket sharing accounts only */
      shared?: boolean;
      /** @description If the user is a shared agent from a different Zendesk Support instance. Ticket sharing accounts only */
      shared_agent?: boolean;
      /** @description Whether the `phone` number is shared or not. See [Phone Number](#phone-number) below */
      shared_phone_number?: boolean | null;
      /** @description The user's signature. Only agents and admins can have signatures */
      signature?: string;
      /** @description If the agent is suspended. Tickets from suspended users are also suspended, and these users cannot sign in to the end user portal */
      suspended?: boolean;
      /** @description The user's tags. Only present if your account has user tagging enabled */
      tags?: string[];
      /** @description Specifies which tickets the user has access to. Possible values are: "organization", "groups", "assigned", "requested", null. "groups" and "assigned" are valid only for agents. If you pass an invalid value to an end user (for example, "groups"), they will be assigned to "requested", regardless of their previous access */
      ticket_restriction?: string | null;
      /** @description The user's time zone. See [Time Zone](#time-zone) */
      time_zone?: string;
      /** @description If two factor authentication is enabled */
      two_factor_auth_enabled?: boolean | null;
      /**
       * Format: datetime
       * @description The time the user was last updated
       */
      updated_at?: string;
      /** @description The user's API url */
      url?: string;
      /** @description Values of custom fields in the user's profile. See [User Fields](#user-fields) */
      user_fields?: {
        [key: string]: unknown;
      };
      /** @description Any of the user's identities is verified. See [User Identities](/api-reference/ticketing/users/user_identities) */
      verified?: boolean;
    };
    UserForEndUser: {
      /**
       * Format: datetime
       * @description The time the user was created
       */
      created_at?: string;
      /** @description The primary email address of this user. If the primary email address is not [verified](https://support.zendesk.com/hc/en-us/articles/4408886752410), the secondary email address is used */
      email?: string;
      /** @description The time zone for the user */
      iana_time_zone?: string;
      /** @description Automatically assigned when creating users */
      id?: number;
      /** @description The locale for this user */
      locale?: string;
      /** @description The language identifier for this user */
      locale_id?: number;
      /** @description The name of the user */
      name: string;
      /** @description The id of the user's organization. If the user has more than one [organization memberships](/api-reference/ticketing/organizations/organization_memberships/), the id of the user's default organization. If updating, see [Organization ID](/api-reference/ticketing/users/users/#organization-id) */
      organization_id?: number;
      /** @description The primary phone number of this user. See [Phone Number](/api-reference/ticketing/users/users/#phone-number) in the Users API */
      phone?: string;
      /** @description The user's profile picture represented as an [Attachment](/api-reference/ticketing/tickets/ticket-attachments/) object */
      photo?: {
        [key: string]: unknown;
      };
      /** @description The role of the user. Possible values: `"end-user"`, `"agent"`, `"admin"` */
      role?: string;
      /** @description Whether the `phone` number is shared or not. See [Phone Number](/api-reference/ticketing/users/users/#phone-number) in the Users API */
      shared_phone_number?: boolean;
      /** @description The time-zone of this user */
      time_zone?: string;
      /**
       * Format: datetime
       * @description The time of the last update of the user
       */
      updated_at?: string;
      /** @description The API url of this user */
      url?: string;
      /** @description Any of the user's identities is verified. See [User Identities](/api-reference/ticketing/users/user_identities) */
      verified?: boolean;
    };
    UserIdentitiesResponse: {
      identities?: components["schemas"]["UserIdentityObject"][];
    };
    /**
     * @example {
     *   "created_at": "2011-07-20T22:55:29Z",
     *   "deliverable_state": "deliverable",
     *   "id": 35436,
     *   "primary": true,
     *   "type": "email",
     *   "updated_at": "2011-07-20T22:55:29Z",
     *   "url": "https://company.zendesk.com/api/v2/users/135/identities/35436.json",
     *   "user_id": 135,
     *   "value": "someone@example.com",
     *   "verified": true
     * }
     */
    UserIdentityObject: {
      /**
       * Format: date-time
       * @description The time the identity was created
       */
      created_at?: string;
      /** @description Email identity type only. Indicates if Zendesk sends notifications to the email address. See [Deliverable state](#deliverable-state) */
      deliverable_state?: string;
      /** @description Automatically assigned on creation */
      id?: number;
      /** @description If the identity is the primary identity. *Writable only when creating, not when updating. Use the [Make Identity Primary](#make-identity-primary) endpoint instead */
      primary?: boolean;
      /**
       * @description The type of this identity
       * @enum {string}
       */
      type: "email" | "twitter" | "facebook" | "google" | "phone_number" | "agent_forwarding" | "any_channel" | "foreign" | "sdk";
      /** @description The number of times a soft-bounce response was received at that address */
      undeliverable_count?: number;
      /**
       * Format: date-time
       * @description The time the identity was updated
       */
      updated_at?: string;
      /** @description The API url of this identity */
      url?: string;
      /** @description The id of the user */
      user_id: number;
      /** @description The identifier for this identity, such as an email address */
      value: string;
      /** @description If the identity has been verified */
      verified?: boolean;
    };
    UserIdentityResponse: {
      identity?: components["schemas"]["UserIdentityObject"];
    };
    UserInput: {
      [key: string]: unknown;
    } & (components["schemas"]["UserCreateInput"] | components["schemas"]["UserMergePropertiesInput"] | components["schemas"]["UserMergeByIdInput"]);
    UserMergeByIdInput: {
      id?: number;
    };
    UserMergePropertiesInput: {
      email?: string;
      name?: string;
      organization_id?: number;
      password?: string;
    };
    UserObject: {
      [key: string]: unknown;
    } & (components["schemas"]["UserForAdmin"] | components["schemas"]["UserForEndUser"]);
    UserPasswordRequirementsResponse: {
      requirements?: string[];
    };
    UserRelatedObject: {
      /** @description Count of assigned tickets */
      assigned_tickets?: number;
      /** @description Count of collaborated tickets */
      ccd_tickets?: number;
      /** @description Count of organization subscriptions */
      organization_subscriptions?: number;
      /** @description Count of requested tickets */
      requested_tickets?: number;
    };
    UserRelatedResponse: {
      user_related?: components["schemas"]["UserRelatedObject"];
    };
    UserRequest: {
      user: components["schemas"]["UserInput"];
    };
    UserResponse: {
      user?: components["schemas"]["UserObject"];
    };
    UsersRequest: {
      users: components["schemas"]["UserInput"][];
    };
    UsersResponse: {
      users?: components["schemas"]["UserObject"][];
    };
    /**
     * @description An object explaining how the ticket was created. See the [Via object reference](/documentation/ticketing/reference-guides/via-object-reference)
     *
     * @example {
     *   "channel": "rule",
     *   "source": {
     *     "from": {
     *       "id": 22472716,
     *       "title": "Assign to first responder"
     *     },
     *     "rel": "trigger",
     *     "to": {}
     *   }
     * }
     */
    readonly ViaObject: {
      /** @description This tells you how the ticket or event was created. Examples: "web", "mobile", "rule", "system" */
      readonly channel?: string;
      /** @description For some channels a source object gives more information about how or why the ticket or event was created */
      readonly source?: {
        from?: {
          address?: string | null;
          id?: number | null;
          name?: string | null;
          title?: string | null;
        };
        rel?: string | null;
        to?: {
          address?: string;
          name?: string;
        };
        [key: string]: unknown;
      };
    };
    ViewCountObject: {
      /** @description Only active views if true, inactive views if false, all views if null. */
      active?: boolean;
      /** @description false if the cached data is stale and the system is still loading and caching new data */
      fresh?: boolean;
      /** @description A pretty-printed text approximation of the view count */
      pretty?: string;
      /** @description The API url of the count */
      url?: string;
      /** @description The cached number of tickets in the view. Can also be null if the system is loading and caching new data. Not to be confused with 0 tickets */
      value?: number | null;
      /** @description The id of the view */
      view_id?: number;
    };
    ViewCountResponse: {
      view_count?: components["schemas"]["ViewCountObject"];
    };
    ViewCountsResponse: {
      view_counts?: components["schemas"]["ViewCountObject"][];
    };
    ViewExportResponse: {
      export?: {
        status?: string;
        view_id?: number;
      };
    };
    /**
     * @example {
     *   "active": true,
     *   "conditions": {
     *     "all": [
     *       {
     *         "field": "status",
     *         "operator": "less_than",
     *         "value": "solved"
     *       },
     *       {
     *         "field": "assignee_id",
     *         "operator": "is",
     *         "value": "296220096"
     *       }
     *     ],
     *     "any": []
     *   },
     *   "default": false,
     *   "description": "View for recent tickets",
     *   "execution": {
     *     "columns": [
     *       {
     *         "id": "status",
     *         "title": "Status"
     *       },
     *       {
     *         "id": "updated",
     *         "title": "Updated"
     *       },
     *       {
     *         "id": 5,
     *         "title": "Account",
     *         "type": "text",
     *         "url": "https://example.zendesk.com/api/v2/ticket_fields/5.json"
     *       }
     *     ],
     *     "group": {
     *       "id": "status",
     *       "order": "desc",
     *       "title": "Status"
     *     },
     *     "sort": {
     *       "id": "updated",
     *       "order": "desc",
     *       "title": "Updated"
     *     }
     *   },
     *   "id": 25,
     *   "position": 8,
     *   "restriction": {
     *     "id": 4,
     *     "type": "User"
     *   },
     *   "title": "Tickets updated <12 Hours"
     * }
     */
    ViewObject: {
      /** @description Whether the view is active */
      active?: boolean;
      /** @description Describes how the view is constructed. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference) */
      conditions?: {
        [key: string]: unknown;
      };
      /**
       * Format: date-time
       * @description The time the view was created
       */
      created_at?: string;
      /** @description If true, the view is a default view */
      default?: boolean;
      /** @description The description of the view */
      description?: string;
      /** @description Describes how the view should be executed. See [Execution](#execution) */
      execution?: {
        [key: string]: unknown;
      };
      /** @description Automatically assigned when created */
      id?: number;
      /** @description The position of the view */
      position?: number;
      /** @description Who may access this account. Is null when everyone in the account can access it */
      restriction?: {
        [key: string]: unknown;
      };
      /** @description The title of the view */
      title?: string;
      /**
       * Format: date-time
       * @description The time the view was last updated
       */
      updated_at?: string;
    };
    ViewResponse: {
      columns?: {
          [key: string]: unknown;
        }[];
      groups?: {
          [key: string]: unknown;
        }[];
      rows?: {
          [key: string]: unknown;
        }[];
      view?: components["schemas"]["ViewObject"];
    };
    ViewsCountResponse: {
      count?: {
        /** Format: date-time */
        refreshed_at?: string;
        value?: number;
      };
    };
    ViewsResponse: {
      count?: number;
      next_page?: string | null;
      previous_page?: string | null;
      views?: components["schemas"]["ViewObject"][];
    };
    WorkspaceInput: {
      conditions?: components["schemas"]["ConditionsObject"];
      /** @description User-defined description of this workspace's purpose */
      description?: string;
      macros?: number[];
      ticket_form_id?: number;
      /** @description The title of the workspace */
      title?: string;
    };
    WorkspaceObject: {
      /** @description If true, this workspace is available for use */
      activated?: boolean;
      /** @description The apps associated to this workspace */
      apps?: {
          [key: string]: unknown;
        }[];
      conditions?: components["schemas"]["ConditionsObject"];
      /**
       * Format: date-time
       * @description The time the workspace was created
       */
      created_at?: string;
      /** @description User-defined description of this workspace's purpose */
      description?: string;
      /** @description Automatically assigned upon creation */
      id?: number;
      /** @description The ids of the macros associated to this workspace */
      macro_ids?: number[];
      /** @description The ids of the macros associated to this workspace */
      macros?: number[];
      /** @description Ordering of the workspace relative to other workspaces */
      position?: number;
      /** @description If true, the order of apps within the workspace will be preserved */
      prefer_workspace_app_order?: boolean;
      /** @description An array of the macro objects that will be used in this workspace. See [Macros](/api-reference/ticketing/business-rules/macros/) */
      selected_macros?: components["schemas"]["MacroObject"][];
      /** @description The id of the ticket web form associated to this workspace */
      ticket_form_id?: number;
      /** @description The title of the workspace */
      title?: string;
      /**
       * Format: date-time
       * @description The time of the last update of the workspace
       */
      updated_at?: string;
      /** @description The URL for this resource */
      url?: string;
    };
    WorkspaceResponse: {
      workspaces?: components["schemas"]["WorkspaceObject"][];
    } & components["schemas"]["OffsetPaginationObject"];
  };
  responses: never;
  parameters: {
    /**
     * @description The activity ID
     * @example 29183462
     */
    ActivityId: number;
    /**
     * @description A UTC time in ISO 8601 format to return ticket activities since said date.
     * @example 2013-04-03T16:02:46Z
     */
    ActivitySince?: string;
    /** @description ID of an agent */
    AgentId: number;
    /** @description If `true`, any ticket created with a `closed` status bypasses the normal ticket lifecycle and will be created directly in your ticket archive */
    ArchiveImmediately?: boolean;
    /**
     * @description Query string used to search assignable groups & agents in the AssigneeField
     * @example Johnny Agent
     */
    AssigneeFieldSearchValue: string;
    /**
     * @description The ID of the attachment
     * @example 498483
     */
    AttachmentId: number;
    /**
     * @description The ID of the audit log
     * @example 498483
     */
    AuditLogId: number;
    /**
     * @description Filter by active automations if true or inactive automations if false
     * @example true
     */
    AutomationActive?: boolean;
    /**
     * @description The ID of the automation
     * @example 25
     */
    AutomationId: number;
    /**
     * @description A sideload to include in the response. See [Sideloads](#sideloads-2)
     * @example usage_24h
     */
    AutomationInclude?: string;
    /**
     * @description Query string used to find all automations with matching title
     * @example close
     */
    AutomationSearchQuery: string;
    /**
     * @description Possible values are "alphabetical", "created_at", "updated_at", and "position". If unspecified, the automations are sorted by relevance
     * @example position
     */
    AutomationSortBy?: string;
    /**
     * @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
     * @example desc
     */
    AutomationSortOrder?: string;
    /**
     * @description The ID of the bookmark
     * @example 900000001111
     */
    BookmarkId: number;
    /**
     * @description The ID of the brand
     * @example 360002783572
     */
    BrandId: number;
    /**
     * @description The ID of the comment
     * @example 654321
     */
    CommentId: number;
    /**
     * @description If true, displays the `creator_user_id` and `creator_app_name` properties. If the ticket field is created
     *  by an app, `creator_app_name` is the name of the app and `creator_user_id` is `-1`. If the ticket field
     *  is not created by an app, then `creator_app_name` is null
     */
    Creator?: boolean;
    /**
     * @description The key or id of a custom object field
     * @example make
     */
    CustomObjectFieldKeyOrId: string;
    /**
     * @description The key of a custom object
     * @example car
     */
    CustomObjectKey: string;
    /**
     * @description The external id of a custom object record
     * @example X90001
     */
    CustomObjectRecordExternalId: string;
    /**
     * @description The id of a custom object record
     * @example 01GCSJW391QVSC80GYDH7E93Q6
     */
    CustomObjectRecordId: string;
    /**
     * @description The ID of the custom agent role
     * @example 10127
     */
    CustomRoleId: number;
    /**
     * @description The id of the custom status
     * @example 1234567
     */
    CustomStatusId: number;
    /**
     * @description The ID of the deleted user
     * @example 35436
     */
    DeletedUserId: number;
    /**
     * @description The ID of the dynamic content item
     * @example 47
     */
    DynamicContentItemId: number;
    /**
     * @description The ID of the variant
     * @example 23
     */
    DynamicContentVariantId: number;
    /**
     * @description Essentials card type. Example: `zen:user` refers user type
     *
     * @example zen:user
     */
    EssentialsCardKey: string;
    /**
     * @description Whether to exclude deleted entities
     * @example false
     */
    ExcludeDeleted?: boolean;
    /**
     * @description The ID of the group
     * @example 122
     */
    GroupId: number;
    /**
     * @description The ID of the group membership
     * @example 4
     */
    GroupMembershipId: number;
    /**
     * @description The id of the Group SLA policy
     * @example 36
     */
    GroupSLAPolicyId: number;
    /**
     * @description The hostmapping to a brand, if any (only admins view this key)
     * @example brand1.com
     */
    HostMapping: string;
    /**
     * @description Include standard fields if true. Exclude them if false
     * @example true
     */
    IncludeStandardFields?: boolean;
    /** @description The cursor pointer to work with for all subsequent exports after the initial request */
    IncrementalCursor?: string;
    /** @description The number of records to return per page */
    IncrementalPage?: number;
    /**
     * @description The resource requested for incremental sample export
     * @example tickets
     */
    IncrementalResource: string;
    /**
     * @description A query start time for incremental exports
     * @example 1383685952
     */
    IncrementalTimeQueryParameter?: number;
    /**
     * @description The time to start the incremental export from. Must be at least one minute in the past. Data isn't provided for the most recent minute
     * @example 1332034771
     */
    IncrementalUnixTime: number;
    /**
     * @description the Id of the Job status
     * @example 8b726e606741012ffc2d782bcb7848fe
     */
    JobStatusId: string;
    /**
     * @description The ID or the [BCP-47 code](https://en.wikipedia.org/wiki/IETF_language_tag) of the locale. Examples: es-419, en-us, pr-br
     *
     * @example es-419
     */
    LocaleId: string;
    /**
     * @description The id of a lookup relationship field.  The type of field is determined
     * by the `source` param
     */
    LookupRelationshipAutocompleteFieldIdFragment?: string;
    /**
     * @description If a `field_id` is provided, this specifies the type of the field.
     * For example, if the field is on a "zen:user", it references a field on a user
     */
    LookupRelationshipAutocompleteSourceFragment?: string;
    /**
     * @description Filter macros by access. Possible values are "personal", "agents", "shared", or "account". The "agents" value returns all personal macros for the account's agents and is only available to admins.
     * @example personal
     */
    MacroAccess?: string;
    /**
     * @description Filter by active macros if true or inactive macros if false
     * @example true
     */
    MacroActive?: boolean;
    /**
     * @description Filter macros by category
     * @example 25
     */
    MacroCategory?: number;
    /**
     * @description Filter macros by group
     * @example 25
     */
    MacroGroupId?: number;
    /**
     * @description The ID of the macro
     * @example 25
     */
    MacroId: number;
    /**
     * @description The ID of the macro to replicate
     * @example 25
     */
    MacroIdQuery: number;
    /**
     * @description A sideload to include in the response. See [Sideloads](#sideloads-2)
     * @example usage_7d
     */
    MacroInclude?: string;
    /**
     * @description If true, returns only macros that can be applied to tickets. If false, returns all macros the current user can manage. Default is false
     * @example false
     */
    MacroOnlyViewable?: boolean;
    /**
     * @description Query string used to find macros with matching titles
     * @example close
     */
    MacroQuery: string;
    /**
     * @description Possible values are alphabetical, "created_at", "updated_at", "usage_1h", "usage_24h", "usage_7d", or "usage_30d". Defaults to alphabetical
     * @example alphabetical
     */
    MacroSortBy?: string;
    /**
     * @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
     * @example asc
     */
    MacroSortOrder?: string;
    /**
     * @description The ID of the custom agent role
     * @example 431
     */
    MonitoredTwitterHandleId: number;
    /**
     * @description Custom object type. Example: `zen:custom_object:car` refers to a custom object type with the
     * `car` key
     *
     * @example zen:custom_object:car
     */
    ObjectKey: string;
    /**
     * @description The id of the omnichannel routing queue
     * @example 01HG80ATNNZK1N7XRFVKX48XD6
     */
    OcrQueueId: string;
    /**
     * @description The external id of an organization
     * @example 1234
     */
    OrganizationExternalId?: number;
    /**
     * @description A list of external ids
     * @example 1764,42156
     */
    OrganizationExternalIds?: string;
    /**
     * @description The ID or key of the organization field
     * @example my_text_field
     */
    OrganizationFieldId: number | string;
    /**
     * @description The ID of an organization
     * @example 16
     */
    OrganizationId: number;
    /**
     * @description A list of organization ids
     * @example 35436,20057623
     */
    OrganizationIds?: string;
    /**
     * @description The ID of the organization membership
     * @example 4
     */
    OrganizationMembershipId: number;
    /**
     * @description The name of an organization
     * @example ACME Incorporated
     */
    OrganizationName?: string;
    /**
     * @description A substring of an organization to search for
     * @example imp
     */
    OrganizationQueryFragment: string;
    /**
     * @description The ID of the organization subscription
     * @example 35436
     */
    OrganizationSubscriptionId: number;
    /**
     * @description The ID of the request
     * @example 33
     */
    RequestId: number;
    /**
     * @description The id of the resource collection
     * @example 10002
     */
    ResourceCollectionId: number;
    /**
     * @description The ID of the SLA Policy
     * @example 36
     */
    SLAPolicyId: number;
    /**
     * @description The ID of the session
     * @example 14
     */
    SessionId: number;
    /**
     * @description The ID of the sharing agreement
     * @example 1
     */
    SharingAgreementId: number;
    /**
     * @description The ID of the skill-based routing attribute
     * @example 6e279587-e930-11e8-a292-09cfcdea1b75
     */
    SkillBasedRoutingAttributeId: string;
    /**
     * @description The ID of the skill-based routing attribute value
     * @example b376b35a-e38b-11e8-a292-e3b6377c5575
     */
    SkillBasedRoutingAttributeValueId: string;
    /**
     * @description User ID of an agent
     * @example 35436
     */
    SkipTicketUserId: number;
    /**
     * @description Subdomain for a given Zendesk account address
     * @example Brand1
     */
    Subdomain: string;
    /**
     * @description The ID of the support address
     * @example 33
     */
    SupportAddressId: number;
    /**
     * @description id of the suspended ticket
     * @example 35436
     */
    SuspendedTicketId: number;
    /**
     * @description A list of suspended ticket ids
     * @example 3436,3437
     */
    SuspendedTicketIds?: string;
    /**
     * @description A comma separated list of ids of suspended tickets to delete.
     * @example 94,141
     */
    SuspendedTicketsDeleteIds: string;
    /**
     * @description A comma separated list of ids of suspended tickets to recover.
     * @example 14,77
     */
    SuspendedTicketsRecoverIds: string;
    /**
     * @description The field to sort the ticket by, being one of `author_email`, `cause`, `created_at`, or `subject`.
     * @example author_email
     */
    SuspendedTicketsSortBy?: string;
    /**
     * @description The order in which to sort the suspended tickets.  This can take value `asc` or `desc`.
     * @example asc
     */
    SuspendedTicketsSortOrder?: string;
    /**
     * @description A substring of a tag to search for
     * @example att
     */
    TagNameFragment?: string;
    /**
     * @description The ID of the target failure
     * @example 1
     */
    TargetFailureId: number;
    /**
     * @description The ID of the target
     * @example 211
     */
    TargetId: number;
    /**
     * @description The ID of the ticket audit
     * @example 2127301143
     */
    TicketAuditId: number;
    /**
     * @description The ID of the ticket comment
     * @example 35436
     */
    TicketCommentId: number;
    /**
     * @description The ID of the ticket field
     * @example 34
     */
    TicketFieldId: number;
    /**
     * @description The ID of the ticket field option
     * @example 10001
     */
    TicketFieldOptionId: number;
    /**
     * @description The ID of the ticket form
     * @example 47
     */
    TicketFormId: number;
    /**
     * @description The ID of the ticket
     * @example 123456
     */
    TicketId: number;
    /**
     * @description Comma-separated list of ticket ids
     * @example 35436,35437
     */
    TicketIds: string;
    /** @description Sort by */
    TicketSortBy?: "id" | "subject" | "deleted_at";
    /** @description Sort order. Defaults to "asc" */
    TicketSortOrder?: "asc" | "desc";
    /**
     * @description Filter by active triggers if true or inactive triggers if false
     * @example true
     */
    TriggerActive?: boolean;
    /**
     * @description Filter triggers by category ID
     * @example 10026
     */
    TriggerCategoryId?: string;
    /**
     * @description The ID of the trigger
     * @example 198
     */
    TriggerId: number;
    /**
     * @description A comma separated list of trigger IDs
     * @example 131,178,938
     */
    TriggerIds: string;
    /**
     * @description A sideload to include in the response. See [Sideloads](#sideloads-2)
     * @example usage_24h
     */
    TriggerInclude?: string;
    /**
     * @description The ID of the revision for a particular trigger
     * @example 1
     */
    TriggerRevisionId: number;
    /** @description Trigger attribute filters for the search. See [Filter](#filter) */
    TriggerSearchFilter?: {
      json?: components["schemas"]["TriggerObject"];
    };
    /**
     * @description Query string used to find all triggers with matching title
     * @example important_trigger
     */
    TriggerSearchQuery: string;
    /**
     * @description Cursor-based pagination only. Possible values are "alphabetical", "created_at", "updated_at", or "position".
     * @example position
     */
    TriggerSort?: string;
    /**
     * @description Offset pagination only. Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
     * @example position
     */
    TriggerSortBy?: string;
    /**
     * @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
     * @example desc
     */
    TriggerSortOrder?: string;
    /**
     * @description List users by external id. External id has to be unique for each user under the same account.
     * @example abc
     */
    UserExternalIdFilter?: string;
    /**
     * @description The ID or key of the user field
     * @example my_text_field
     */
    UserFieldId: number | string;
    /**
     * @description The ID of the user field option
     * @example 10001
     */
    UserFieldOptionId: number;
    /**
     * @description The id of the user
     * @example 35436
     */
    UserId: number;
    /**
     * @description The ID of the user identity
     * @example 77938
     */
    UserIdentityId: number;
    /**
     * @description For custom roles which is available on the Enterprise plan and above. You can only filter by one role ID per request
     * @example 123
     */
    UserPermissionSetFilter?: number;
    /**
     * @description Filters the results by role. Possible values are "end-user", "agent", or "admin"
     *
     * @example agent
     */
    UserRoleFilter?: "end-user" | "agent" | "admin";
    /**
     * @description Filters the results by more than one role using the format `role[]={role}&role[]={role}`
     *
     * @example agent
     */
    UserRolesFilter?: string;
    /**
     * @description The ID of the view
     * @example 25
     */
    ViewId: number;
    /**
     * @description The id of the workspace
     * @example 3133
     */
    WorkspaceId: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List assignable groups and agents based on query matched against name
   * @description List assignable groups and agents based on query matched against name
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListAssigneeFieldAssignableGroupsAndAgentsSearch: {
    parameters: {
      query: {
        name: components["parameters"]["AssigneeFieldSearchValue"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AssigneeFieldAssignableGroupsAndAgentsSearchResponse"];
        };
      };
    };
  };
  /**
   * List assignable groups on the AssigneeField
   * @description List assignable groups on the AssigneeField
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListAssigneeFieldAssignableGroups: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AssigneeFieldAssignableGroupsResponse"];
        };
      };
    };
  };
  /**
   * List assignable agents from a group on the AssigneeField
   * @description List assignable agents from a group on the AssigneeField
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListAssigneeFieldAssignableGroupAgents: {
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AssigneeFieldAssignableGroupAgentsResponse"];
        };
      };
    };
  };
  /**
   * Get sources by target
   * @description Returns a list of source objects whose values are populated with the id of a related target object.  For example,
   * if you have a lookup field called "Success Manager" on a ticket, this endpoint can answer the question,
   * "What tickets (sources) is this user (found by `target_type` and `target_id`)
   * assigned as the 'Success Manager' (field referenced by `field_id`)?"
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  GetSourcesByTarget: {
    parameters: {
      path: {
        /**
         * @description The type of object the relationship field is targeting.
         * The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
         *
         * @example zen:custom_object:apartment
         */
        target_type: string;
        /**
         * @description The id of the object the relationship field is targeting
         *
         * @example 1234
         */
        target_id: number;
        /**
         * @description The id of the lookup relationship field
         *
         * @example 1234
         */
        field_id: number;
        /**
         * @description The type of object the relationship field belongs to (example. ticket field belongs to a ticket object).
         * The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
         *
         * @example zen:custom_object:apartment
         */
        source_type: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ReverseLookupResponse"];
        };
      };
    };
  };
  /**
   * Show Settings
   * @description Shows the settings that are available for the account.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowAccountSettings: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountSettingsResponse"];
        };
      };
    };
  };
  /**
   * Update Account Settings
   * @description Updates settings for the account. See [JSON Format](#json-format) above for the settings you can update.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateAccountSettings: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AccountSettingsResponse"];
        };
      };
    };
  };
  /** Create Trial Account */
  CreateTrialAccount: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TrialAccountResponse"];
        };
      };
    };
  };
  /**
   * Verify Subdomain Availability
   * @description Zendesk Support credentials are not required to access this endpoint. You can use any Zendesk Support subdomain.
   *
   * Returns "true" if the subdomain is available.
   */
  VerifySubdomainAvailability: {
    parameters: {
      query: {
        /**
         * @description Specify the name of the subdomain you want to verify. The name can't contain underscores, hyphens, or spaces.
         *
         * @example z3ndesk
         */
        subdomain: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": {
            success?: boolean;
          };
        };
      };
    };
  };
  /**
   * List Activities
   * @description Lists ticket activities in the last 30 days affecting the agent making the request.
   * Also sideloads the following arrays of user records:
   *
   * - actors - All actors involved in the listed activities
   * - users - All users involved in the listed activities
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListActivities: {
    parameters: {
      query?: {
        since?: components["parameters"]["ActivitySince"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivitiesResponse"];
        };
      };
    };
  };
  /**
   * Show Activity
   * @description Lists a specific activity.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowActivity: {
    parameters: {
      path: {
        activity_id: components["parameters"]["ActivityId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityResponse"];
        };
      };
    };
  };
  /**
   * Count Activities
   * @description Returns an approximate count of ticket activities in the last 30 days affecting the agent making the request. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountActivities: {
    responses: {
      /** @description Count of ticket activities */
      200: {
        content: {
          "application/json": components["schemas"]["ActivitiesCountResponse"];
        };
      };
    };
  };
  /**
   * Report Channelback Error to Zendesk
   * @description #### Allowed For
   *
   * * Admins
   *
   * #### Request parameters
   *
   * The POST request takes a JSON object parameter which contains information about the
   * problematic [channelback](/documentation/channel_framework/understanding-the-channel-framework/channelback/).
   *
   * | Name               | Type      | Required  | Comments
   * | ------------------ | ----------| --------- | -------------------
   * | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed.  This was passed to the integration service when the administrator set up the account
   * | external_id        | string    | yes       | Unique identifier of the external resource from the original channelback (string)
   * | description        | string    | no        | A human readable description of the error
   * | request_id         | string    | no        | A unique identifier for the request
   *
   *
   * #### Response format
   *
   * The response does not include a response body
   */
  ReportChannelbackError: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Push Content to Support
   * @description Pushes Channel framework content to Zendesk.
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Request parameters
   *
   * The POST request takes a JSON object parameter which contains data about all
   * the resources that the client is pushing.
   *
   * | Name               | Type      | Required  | Comments
   * | ------------------ | ----------| --------- | -------------------
   * | instance_push_id   | string    | yes       | The account ID where data will be pushed. This was passed to the integration service when the administrator set up the account
   * | request_id         | string    | no        | A unique identifier for the push request
   * | external_resources | array     | yes       | The [resources](#external_resource-object) to push
   *
   * #### external_resource object
   *
   * | Name               | Type                               | Max length | Mandatory | Comments
   * |------------------- | ---------------------------------- |------------| --------- | ----------
   * | external_id        | string                             | 255        | yes       | Unique identifier of the external resource. Must be ASCII characters
   * | internal_note      | boolean                            |            | no        | If true creates a new internal note comment
   * | message            | string                             | 65535      | yes       | Text to be converted to a ticket or comment
   * | html_message       | string                             | 65535      | no        | HTML version of message
   * | parent_id          | string                             | 511        | no        | Unique identifier of the external resource for which this is a response. Used to choose the correct thread. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
   * | thread_id          | string                             | 255        | no        | Arbitrary identifier of the thread to which this item should belong. Responses may include `parent_id` or `thread_id`, but not both. See [Conversation threads](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#conversation-threads)
   * | created_at         | string                             |            | yes       | When the resource was created in the origin system, as an ISO 8601 extended format date-time. Example: '2015-09-08T22:48:09Z'
   * | author             | object                             |            | yes       | See [author object](#author-object) below
   * | display_info       | array                              |            | no        | Array of integration-specific data used by apps to modify the agent UI. See [display_info object](#display_info-object) below
   * | allow_channelback  | boolean                            |            | no        | If false, prevents the agent from making additional comments on the message in the Zendesk interface
   * | fields             | array                              |            | no        | Array of ticket fields to set in Zendesk and their values. See [fields array](#fields-array)
   * | file_urls          | array                              | 10         | no        | Array of files to be imported into Zendesk. See [file urls](/documentation/channel_framework/understanding-the-channel-framework/pull_endpoint/#file-urls) in the Channel framework docs
   *
   * #### author object
   *
   * | Name        | Type   | Max chars | Mandatory | Comments
   * |------------ | ------ |---------- |---------- |-----------
   * | external_id | string | 255       | yes       | Unique identifier of the user in the origin service
   * | name        | string | 255       | no        | If not supplied, defaults to external id
   * | image_url   | string | 255       | no        | URL to an image for the user
   * | locale      | String | 255       | no        | The user's locale. Must be one of the supported [locales](/api-reference/ticketing/account-configuration/locales/#list-available-public-locales) in Zendesk
   * | fields      | array  |           | no        | Array of items containing user field identifier ('id') and value of field ('value'.)  For system fields ('notes' or 'details'), the identifier is the English name. For custom fields, the identifier may be the ID or the name
   *
   * #### display_info object
   *
   * | Name | Type   | Max chars | Mandatory | Comments
   * |----- | ------ |---------- |---------- |-----------
   * | type | string | 255       | yes       | Globally unique type identifier defined by the integration origin service. Examples: a GUID or URI
   * | data | string | 65535     | yes       | JSON data containing display hints
   *
   * #### fields array
   *
   * The `fields` array lists ticket fields to set in Zendesk and their values. Each item consists of a field identifier (`id`) and a value (`value`) for the field. For Zendesk system fields such as `subject`, the identifier is the English name. For custom fields, the identifier may be a field ID or a name. See [Ticket Fields](/api-reference/ticketing/tickets/ticket_fields/).
   *
   * The `fields` array can only set ticket values on ticket creation, not on ticket updates.
   *
   * #### Response format
   *
   * The response is a JSON object containing a single key:
   *
   * | Name      | Type     | Comments
   * | --------- | -------- | -------------------
   * | results   | array    | An array of [result objects](#result-object)
   *
   * The `results` array contains an entry for each item in the incoming `external_resources` array, in the
   * same order.  For example, if you call `push` with 3 external resources, a successful response will include
   * `results` with three entries, corresponding to your 3 resources.
   *
   * #### result object
   *
   * | Name                 | Type                           | Comments
   * | -------------------- | ------------------------------ | -------------------
   * | external_resource_id | string                         | The external ID of the resource, as passed in
   * | status               | object                         | The status of the import for the indicated resource. See [status object](#status-object)
   *
   * #### status object
   *
   * | Name        | Type   | Comments
   * | ----------- | ------ | -------------------
   * | code        | string | A code indicating the status of the import of the resource, as described in [status codes](#status-codes)
   * | description | string | In the case of an exception, a description of the exception. Otherwise, not present.
   *
   * #### status codes
   *
   * | Key                                       | Description
   * | ----------------------------------------- | ----------------
   * | success                                   | The external resource was successfully converted to a ticket or comment
   * | already_imported                          | Reimport of the external resource was skipped due to a pre-existing ticket or comment for the resource
   * | could_not_locate_parent_external_resource | The parent resource, as identified by parent_id in the [request](#request-parameters), could not be found. The unrecognized parent ID is returned in the description of the [status](#status-object)
   * | processing_error                          | An internal exception occurred while processing the resource. See `description` in the [status object](#status-object)
   * | halted                                    | This resource was not processed because processing of previous resources failed
   */
  PushContentToSupport: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelFrameworkPushResultsResponse"];
        };
      };
    };
  };
  /**
   * Validate Token
   * @description #### Allowed For
   *
   * * Admins
   *
   * #### Request parameters
   *
   * The POST request takes a JSON object parameter which contains the token to be validated.
   *
   * | Name               | Type      | Required  | Comments
   * | ------------------ | ----------| --------- | -------------------
   * | instance_push_id   | string    | yes       | The ID of the account to which data will be pushed. This was passed to the integration service when the administrator set up the account
   * | request_id         | string    | no        | A unique identifier for the push request
   *
   * #### Response format
   *
   * The response body is empty.
   */
  ValidateToken: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Show Attachment
   * @description Shows attachment details. You can get the value of the `attachment_id` parameter by listing the ticket's comments.
   * See [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments). Each comment
   * in the list has an `attachments` list that specifies an `id` for each attachment.
   *
   *
   *  #### Allowed for
   *
   *  * Agents
   */
  ShowAttachment: {
    parameters: {
      path: {
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentResponse"];
        };
      };
    };
  };
  /**
   * Update Attachment for Malware
   * @description Toggles enabling or restricting agent access to attachments with detected malware.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateAttachment: {
    parameters: {
      path: {
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AttachmentUpdateRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentResponse"];
        };
      };
    };
  };
  /**
   * List Audit Logs
   * @description #### Allowed For
   *
   * * Admins on accounts that have audit log access
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   */
  ListAuditLogs: {
    parameters: {
      query?: {
        /** @description Filter audit logs by the source type. For example, user or rule */
        "filter[source_type]"?: string;
        /** @description Filter audit logs by the source id. Requires `filter[source_type]` to also be set */
        "filter[source_id]"?: number;
        /** @description Filter audit logs by the actor id */
        "filter[actor_id]"?: number;
        /** @description Filter audit logs by the ip address */
        "filter[ip_address]"?: string;
        /** @description Filter audit logs by the time of creation. When used, you must specify `filter[created_at]` twice in your request, first with the start time and again with an end time */
        "filter[created_at]"?: string;
        /** @description Filter audit logs by the action */
        "filter[action]"?: string;
        /** @description Offset pagination only. Sort audit logs. Default is `sort_by=created_at` */
        sort_by?: string;
        /** @description Offset pagination only. Sort audit logs. Default is `sort_order=desc` */
        sort_order?: string;
        /** @description Cursor pagination only. Sort audit logs. Default is `sort=-created_at` */
        sort?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AuditLogsResponse"];
        };
      };
    };
  };
  /**
   * Show Audit Log
   * @description #### Allowed For
   *
   * * Admins on accounts that have audit-log access
   */
  ShowAuditLog: {
    parameters: {
      path: {
        audit_log_id: components["parameters"]["AuditLogId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AuditLogResponse"];
        };
      };
    };
  };
  /**
   * Export Audit Logs
   * @description #### Allowed For
   *
   * * Admins on accounts that have audit log access
   */
  ExportAuditLogs: {
    parameters: {
      query?: {
        /** @description Filter audit logs by the source type. For example, user or rule */
        "filter[source_type]"?: string;
        /** @description Filter audit logs by the source id. Requires `filter[source_type]` to also be set. */
        "filter[source_id]"?: number;
        /** @description Filter audit logs by the actor id */
        "filter[actor_id]"?: number;
        /** @description Filter audit logs by the ip address */
        "filter[ip_address]"?: string;
        /** @description Filter audit logs by the time of creation. When used, you must specify `filter[created_at]` twice in your request, first with the start time and again with an end time */
        "filter[created_at]"?: string;
        /** @description Filter audit logs by the action */
        "filter[action]"?: string;
      };
    };
    responses: {
      /** @description Accepted description */
      202: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Search Tags
   * @description Returns an array of registered and recent tag names that start with the characters specified in the `name` query parameter. You must specify at least 2 characters.
   *
   * #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   *
   * #### Allowed For
   *
   * * Agents
   */
  AutocompleteTags: {
    parameters: {
      query?: {
        name?: components["parameters"]["TagNameFragment"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TagsByObjectIdResponse"];
        };
      };
    };
  };
  /**
   * List Automations
   * @description Lists all automations for the current account.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Available Parameters
   *
   * You can pass in any combination of the following optional filters:
   *
   * | Name       | Type    | Comment
   * | ---------- | ------- | -------
   * | active     | boolean | Only active automations if true, inactive automations if false
   * | sort_by    | string  | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
   * | sort_order | string  | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
   *
   * #### Sideloads
   *
   * The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each automation, if present
   * | permissions      | The permissions for each automation
   * | usage_1h         | The number of times each automation has been used in the past hour
   * | usage_24h        | The number of times each automation has been used in the past day
   * | usage_7d         | The number of times each automation has been used in the past week
   * | usage_30d        | The number of times each automation has been used in the past thirty days
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   */
  ListAutomations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationsResponse"];
        };
      };
    };
  };
  /**
   * Create Automation
   * @description Creates an automation.
   *
   * New automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.
   *
   * The request must include the following conditions in the `all` array:
   *
   * - At least one time-based condition
   * - At least one condition that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateAutomation: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["AutomationResponse"];
        };
      };
    };
  };
  /**
   * Show Automation
   * @description #### Allowed For
   *
   * * Agents
   */
  ShowAutomation: {
    parameters: {
      path: {
        automation_id: components["parameters"]["AutomationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationResponse"];
        };
      };
    };
  };
  /**
   * Update Automation
   * @description Updates an automation.
   *
   * Updated automations must be unique and have at least one condition that is true only once or an action that nullifies at least one of the conditions. Active automations can have overlapping conditions but can't be identical.
   *
   * The request must include the following conditions in the `all` array:
   * - At least one time-based condition
   * - At least one condition that checks one of the following fields: 'status', 'type', 'group_id', 'assignee_id', or 'requester_id'
   *
   * **Note**: Updating a condition or action updates both the `conditions` and `actions` arrays, clearing all existing values of both arrays. Include all your conditions and actions when updating any condition or action.
   * **Note**: You might be restricted from updating some default automations.
   *
   * #### Allowed For
   *
   * * Agents
   */
  UpdateAutomation: {
    parameters: {
      path: {
        automation_id: components["parameters"]["AutomationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationResponse"];
        };
      };
    };
  };
  /**
   * Delete Automation
   * @description **Note**: You might be restricted from deleting some default automations.
   *
   * #### Allowed For
   *
   * * Agents
   */
  DeleteAutomation: {
    parameters: {
      path: {
        automation_id: components["parameters"]["AutomationId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Active Automations
   * @description Lists all active automations.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Available Parameters
   *
   * You can pass in any combination of the following optional filters:
   *
   * | Name       | Type   | Comment
   * | ---------- | ------ | -------
   * | sort_by    | string | Possible values are "alphabetical", "created_at", "updated_at", "usage_1h", "usage_24h", or "usage_7d". Defaults to "position"
   * | sort_order | string | One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each automation, if present
   * | permissions      | The permissions for each automation
   * | usage_1h         | The number of times each automation has been used in the past hour
   * | usage_24h        | The number of times each automation has been used in the past day
   * | usage_7d         | The number of times each automation has been used in the past week
   * | usage_30d        | The number of times each automation has been used in the past thirty days
   */
  ListActiveAutomations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationsResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Automations
   * @description Deletes the automations corresponding to the provided comma-separated list of IDs.
   *
   * **Note**: You might be restricted from deleting some default automations. If included in a bulk deletion, the unrestricted automations will be deleted.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Request Parameters
   *
   * The DELETE request takes one parameter, an `ids` object that lists the automations to delete.
   *
   * | Name | Description
   * | ---- | -----------
   * | ids  | The IDs of the automations to delete
   *
   * #### Example request
   *
   * ```js
   * {
   *   "ids": "25,23,27,22"
   * }
   * ```
   */
  BulkDeleteAutomations: {
    parameters: {
      query?: {
        /** @description The IDs of the automations to delete */
        ids?: number[];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Search Automations
   * @description #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each automation, if present
   * | permissions      | The permissions for each automation
   * | usage_1h         | The number of times each automation has been used in the past hour
   * | usage_24h        | The number of times each automation has been used in the past day
   * | usage_7d         | The number of times each automation has been used in the past week
   * | usage_30d        | The number of times each automation has been used in the past thirty days
   */
  SearchAutomations: {
    parameters: {
      query: {
        query: components["parameters"]["AutomationSearchQuery"];
        active?: components["parameters"]["AutomationActive"];
        sort_by?: components["parameters"]["AutomationSortBy"];
        sort_order?: components["parameters"]["AutomationSortOrder"];
        include?: components["parameters"]["AutomationInclude"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationsResponse"];
        };
      };
    };
  };
  /**
   * Update Many Automations
   * @description **Note**: You might be restricted from updating some default automations. If included in a bulk update, the unrestricted automations will be updated.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Request Parameters
   *
   * The PUT request expects an `automations` object that lists the automations to update.
   *
   * Each automation may have the following properties:
   *
   * | Name     | Mandatory | Description
   * | -------- | --------- | -----------
   * | id       | yes       | The ID of the automation to update
   * | position | no        | The new position of the automation
   * | active   | no        | The active status of the automation (true or false)
   *
   * #### Example Request
   *
   * ```js
   * {
   *   "automations": [
   *     {"id": 25, "position": 3},
   *     {"id": 23, "position": 5},
   *     {"id": 27, "position": 9},
   *     {"id": 22, "position": 7}
   *   ]
   * }
   * ```
   */
  UpdateManyAutomations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["AutomationsResponse"];
        };
      };
    };
  };
  /**
   * List Bookmarks
   * @description #### Allowed For
   * - Agents
   */
  ListBookmarks: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["BookmarksResponse"];
        };
      };
    };
  };
  /**
   * Create Bookmark
   * @description #### Allowed For
   * - Agents
   */
  CreateBookmark: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BookmarkCreateRequest"];
      };
    };
    responses: {
      /** @description Successfully created */
      200: {
        content: {
          "application/json": components["schemas"]["BookmarkResponse"];
        };
      };
      /** @description Successfully created */
      201: {
        content: {
          "application/json": components["schemas"]["BookmarkResponse"];
        };
      };
    };
  };
  /**
   * Delete Bookmark
   * @description #### Allowed For
   * - Agents (own bookmarks only)
   *
   * If the bookmark already exists with a specified ticket id, the response status will be `http Status: 200 OK`.
   */
  DeleteBookmark: {
    parameters: {
      path: {
        bookmark_id: components["parameters"]["BookmarkId"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Brands
   * @description Returns a list of all brands for your account sorted by name.
   *
   * #### Allowed for
   *
   * * Admins, Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListBrands: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["BrandsResponse"];
        };
      };
    };
  };
  /**
   * Create Brand
   * @description #### Allowed for
   * - Admins
   */
  CreateBrand: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BrandCreateRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      201: {
        content: {
          "application/json": components["schemas"]["BrandResponse"];
        };
      };
    };
  };
  /**
   * Show a Brand
   * @description Returns a brand for your account.
   *
   * #### Allowed for
   *
   * * Admins, Agents
   */
  ShowBrand: {
    parameters: {
      path: {
        brand_id: components["parameters"]["BrandId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["BrandResponse"];
        };
      };
    };
  };
  /**
   * Update a Brand
   * @description Returns an updated brand.
   *
   * #### Allowed for
   * * Admins
   *
   * #### Updating a Brand's Image
   * A brand image can be updated by uploading a local file using the update brand endpoint. See the **Using curl** sections below for more information.
   */
  UpdateBrand: {
    parameters: {
      path: {
        brand_id: components["parameters"]["BrandId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BrandUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["BrandResponse"];
          "image/jpg": unknown;
          "image/png": unknown;
        };
      };
    };
  };
  /**
   * Delete a Brand
   * @description Deletes a brand.
   *
   * #### Allowed for
   * - Admins
   */
  DeleteBrand: {
    parameters: {
      path: {
        brand_id: components["parameters"]["BrandId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Check Host Mapping Validity for an Existing Brand
   * @description Returns a JSON object determining whether a host mapping is valid for the given brand.
   *
   * #### Allowed for
   * - Admins
   */
  CheckHostMappingValidityForExistingBrand: {
    parameters: {
      path: {
        brand_id: components["parameters"]["BrandId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["HostMappingObject"];
        };
      };
    };
  };
  /**
   * Check Host Mapping Validity
   * @description Returns a JSON object determining whether a host mapping is valid for a given subdomain.
   *
   * #### Allowed for
   *
   * * Admins
   */
  CheckHostMappingValidity: {
    parameters: {
      query: {
        host_mapping: components["parameters"]["HostMapping"];
        subdomain: components["parameters"]["Subdomain"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["HostMappingObject"];
        };
      };
    };
  };
  /**
   * List Monitored Twitter Handles
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ListMonitoredTwitterHandles: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TwitterChannelsResponse"];
        };
      };
    };
  };
  /**
   * Show Monitored Twitter Handle
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ShowMonitoredTwitterHandle: {
    parameters: {
      path: {
        monitored_twitter_handle_id: components["parameters"]["MonitoredTwitterHandleId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TwitterChannelResponse"];
        };
      };
    };
  };
  /**
   * Create Ticket from Tweet
   * @description Turns a tweet into a ticket. You must provide the tweet id as well as the id of a monitored twitter handle configured for your account.
   *
   * The submitter of the ticket is set to be the user submitting the API request.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateTicketFromTweet: {
    responses: {
      /** @description description */
      201: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Twicket statuses
   * @description #### Allowed For
   *
   * * Agents
   */
  GettingTwicketStatus: {
    parameters: {
      query?: {
        /**
         * @description Optional comment ids to retrieve tweet information for only particular comments
         * @example 1,3,5
         */
        ids?: string;
      };
      path: {
        comment_id: components["parameters"]["CommentId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TwitterChannelTwicketStatusResponse"];
        };
      };
    };
  };
  /**
   * Open Ticket in Agent's Browser
   * @description Allows you to instruct an agent's browser to open a ticket.
   *
   * When the message is successfully delivered to an agent's browser:
   *
   * ```http
   * Status: 200 OK
   * ```
   *
   * When `agent_id` or `ticket_id` is invalid:
   *
   * ```http
   * Status: 404 Not Found
   * ```
   *
   * #### Allowed For
   * * Agents
   */
  OpenTicketInAgentBrowser: {
    parameters: {
      path: {
        agent_id: components["parameters"]["AgentId"];
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description When the `agent_id` or `ticket_id` is invalid */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Open a User's Profile in an Agent's Browser
   * @description Allows you to instruct an agent's browser to open a user's profile.
   *
   * When the message is successfully delivered to an agent's browser:
   *
   * ```http
   * Status: 200 OK
   * ```
   *
   * When `agent_id` or `user_id` is invalid:
   *
   * ```http
   * Status: 404 Not Found
   * ```
   *
   * #### Allowed For
   * * Agents
   */
  OpenUsersProfileInAgentBrowser: {
    parameters: {
      path: {
        agent_id: components["parameters"]["AgentId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description When the `agent_id` or `user_id` is invalid */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Create Ticket or Voicemail Ticket
   * @description #### Allowed For
   * * Agents
   *
   * ### Creating tickets
   *
   * #### Introduction
   *
   * Creating tickets using Talk Partner Edition follows the same conventions as the Create Ticket endpoint. See [Create Ticket](/api-reference/ticketing/tickets/tickets/#create-ticket).
   *
   * #### Request parameters
   *
   * The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
   * You may also include an optional `display_to_agent` value such as the ID of the agent that will see the newly created ticket.
   *
   * Tickets created using this endpoint must have a `via_id` parameter. See the following
   * section for possible values.
   *
   * #### Zendesk Talk Integration Via IDs
   *
   * Tickets created using this endpoint must have one of the following `via_id` parameters:
   *
   * | ID       | Description
   * | ---------| -------------
   * | 44       | Voicemail
   * | 45       | Phone call (inbound)
   * | 46       | Phone call (outbound)
   *
   * ### Creating voicemail tickets
   * #### Request parameters
   *
   * The POST request takes a mandatory `ticket` object that lists the values to set when the ticket is created.
   * The ticket must have a `voice_comment` with the following values:
   *
   * | Name               | Type                  | Comment
   * | ------------------ | ----------------------| -------
   * | from               | string                | Incoming phone number
   * | to                 | string                | Dialed phone number
   * | recording_url      | string                | URL of the recording
   * | started_at         | date                  | [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) timestamp of the call starting time
   * | call_duration      | integer               | Duration in seconds of the call
   * | answered_by_id     | integer               | The agent who answered the call
   * | transcription_text | string                | Transcription of the call (optional)
   * | location           | string                | Location of the caller (optional)
   */
  CreateTicketOrVoicemailTicket: {
    parameters: {
      path: {
        agent_id: components["parameters"]["AgentId"];
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketCreateVoicemailTicketRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      201: {
        content: {
          "application/json": components["schemas"]["TicketResponse"];
        };
      };
      /** @description When the `agent_id` or `ticket_id` is invalid */
      404: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Redact Chat Comment Attachment
   * @description Permanently removes one or more chat attachments from a chat ticket.
   *
   * **Note**: This does not work on active chats. For chat tickets that predate March 2020, consider using [Redact Ticket Comment In Agent Workspace](#redact-ticket-comment-in-agent-workspace).
   *
   * #### Allowed For
   *
   * - Agents
   *
   * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must enabled for the account. Deleting tickets must be enabled for agents.
   *
   * #### Request Body Properties
   *
   * | Name         | Type    | Required | Description                                                                                                                                          |
   * | ------------ | ------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | chat_id      | string  | true     | The `chat_id` in the `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)               |
   * | chat_indexes | array   | true     | The array of `chat_index` in the `ChatFileAttachment` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) |
   *
   * To get the required body properties, make a request to the [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits) endpoint. Example response:
   *
   * ```http
   * Status 200 OK
   * {
   *   "audits": [
   *     "events": [
   *       {
   *         "id": 1932802680168,
   *         "type": "ChatStartedEvent",
   *         "value": {
   *           "visitor_id": "10502823-16EkM3T6VNq7KMd",
   *           "chat_id": "2109.10502823.Sjuj2YrBpXwei",
   *           "history": [
   *             {
   *               "chat_index": 0,
   *               "type": "ChatFileAttachment",
   *               "filename": "image1.jpg"
   *             },
   *             {
   *               "chat_index": 1,
   *               "type": "ChatFileAttachment",
   *               "filename": "image2.jpg"
   *             }
   *           ]
   *         }
   *       }
   *     ]
   *   ]
   * }
   * ```
   */
  RedactChatCommentAttachment: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketChatCommentRedactionResponse"];
        };
      };
    };
  };
  /**
   * Redact Chat Comment
   * @description Permanently removes words or strings from a chat ticket's comment.
   *
   * Wrap `<redact>` tags around the content in the chat comment you want redacted. Example:
   *
   * ```json
   * {
   *   "text": "My ID number is <redact>847564</redact>!"
   * }
   * ```
   *
   * The characters contained in the tag will be replaced by the ▇ symbol.
   *
   * **Note**: This does not work on active chats. For chat tickets that predate March 2020, consider using [Redact Ticket Comment In Agent Workspace](#redact-ticket-comment-in-agent-workspace).
   *
   * #### Allowed For
   *
   * - Agents
   *
   * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must enabled for the account. Deleting tickets must be enabled for agents.
   *
   * #### Request Body Properties
   *
   * | Name                     | Type    | Required | Description                                                                                                                                                             |
   * | ------------------------ | ------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | chat_id                  | string  | true     | The `chat_id` in the `ChatStartedEvent` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)                                  |
   * | chat_index               | integer | true     | The `chat_index` in the `ChatMessage` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits)                                    |
   * | text                     | string  | true     | The `message` in the `ChatMessage` event in the ticket audit. See [Ticket Audits](/api-reference/ticketing/tickets/ticket_audits).  Wrap `message` with `<redact>` tags |
   *
   * To get the required body properties, make a request to the [Ticket Audit](/api-reference/ticketing/tickets/ticket_audits) endpoint. Example response:
   *
   * ```http
   * Status 200 OK
   * {
   *   "audits": [
   *     "events": [
   *       {
   *         "id": 1932802680168,
   *         "type": "ChatStartedEvent",
   *         "value": {
   *           "visitor_id": "10502823-16EkM3T6VNq7KMd",
   *           "chat_id": "2109.10502823.Sjuj2YrBpXwei",
   *           "history": [
   *             {
   *               "chat_index": 0,
   *               "type": "ChatMessage",
   *               "message": "My ID number is 847564!"
   *             }
   *           ]
   *         }
   *       }
   *     ]
   *   ]
   * }
   * ```
   */
  RedactChatComment: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketChatCommentRedactionResponse"];
        };
      };
    };
  };
  /**
   * Redact Ticket Comment In Agent Workspace
   * @description Redaction allows you to permanently remove words, strings, or attachments from a ticket comment.
   *
   * In the `html_body` of the comment, wrap the content you want redacted in `<redact>` tags. Example:
   *
   * ```json
   * {
   *   "html_body": "<div class=\"zd-comment\" dir=\"auto\">My ID number is <redact>847564</redact>!</div>",
   *   "ticket_id":100
   * }
   * ```
   *
   * The characters in the redact tag will be replaced by the ▇ symbol.
   *
   * To redact HTML elements such inline images, anchor tags, and links, add the `redact` tag attribute to the element as well as the `<redact>` tag to inner text, if any. Example:
   *
   * `<a href="http://example.com" redact><redact>some link</redact></a>`
   *
   * The `redact` attribute only redacts the tag. Any inner text will be left behind if not enclosed in a `<redact>` tag.
   *
   * Redaction is permanent and can not be undone. Data is permanently deleted from Zendesk servers with no way to recover it.
   *
   * This endpoint provides all the same functionality that the [Redact String in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment) endpoint provides, plus:
   *
   * - Redaction of comments in closed tickets
   *
   * - Redaction of comments in archived tickets
   *
   * - Redaction of formatted text (bold, italics, hyperlinks)
   *
   * **Limitations**: When content is redacted from an email comment, the content is also redacted from the original email through a background job. It may take a while for the changes to be completed.
   *
   * **Note**: We recommend using this endpoint instead of the [Redact String in Comment](/api-reference/ticketing/tickets/ticket_comments/#redact-string-in-comment) endpoint, which will eventually be deprecated.
   *
   * #### Allowed For
   *
   * - Agents
   *
   * [Agent Workspace](https://support.zendesk.com/hc/en-us/articles/360024218473) must be enabled on the account. For professional accounts, deleting tickets must be enabled for agents. On Enterprise accounts, you can assign agents to a custom role with permissions to redact ticket content.
   *
   * #### Request Body Properties
   *
   * | Name                     | Type    | Required | Description                                                                                                                                      |
   * | -------------------------| ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | ticket_id                | integer | true     | The ID of the ticket                                                                                                                             |
   * | html_body                | string  | false    | The `html_body` of the comment containing `<redact>` tags or `redact` attributes                                           |
   * | external_attachment_urls | array   | false    | Array of attachment URLs belonging to the comment to be redacted. See [`content_url` property of Attachment](/api-reference/ticketing/tickets/ticket-attachments/) |
   */
  RedactTicketCommentInAgentWorkspace: {
    parameters: {
      path: {
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentResponse"];
        };
      };
    };
  };
  /**
   * List Custom Objects
   * @description Lists all undeleted custom objects for the account
   * #### Allowed For
   * * Agents
   */
  ListCustomObjects: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectsResponse"];
        };
      };
    };
  };
  /**
   * Create Custom Object
   * @description Creates an object describing all the properties required to create a custom object record
   * #### Allowed For
   * * Admins
   */
  CreateCustomObject: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomObjectsCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomObjectResponse"];
        };
      };
    };
  };
  /**
   * Show Custom Object
   * @description Returns an object with the specified key
   * #### Allowed For
   * * Agents
   */
  ShowCustomObject: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Custom Object */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectResponse"];
        };
      };
    };
  };
  /**
   * Delete Custom Object
   * @description Permanently deletes the custom object with the specified key
   * #### Allowed For
   * * Admins
   */
  DeleteCustomObject: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update Custom Object
   * @description Updates an individual custom object. The updating rules are as follows:
   * * Takes a `custom_object` object that specifies the properties to update
   * * The `key` property cannot be updated
   * #### Allowed For
   * * Admins
   */
  UpdateCustomObject: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectResponse"];
        };
      };
    };
  };
  /**
   * List Custom Object Fields
   * @description Lists all undeleted custom fields for the specified object.
   *
   * #### Allowed For
   * * Agents
   *
   * #### Pagination
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListCustomObjectFields: {
    parameters: {
      query?: {
        include_standard_fields?: components["parameters"]["IncludeStandardFields"];
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectFieldsResponse"];
        };
      };
    };
  };
  /**
   * Create Custom Object Field
   * @description Creates any of the following custom field types:
   *
   * * text (default when no "type" is specified)
   * * textarea
   * * checkbox
   * * date
   * * integer
   * * decimal
   * * regexp
   * * dropdown
   * * lookup
   *
   * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateCustomObjectField: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomObjectFieldsCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomObjectFieldResponse"];
        };
      };
    };
  };
  /**
   * Show Custom Object Field
   * @description Returns a custom field for a specific object using a provided key or id of the field.
   * #### Allowed For
   * * Agents
   */
  ShowCustomObjectField: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_field_key_or_id: components["parameters"]["CustomObjectFieldKeyOrId"];
      };
    };
    responses: {
      /** @description Custom Object Field */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectFieldResponse"];
        };
      };
    };
  };
  /**
   * Delete Custom Object Field
   * @description Deletes a field with the specified key. Note: You can't delete standard fields.
   * #### Allowed For
   * * Admins
   */
  DeleteCustomObjectField: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_field_key_or_id: components["parameters"]["CustomObjectFieldKeyOrId"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update Custom Object Field
   * @description Updates individual custom object fields. The updating rules are as follows:
   * * Takes a `custom_object_field` object that specifies the properties to update
   * * The `key` property cannot be updated
   * * If updating a standard field, only the `title` and `description` properties can be updated.
   * #### Allowed For
   * * Admins
   */
  UpdateCustomObjectField: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_field_key_or_id: components["parameters"]["CustomObjectFieldKeyOrId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectFieldResponse"];
        };
      };
    };
  };
  /**
   * Reorder Custom Fields of an Object
   * @description Sets a preferred order of custom fields for a specific object by providing field ids in the desired order.
   * #### Allowed For
   *
   * * Admins
   */
  ReorderCustomObjectFields: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Reordered */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Custom Object Record Bulk Jobs
   * @description Queues a background job to perform bulk actions on up to 100 custom object records per single request.
   * Takes a `job` object with two nested fields:
   * * `action`, one of:
   *     * `"create"`
   *     * `"delete"`
   *     * `"delete_by_external_id"`
   *     * `"create_or_update_by_external_id"`
   *     * `"update"`
   * * `items`
   *     * For a `"create"` action, an array of JSON objects representing the custom object records being created
   *     * For a `"delete"` action, an array of strings representing Zendesk record ids
   *     * For a `"delete_by_external_id"` action, an array of strings representing external ids
   *     * For a `"create_or_update_by_external_id"` action, an array of JSON objects representing the custom object records being created or updated
   *     * For an `"update"` action, an array of JSON objects representing the custom object records being updated
   *
   * #### Allowed For
   * * Agents
   *
   * #### Response ###
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   */
  CustomObjectRecordBulkJobs: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomObjectRecordsBulkCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordsJobsResponse"];
        };
      };
    };
  };
  /**
   * Custom Object Fields Limit
   * @description List the current count and the limit for a custom object's fields
   * #### Allowed For
   * * Agents
   */
  CustomObjectFieldsLimit: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectLimitsResponse"];
        };
      };
    };
  };
  /**
   * List Custom Object Records
   * @description Lists all undeleted custom object records for the specified object
   *
   *  #### Pagination
   *
   * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
   * #### Allowed For
   * * Agents
   */
  ListCustomObjectRecords: {
    parameters: {
      query?: {
        /** @description Optional comma-separated list of ids to filter records by. If one or more ids are specified, only matching records are returned. The ids must be unique and are case sensitive. */
        "filter[ids]"?: string;
        /** @description Optional comma-separated list of external ids to filter records by. If one or more ids are specified, only matching records are returned. The ids must be unique and are case sensitive. */
        "filter[external_ids]"?: string;
        /** @description One of `id`, `updated_at`, `-id`, or `-updated_at`. The `-` denotes the sort will be descending. */
        sort?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[before]"?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[after]"?: string;
        /** @description Specifies how many records should be returned in the response. You can specify up to 100 records per page. */
        "page[size]"?: number;
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordsResponse"];
        };
      };
    };
  };
  /**
   * Create Custom Object Record
   * @description Creates a custom object record according to all the properties described by a custom object definition
   * #### Allowed For
   * * Agents
   */
  CreateCustomObjectRecord: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomObjectRecordsCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordResponse"];
        };
      };
    };
  };
  /**
   * Delete Custom Object Record by External Id
   * @description Deletes a record with the specified external id.
   * #### Allowed For
   * * Agents
   */
  DeleteCustomObjectRecordByExternalId: {
    parameters: {
      query: {
        external_id: components["parameters"]["CustomObjectRecordExternalId"];
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Set Custom Object Record by External Id
   * @description If a record exists for the given external id, updates it. Only the specified attributes are updated. Otherwise, creates a new record with the provided external id and attributes.
   * #### Allowed For
   * * Agents
   */
  UpsertCustomObjectRecord: {
    parameters: {
      query: {
        external_id: components["parameters"]["CustomObjectRecordExternalId"];
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomObjectRecordsUpsertRequest"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordResponse"];
        };
      };
    };
  };
  /**
   * Show Custom Object Record
   * @description Returns a custom record for a specific object using a provided id.
   * #### Allowed For
   * * Agents
   */
  ShowCustomObjectRecord: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_record_id: components["parameters"]["CustomObjectRecordId"];
      };
    };
    responses: {
      /** @description Custom Object Record */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordResponse"];
        };
      };
    };
  };
  /**
   * Delete Custom Object Record
   * @description Deletes a record with the specified id
   * #### Allowed For
   * * Agents
   */
  DeleteCustomObjectRecord: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_record_id: components["parameters"]["CustomObjectRecordId"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update Custom Object Record
   * @description Updates an individual custom object record. The updating rules are as follows:
   * * Takes a `custom_object_record` object that specifies the properties to update
   * * The custom object fields should be nested inside a `custom_object_fields` object
   * #### Allowed For
   * * Agents
   */
  UpdateCustomObjectRecord: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
        custom_object_record_id: components["parameters"]["CustomObjectRecordId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordResponse"];
        };
      };
    };
  };
  /**
   * Autocomplete Custom Object Record Search
   * @description Retrieves an array of custom object records that have a field value that matches the value specified in the `name` parameter.
   *
   * #### Pagination
   *
   * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
   * * Returns the first 10,000 records sorted by relevancy with page limits.
   * #### Allowed For
   * * Agents
   */
  AutocompleteCustomObjectRecordSearch: {
    parameters: {
      query?: {
        /** @description Part of a name of the record you are searching for */
        name?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[before]"?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[after]"?: string;
        /** @description The number of records to return in the response. You can specify up to 100 records per page. */
        "page[size]"?: number;
        /** @description The id of the lookup field. If the field has a relationship filter, the filter is applied to the results. Must be used with `source` param. */
        field_id?: string;
        /** @description One of "zen:user", "zen:ticket", "zen:organization", or "zen:custom_object:CUSTOM_OBJECT_KEY". Represents the object `field_id` belongs to. Must be used with field_id param. */
        source?: string;
        /**
         * @description The id of the requester. For use with dynamic filters.
         *
         * @example 264817272
         */
        requester_id?: number;
        /**
         * @description The id of the selected assignee. For use with dynamic filters.
         *
         * @example 7334148660734
         */
        assignee_id?: number;
        /**
         * @description The id of the organization the requester belongs to. For use with dynamic filters.
         *
         * @example 5633330889598
         */
        organization_id?: number;
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordsResponse"];
        };
      };
    };
  };
  /**
   * Count Custom Object Records
   * @description Returns a total count of records for a specific custom object as well as the time the count was refreshed.
   * #### Allowed For
   * * Agents
   */
  CountCustomObjectRecords: {
    parameters: {
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": {
            count?: {
              [key: string]: {
                /**
                 * Format: date-time
                 * @description The time the last count was performed
                 */
                refreshed_at?: string;
                /** @description Number of records at the time of the latest count operation */
                value?: number;
              };
            };
          };
        };
      };
    };
  };
  /**
   * Search Custom Object Records
   * @description Returns an array of custom object records that meet the search criteria
   *
   * #### Pagination
   *
   * * [Cursor pagination](/api-reference/introduction/pagination/#cursor-pagination) only.
   * * Returns the records sorted by relevancy with page limits. Without a `sort` parameter, only the first 10,000 records are returned. With a `sort` parameter, all records are returned.
   * #### Allowed For
   * * Agents
   */
  SearchCustomObjectRecords: {
    parameters: {
      query?: {
        /**
         * @description The query parameter is used to search text-based fields for records that match specific query terms.
         * The query can be multiple words or numbers. Every record that matches the beginning of any word or number in the query string is returned.<br/><br/>
         *
         * For example, you might want to search for records related to Tesla vehicles: `query=Tesla`. In this example the API would return every record for the given custom object where any of the text fields contain the word 'Tesla'.<br/><br/>
         *
         * If needed, you could include multiple words or numbers in your search. For example: `query=Tesla Honda 2020`. This would be URL encoded as `query=Tesla%20Honda%202020`. In this example, the API would return every record for the custom object for which any of the text fields contained 'Tesla', 'Honda', or '2020'.
         *
         * @example jdoe
         */
        query?: string;
        /** @description One of `name`, `created_at`, `updated_at`, `-name`, `-created_at`, or `-updated_at`. The `-` denotes the sort will be descending. Defaults to sorting by relevance. */
        sort?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[before]"?: string;
        /** @description A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request. */
        "page[after]"?: string;
        /** @description Specifies how many records should be returned in the response. You can specify up to 100 records per page. */
        "page[size]"?: number;
      };
      path: {
        custom_object_key: components["parameters"]["CustomObjectKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectRecordsResponse"];
        };
      };
    };
  };
  /**
   * Custom Objects Limit
   * @description List the current count and the limit for custom objects
   * #### Allowed For
   * * Admins
   */
  CustomObjectsLimit: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectLimitsResponse"];
        };
      };
    };
  };
  /**
   * Custom Object Records Limit
   * @description List the current count and the limit for custom object records
   * #### Allowed For
   * * Agents
   */
  CustomObjectRecordsLimit: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomObjectLimitsResponse"];
        };
      };
    };
  };
  /**
   * List Custom Roles
   * @description #### Availability
   *
   * * Accounts on the Enterprise plan or above
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListCustomRoles: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomRolesResponse"];
        };
      };
    };
  };
  /**
   * Create Custom Role
   * @description #### Availability
   *
   * * Accounts on the Enterprise plan or above
   *
   * #### Allowed for
   *
   * * Administrators
   * * Agents with the `manage_roles` permission
   */
  CreateCustomRole: {
    responses: {
      /** @description Created response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomRoleResponse"];
        };
      };
    };
  };
  /**
   * Show Custom Role
   * @description #### Availability
   *
   * * Accounts on the Enterprise plan or above
   *
   * #### Allowed for
   *
   * * Administrators
   * * Agents with the `manage_roles` permission
   */
  ShowCustomRoleById: {
    parameters: {
      path: {
        custom_role_id: components["parameters"]["CustomRoleId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomRoleResponse"];
        };
      };
    };
  };
  /**
   * Update Custom Role
   * @description #### Availability
   *
   * * Accounts on the Enterprise plan or above
   *
   * #### Allowed for
   *
   * * Administrators
   * Agents with the `manage_roles` permission
   */
  UpdateCustomRoleById: {
    parameters: {
      path: {
        custom_role_id: components["parameters"]["CustomRoleId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomRoleResponse"];
        };
      };
    };
  };
  /**
   * Delete Custom Role
   * @description #### Availability
   *
   * * Accounts on the Enterprise plan or above
   *
   * #### Allowed for
   *
   * * Administrators
   * * Agents with the `manage_roles` permission
   */
  DeleteCustomRoleById: {
    parameters: {
      path: {
        custom_role_id: components["parameters"]["CustomRoleId"];
      };
    };
    responses: {
      /** @description No Contetnt response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Bulk Update Default Custom Ticket Status
   * @description Updates the default values for many custom ticket statuses at once.
   *
   * #### Allowed For
   *
   * * Admins
   */
  BulkUpdateDefaultCustomStatus: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BulkUpdateDefaultCustomStatusRequest"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json": components["schemas"]["BulkUpdateDefaultCustomStatusResponse"];
        };
      };
    };
  };
  /**
   * List Custom Ticket Statuses
   * @description Lists all undeleted custom ticket statuses for the account. No pagination is provided.
   *
   * #### Allowed For
   *
   * * End Users
   */
  ListCustomStatuses: {
    parameters: {
      query?: {
        /** @description Filter the list of custom ticket statuses by a comma-separated list of status categories */
        status_categories?: string;
        /** @description If true, show only active custom ticket statuses. If false, show only inactive custom ticket statuses. If the filter is not used, show all custom ticket statuses */
        active?: boolean;
        /** @description If true, show only default custom ticket statuses. If false, show only non-default custom ticket statuses. If the filter is not used, show all custom ticket statuses */
        default?: boolean;
      };
    };
    responses: {
      /** @description List custom ticket statuses */
      200: {
        content: {
          "application/json": components["schemas"]["CustomStatusesResponse"];
        };
      };
    };
  };
  /**
   * Create Custom Ticket Status
   * @description Takes a `custom_status` object that specifies the custom ticket status properties to create.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateCustomStatus: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomStatusCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["CustomStatusResponse"];
        };
      };
    };
  };
  /**
   * Show Custom Ticket Status
   * @description Returns the custom ticket status object.
   *
   * #### Allowed For
   *
   * * End Users
   */
  ShowCustomStatus: {
    parameters: {
      path: {
        custom_status_id: components["parameters"]["CustomStatusId"];
      };
    };
    responses: {
      /** @description Custom Status */
      200: {
        content: {
          "application/json": components["schemas"]["CustomStatusResponse"];
        };
      };
    };
  };
  /**
   * Update Custom Ticket Status
   * @description Takes a `custom_status` object that specifies the properties to update.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateCustomStatus: {
    parameters: {
      path: {
        custom_status_id: components["parameters"]["CustomStatusId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomStatusUpdateRequest"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json": components["schemas"]["CustomStatusResponse"];
        };
      };
    };
  };
  /**
   * List Deleted Tickets
   * @description Returns a maximum of 100 deleted tickets per page. See [Pagination](/api-reference/introduction/pagination/).
   *
   * The results includes all deleted (and not yet archived) tickets that
   * have not yet been [scrubbed](https://support.zendesk.com/hc/en-us/articles/4408845703194#topic_fv5_w51_sdb) in the past 30 days. Archived tickets are
   * not included in the results. See [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756)
   * in the Support Help Center.
   *
   * The tickets are ordered chronologically by created date, from oldest to newest.
   * The first ticket listed may not be the oldest ticket in your
   * account due to [ticket archiving](https://support.zendesk.com/hc/en-us/articles/203657756).
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Rate Limit
   *
   * You can make 10 requests every 1 minute using this endpoint.
   * When making requests beyond page 100, you can make 5 requests every 1 minute.
   * The rate limiting mechanism behaves as described in
   * [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.
   */
  ListDeletedTickets: {
    parameters: {
      query?: {
        sort_by?: components["parameters"]["TicketSortBy"];
        sort_order?: components["parameters"]["TicketSortOrder"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListDeletedTicketsResponse"];
        };
      };
    };
  };
  /**
   * Delete Ticket Permanently
   * @description Permanently deletes a soft-deleted ticket. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
   * in the Zendesk GDPR docs. To soft delete a ticket, use the [Delete Ticket](#delete-ticket) endpoint.
   *
   * This endpoint enqueues a ticket deletion job and returns a payload with the jobs status.
   *
   * If the job succeeds, the ticket is permanently deleted. This operation can't be undone.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work.
   * Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.
   *
   * #### Allowed For
   *
   * * Agents
   */
  DeleteTicketPermanently: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Restore a Previously Deleted Ticket
   * @description #### Allowed For
   *
   * * Agents
   */
  RestoreDeletedTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Empty response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Delete Multiple Tickets Permanently
   * @description Permanently deletes up to 100 soft-deleted tickets. See [Soft delete](https://support.zendesk.com/hc/en-us/articles/4408834005530#topic_zrm_wbj_1db)
   * in the Zendesk GDPR docs. To soft delete tickets, use the [Bulk Delete Tickets](#bulk-delete-tickets) endpoint.
   *
   * This endpoint accepts a comma-separated list of up to 100 ticket ids. It enqueues
   * a ticket deletion job and returns a payload with the jobs status.
   *
   * If one ticket fails to be deleted, the endpoint still attempts to delete the others. If the job succeeds,
   * the tickets that were successfully deleted are permanently deleted. This operation can't be undone.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Agents
   */
  BulkPermanentlyDeleteTickets: {
    parameters: {
      query: {
        ids: components["parameters"]["TicketIds"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Restore Previously Deleted Tickets in Bulk
   * @description #### Allowed For
   *
   * * Agents
   */
  BulkRestoreDeletedTickets: {
    parameters: {
      query: {
        ids: components["parameters"]["TicketIds"];
      };
    };
    responses: {
      /** @description Empty response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Deleted Users
   * @description Returns deleted users, including permanently deleted users.
   *
   * If the results contains permanently deleted users, the users' properties
   * that normally contain personal data, such as `email` and `phone`,
   * are null. The `name` property is "Permanently Deleted User".
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListDeletedUsers: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DeletedUsersResponse"];
        };
      };
    };
  };
  /**
   * Show Deleted User
   * @description Returns users that have been deleted but not permanently yet. See [Permanently Delete User](#permanently-delete-user).
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ShowDeletedUser: {
    parameters: {
      path: {
        deleted_user_id: components["parameters"]["DeletedUserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DeletedUserResponse"];
        };
      };
    };
  };
  /**
   * Permanently Delete User
   * @description Before permanently deleting a user, you must delete the user first. See [Delete User](/api-reference/ticketing/users/users/#delete-user).
   *
   * WARNING: Permanently deleting a user deletes all of their information. This information is not recoverable.
   *
   * #### Permanent user deletion rate limit
   *
   * You can permanently delete 700 users every 10 minutes.
   * The rate limiting mechanism behaves as described in
   * [Rates Limits](/api-reference/introduction/rate-limits/#monitoring-your-request-activity) in the API introduction.
   * Zendesk recommends that you obey the Retry-After header values.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   */
  PermanentlyDeleteUser: {
    parameters: {
      path: {
        deleted_user_id: components["parameters"]["DeletedUserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DeletedUserResponse"];
        };
      };
    };
  };
  /**
   * Count Deleted Users
   * @description Returns an approximate count of deleted users, including permanently deleted users. If the count exceeds 100,000, it is updated every 24 hours.
   *
   * The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CountDeletedUsers: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CountResponse"];
        };
      };
    };
  };
  /**
   * List Items
   * @description Returns a list of all dynamic content items for your account if accessed as an admin or agents who have permission to manage dynamic content.
   *
   * #### Allowed For
   *
   * * Admins, Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListDynamicContents: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentsResponse"];
        };
      };
    };
  };
  /**
   * Create Item
   * @description Create a new content item, with one or more variants in the item's `variants` array. See [Specifying item variants](#specifying-item-variants).
   *
   * The `default_locale_id` and variant `locale_id` values must be one of the locales the account has active. You can get the list with the [List Locales](/api-reference/ticketing/account-configuration/locales/#list-locales) endpoint.
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  CreateDynamicContent: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["DynamicContentResponse"];
        };
      };
    };
  };
  /**
   * Show Item
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  ShowDynamicContentItem: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentResponse"];
        };
      };
    };
  };
  /**
   * Update Item
   * @description The only attribute you can change is the name.
   *
   * To add a variant to the item, or to update or delete the variants of the item, use the [Item Variants API](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-many-variants).
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  UpdateDynamicContentItem: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentResponse"];
        };
      };
    };
  };
  /**
   * Delete Item
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  DeleteDynamicContentItem: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Variants
   * @description Returns all the variants of the specified dynamic content item.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents who have permission to manage dynamic content
   *
   * #### Pagination
   *
   * * Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  DynamicContentListVariants: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantsResponse"];
        };
      };
    };
  };
  /**
   * Create Variant
   * @description You can only create one variant for each locale id. If a locale variant already exists, the request is rejected.
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  CreateDynamicContentVariant: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantResponse"];
        };
      };
    };
  };
  /**
   * Show Variant
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  ShowDynamicContentVariant: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
        dynammic_content_variant_id: components["parameters"]["DynamicContentVariantId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantResponse"];
        };
      };
    };
  };
  /**
   * Update Variant
   * @description Updates the specified variant. You don't need to include all the properties. If you just want to update content, for example, then include just that.
   *
   * You can't switch the active state of the default variant of an item. Similarly, you can't switch the default to false if the variant is the default. You must make another variant default instead.
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  UpdateDynamicContentVariant: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
        dynammic_content_variant_id: components["parameters"]["DynamicContentVariantId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantResponse"];
        };
      };
    };
  };
  /**
   * Delete Variant
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  DeleteDynamicContentVariant: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
        dynammic_content_variant_id: components["parameters"]["DynamicContentVariantId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Create Many Variants
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  CreateManyDynamicContentVariants: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantsResponse"];
        };
      };
    };
  };
  /**
   * Update Many Variants
   * @description Updates one or more variants. See [Update Variant](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#update-variant).
   *
   * You must specify the variants by id in the body. To get the variant ids, see [List Variants](/api-reference/ticketing/ticket-management/dynamic_content_item_variants/#list-variants).
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  UpdateManyDynamicContentVariants: {
    parameters: {
      path: {
        dynamic_content_item_id: components["parameters"]["DynamicContentItemId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentVariantsResponse"];
        };
      };
    };
  };
  /**
   * Show Many Items
   * @description #### Stability
   *
   * * Development
   *
   * #### Allowed For
   *
   * * Admins, Agents
   */
  ShowManyDynamicContents: {
    parameters: {
      query?: {
        /**
         * @description Identifiers for the dynamic contents
         * @example item1,item2
         */
        identifiers?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicContentsResponse"];
        };
      };
    };
  };
  /**
   * List Memberships
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ListGroupMemberships: {
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupMembershipsResponse"];
        };
      };
    };
  };
  /**
   * Create Membership
   * @description Assigns an agent to a given group.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
   */
  CreateGroupMembership: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["GroupMembershipResponse"];
        };
      };
    };
  };
  /**
   * Show Membership
   * @description The 'id' is the group membership id, not a group id.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowGroupMembershipById: {
    parameters: {
      path: {
        group_membership_id: components["parameters"]["GroupMembershipId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupMembershipResponse"];
        };
      };
    };
  };
  /**
   * Delete Membership
   * @description Immediately removes a user from a group and schedules a job to unassign all working tickets that are assigned to the given user and group combination.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
   */
  DeleteGroupMembership: {
    parameters: {
      path: {
        group_membership_id: components["parameters"]["GroupMembershipId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Assignable Memberships
   * @description Returns a maximum of 100 group memberships per page.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ListAssignableGroupMemberships: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupMembershipsResponse"];
        };
      };
    };
  };
  /**
   * Bulk Create Memberships
   * @description Assigns up to 100 agents to given groups.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion.
   */
  GroupMembershipBulkCreate: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Memberships
   * @description Immediately removes users from groups and schedules a job to unassign all working tickets that are assigned to the given user and group combinations.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage group memberships (Enterprise only)
   */
  GroupMembershipBulkDelete: {
    parameters: {
      query?: {
        /**
         * @description Id of the group memberships to delete. Comma separated
         * @example 1,2,3
         */
        ids?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Group SLA Policies
   * @description #### Allowed For
   *
   * * Admins
   */
  ListGroupSLAPolicies: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupSLAPoliciesResponse"];
        };
      };
    };
  };
  /**
   * Create Group SLA Policy
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateGroupSLAPolicy: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["GroupSLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Show Group SLA Policy
   * @description #### Allowed For
   *
   * * Admins
   */
  ShowGroupSLAPolicy: {
    parameters: {
      path: {
        group_sla_policy_id: components["parameters"]["GroupSLAPolicyId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupSLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Update Group SLA Policy
   * @description Updates the specified policy.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateGroupSLAPolicy: {
    parameters: {
      path: {
        group_sla_policy_id: components["parameters"]["GroupSLAPolicyId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupSLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Delete Group SLA Policy
   * @description #### Allowed For
   *
   * * Admins
   */
  DeleteGroupSLAPolicy: {
    parameters: {
      path: {
        group_sla_policy_id: components["parameters"]["GroupSLAPolicyId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Retrieve Supported Filter Definition Items
   * @description #### Allowed For
   *
   * * Admins
   */
  RetrieveGroupSLAPolicyFilterDefinitionItems: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupSLAPolicyFilterDefinitionResponse"];
        };
      };
    };
  };
  /**
   * Reorder Group SLA Policies
   * @description #### Allowed For
   *
   * * Admins
   */
  ReorderGroupSLAPolicies: {
    parameters: {
      query?: {
        /** @description The ids of the Group SLA policies to reorder */
        group_sla_policy_ids?: string[];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Groups
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ListGroups: {
    parameters: {
      query?: {
        exclude_deleted?: components["parameters"]["ExcludeDeleted"];
      };
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsResponse"];
        };
      };
    };
  };
  /**
   * Create Group
   * @description #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
   */
  CreateGroup: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["GroupResponse"];
        };
      };
    };
  };
  /**
   * Show Group
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ShowGroupById: {
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupResponse"];
        };
      };
    };
  };
  /**
   * Update Group
   * @description #### Allowed For
   *
   * * Admins
   */
  UpdateGroup: {
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupResponse"];
        };
      };
    };
  };
  /**
   * Delete Group
   * @description #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage groups (Enterprise only)
   */
  DeleteGroup: {
    parameters: {
      path: {
        group_id: components["parameters"]["GroupId"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Assignable Groups
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ListAssignableGroups: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsResponse"];
        };
      };
    };
  };
  /**
   * Count Groups
   * @description Returns an approximate count of groups. If the count exceeds 100,000, it is updated every 24 hours.
   *
   * The `refreshed_at` property of the `count` object is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `refreshed_at` may occasionally be null. This indicates that the count is being updated in the background, and the `value` property of the `count` object is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   */
  CountGroups: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsCountObject"];
        };
      };
    };
  };
  /**
   * Ticket Import
   * @description #### Allowed For
   *
   * * Admins
   */
  TicketImport: {
    parameters: {
      query?: {
        archive_immediately?: components["parameters"]["ArchiveImmediately"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketImportRequest"];
      };
    };
    responses: {
      /** @description Successfully created */
      201: {
        content: {
          "application/json": components["schemas"]["TicketResponse"];
        };
      };
    };
  };
  /**
   * Ticket Bulk Import
   * @description Accepts an array of up to 100 ticket objects.
   *
   * #### Allowed For
   *
   * * Admins
   */
  TicketBulkImport: {
    parameters: {
      query?: {
        archive_immediately?: components["parameters"]["ArchiveImmediately"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketBulkImportRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Incremental Sample Export
   * @description Use this endpoint to test the incremental export format. It's more strict in terms of rate limiting,
   * at 10 requests per 20 minutes instead of 10 requests per minute. It also returns only up to 50
   * results per request. Otherwise, it's identical to the above APIs.
   *
   * Use the `incremental_resource` parameter to specify the resource. Possible values are "tickets", "ticket_events", "users", or "organizations".
   */
  IncrementalSampleExport: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
      path: {
        incremental_resource: components["parameters"]["IncrementalResource"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TimeBasedExportIncrementalTicketsResponse"];
        };
      };
    };
  };
  /**
   * Incremental Organization Export
   * @description #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * See [Organizations sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
   */
  IncrementalOrganizationExport: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ExportIncrementalOrganizationsResponse"];
        };
      };
    };
  };
  /**
   * Incremental Attributes Values Export
   * @description Returns a stream of changes that occurred on routing attribute values.
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Parameters
   *
   * Optional
   *
   * | Name   | Type   | Comment
   * | ------ | ------ | -------
   * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
   */
  IncrementalSkilBasedRoutingAttributeValuesExport: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["IncrementalSkillBasedRouting"];
        };
      };
    };
  };
  /**
   * Incremental Attributes Export
   * @description Returns a stream of changes that occurred on routing attributes.
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Parameters
   *
   * Optional
   *
   *
   * | Name   | Type   | Comment
   * | ------ | ------ | -------
   * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
   */
  IncrementalSkilBasedRoutingAttributesExport: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["IncrementalSkillBasedRouting"];
        };
      };
    };
  };
  /**
   * Incremental Instance Values Export
   * @description Returns a stream of changes that occurred on routing instance values. Changes are grouped by `attribute_value_id`,
   * with unassociate type events listed with associate type events by the associate event’s timestamp.
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Parameters
   *
   * Optional
   *
   * | Name   | Type   | Comment
   * | ------ | ------ | -------
   * | cursor | string | The `cursor` parameter is a non-human-readable argument you can use to move forward or backward in time. The cursor is a read-only URL parameter that's only available in API responses. See [Pagination](#pagination).
   */
  IncrementalSkilBasedRoutingInstanceValuesExport: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["IncrementalSkillBasedRouting"];
        };
      };
    };
  };
  /**
   * Incremental Ticket Event Export
   * @description Returns a stream of changes that occurred on tickets. Each event is tied
   * to an update on a ticket and contains all the fields that were updated in that
   * change. For more information, see:
   *
   * - [Exporting ticket events](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-ticket-events) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)
   * - [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api)
   *
   * You can include comments in the event stream by using the `comment_events`
   * sideload. See Sideloading below. If you don't specify the sideload, any comment
   * present in the ticket update is described only by Boolean `comment_present`
   * and `comment_public` object properties in the event's `child_events` array.
   * The comment itself is not included.
   *
   * #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * The endpoint supports the `comment_events` sideload. Any comment present in the ticket
   * update is listed as an object in the event's `child_events` array. Example:
   *
   * ```js
   * "child_events": [
   *   {
   *     "id": 91048994488,
   *     "via": {
   *       "channel": "api",
   *       "source": {"from":{},"to":{},"rel":null}},
   *     "via_reference_id":null,
   *     "type": "Comment",
   *     "author_id": 5031726587,
   *     "body": "This is a comment",
   *     "html_body": "&lt;div class="zd-comment"&gt;&lt;p dir="auto"&gt;This is a comment&lt;/p&gt;",
   *     "public": true,
   *     "attachments": [],
   *     "audit_id": 91048994468,
   *     "created_at": "2009-06-25T10:15:18Z",
   *     "event_type": "Comment"
   *   },
   *   ...
   * ],
   * ...
   * ```
   */
  IncrementalTicketEvents: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ExportIncrementalTicketEventsResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Metric Events
   * @description Returns ticket metric events that occurred on or after the start time.
   *
   * Cursor pagination returns a maximum of 100 records per page. Events are listed in chronological order.
   *
   * If the results are not paginated, events will be returned as a time-based incremental export.
   *
   * See [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports).
   *
   * #### Pagination
   * * Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListTicketMetricEvents: {
    parameters: {
      query: {
        /**
         * @description The Unix UTC epoch time of the oldest event you're interested in. Example: 1332034771.
         * @example 1332034771
         */
        start_time: number;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketMetricEventsResponse"];
        };
      };
    };
  };
  /**
   * Incremental Ticket Export, Time Based
   * @description Returns the tickets that changed since the start time. For more information,
   * see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
   *
   * This endpoint supports time-based incremental exports.
   * For more information, see [Time-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#time-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api). You can also return tickets using cursor-based pagination. See [Incremental Ticket Export, Cursor Based](#incremental-ticket-export-cursor-based).
   *
   * The results include tickets that were updated by the system. See
   * [Excluding system-updated tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#excluding-system-updated-tickets-time-based-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
   *
   * The endpoint can return tickets with an `updated_at` time that's earlier than the
   * `start_time` time. The reason is that the API compares the `start_time` with the ticket's
   * `generated_timestamp` value, not its `updated_at` value. The `updated_at` value is
   * updated only if the update generates a [ticket event](#incremental-ticket-event-export).
   * The `generated_timestamp` value is updated for all ticket updates, including system
   * updates. If a system update occurs after a ticket event, the unchanged
   * `updated_at` time will become earlier relative to the updated `generated_timestamp`
   * time.
   *
   * #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
   * `last_audits` sideloads aren't supported.
   */
  IncrementalTicketExportTime: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TimeBasedExportIncrementalTicketsResponse"];
        };
      };
    };
  };
  /**
   * Incremental Ticket Export, Cursor Based
   * @description Returns the tickets that changed since the start time. For more information,
   * see [Exporting tickets](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#exporting-tickets) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
   *
   * This endpoint supports cursor-based incremental exports.
   * Cursor-based exports are highly encouraged because they provide more consistent performance and
   * response body sizes. For more information, see [Cursor-based incremental exports](/documentation/ticketing/managing-tickets/using-the-incremental-export-api#cursor-based-incremental-exports) in [Using the Incremental Exports API](/documentation/ticketing/managing-tickets/using-the-incremental-export-api).
   *
   *
   *
   * #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * See [Tickets sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints). For performance reasons,
   * `last_audits` sideloads aren't supported.
   */
  IncrementalTicketExportCursor: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        cursor?: components["parameters"]["IncrementalCursor"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorBasedExportIncrementalTicketsResponse"];
        };
      };
    };
  };
  /**
   * Incremental User Export, Time Based
   * @description #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
   */
  IncrementalUserExportTime: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        per_page?: components["parameters"]["IncrementalPage"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TimeBasedExportIncrementalUsersResponse"];
        };
      };
    };
  };
  /**
   * Incremental User Export, Cursor Based
   * @description #### Allowed For
   *
   *  * Admins
   *
   * #### Sideloading
   *
   * See [Users sideloads](/documentation/ticketing/using-the-zendesk-api/side_loading/#supported-endpoints).
   */
  IncrementalUserExportCursor: {
    parameters: {
      query: {
        start_time: components["parameters"]["IncrementalUnixTime"];
        cursor?: components["parameters"]["IncrementalCursor"];
        per_page?: components["parameters"]["IncrementalPage"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorBasedExportIncrementalUsersResponse"];
        };
      };
    };
  };
  /**
   * List Job Statuses
   * @description Shows the statuses for background jobs. Statuses are sorted first by completion date and then by creation date in descending order.
   *
   * #### Allowed For:
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListJobStatuses: {
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusesResponse"];
        };
      };
    };
  };
  /**
   * Show Job Status
   * @description Shows the status of a background job.
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ShowJobStatus: {
    parameters: {
      path: {
        job_status_id: components["parameters"]["JobStatusId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Show Many Job Statuses
   * @description Accepts a comma-separated list of job status ids.
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ShowManyJobStatuses: {
    parameters: {
      query: {
        /**
         * @description Comma-separated list of job status ids.
         * @example 8b726e606741012ffc2d782bcb7848fe,e7665094164c498781ebe4c8db6d2af5
         */
        ids: string;
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusesResponse"];
        };
      };
    };
  };
  /**
   * List Locales
   * @description Lists the translation locales available for the account.
   *
   * **Note**: You can alter the list by passing an updated `locale_ids` array to the [Update Account Settings](/api-reference/ticketing/account-configuration/account_settings/#update-account-settings) endpoint.
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ListLocales: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesResponse"];
        };
      };
    };
  };
  /**
   * Show Locale
   * @description #### Allowed For
   *
   * * Anyone
   */
  ShowLocaleById: {
    parameters: {
      path: {
        locale_id: components["parameters"]["LocaleId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleResponse"];
        };
      };
    };
  };
  /**
   * List Locales for Agent
   * @description Lists the translation locales that have been localized for agents on a specific account.
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ListLocalesForAgent: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesResponse"];
        };
      };
    };
  };
  /**
   * Show Current Locale
   * @description This works like [Show Locale](#show-locale), but instead of taking a locale id as an argument, it renders the locale of the user performing the request.
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ShowCurrentLocale: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleResponse"];
        };
      };
    };
  };
  /**
   * Detect Best Language for User
   * @description #### Allowed For
   *
   * * Anyone
   */
  DetectBestLocale: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["LocaleResponse"];
        };
      };
    };
  };
  /**
   * List Available Public Locales
   * @description Lists the translation locales that are available to all accounts.
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ListAvailablePublicLocales: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesResponse"];
        };
      };
    };
  };
  /**
   * List Macros
   * @description Lists all shared and personal macros available to the current user. For admins, the API returns all macros for the account, including the personal macros of agents and other admins.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   * * Agents
   */
  ListMacros: {
    parameters: {
      query?: {
        include?: components["parameters"]["MacroInclude"];
        access?: components["parameters"]["MacroAccess"];
        active?: components["parameters"]["MacroActive"];
        category?: components["parameters"]["MacroCategory"];
        group_id?: components["parameters"]["MacroGroupId"];
        only_viewable?: components["parameters"]["MacroOnlyViewable"];
        sort_by?: components["parameters"]["MacroSortBy"];
        sort_order?: components["parameters"]["MacroSortOrder"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacrosResponse"];
        };
      };
    };
  };
  /**
   * Create Macro
   * @description #### Allowed For
   * * Agents
   */
  CreateMacro: {
    requestBody?: {
      content: {
        "application/json": {
          macro?: components["schemas"]["MacroInput"];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            macro?: components["schemas"]["MacroObject"];
          };
        };
      };
    };
  };
  /**
   * Show Macro
   * @description #### Allowed For
   * * Agents
   */
  ShowMacro: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroResponse"];
        };
      };
    };
  };
  /**
   * Update Macro
   * @description #### Allowed For
   * * Agents
   */
  UpdateMacro: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          macro?: components["schemas"]["MacroInput"];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            macro?: components["schemas"]["MacroObject"];
          };
        };
      };
    };
  };
  /**
   * Delete Macro
   * @description #### Allowed For
   * * Agents, with restrictions applying on certain actions
   */
  DeleteMacro: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Show Changes to Ticket
   * @description Returns the changes the macro would make to a ticket. It doesn't actually
   * change a ticket. You can use the response data in a subsequent API call
   * to the [Tickets](/api-reference/ticketing/tickets/tickets/) endpoint to update the ticket.
   *
   * The response includes only the ticket fields that would be changed by the
   * macro. To get the full ticket object after the macro is applied,
   * see [Show Ticket After Changes](#show-ticket-after-changes).
   *
   * #### Allowed For
   * * Agents
   */
  ShowChangesToTicket: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroApplyTicketResponse"];
        };
      };
    };
  };
  /**
   * List Macro Attachments
   * @description Lists the attachments associated with a macro.
   *
   * #### Allowed For
   * * Agents
   */
  ListMacroAttachments: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroAttachmentsResponse"];
        };
      };
    };
  };
  /**
   * Create Macro Attachment
   * @description Allows an attachment to be uploaded and associated with a macro at the same time.
   *
   * **Note:** A macro can be associated with up to five attachments.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateAssociatedMacroAttachment: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
      };
    };
    responses: {
      /** @description Success Response */
      201: {
        content: {
          "application/json": components["schemas"]["MacroAttachmentResponse"];
        };
      };
    };
  };
  /**
   * List Supported Actions for Macros
   * @description #### Allowed For
   * * Agents
   */
  ListMacrosActions: {
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": {
            actions?: {
                [key: string]: unknown;
              }[];
          };
        };
      };
    };
  };
  /**
   * List Active Macros
   * @description Lists all active shared and personal macros available to the current user.
   *
   * #### Allowed For
   * * Agents
   */
  ListActiveMacros: {
    parameters: {
      query?: {
        include?: components["parameters"]["MacroInclude"];
        access?: components["parameters"]["MacroAccess"];
        category?: components["parameters"]["MacroCategory"];
        group_id?: components["parameters"]["MacroGroupId"];
        sort_by?: components["parameters"]["MacroSortBy"];
        sort_order?: components["parameters"]["MacroSortOrder"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacrosResponse"];
        };
      };
    };
  };
  /**
   * Create Unassociated Macro Attachment
   * @description Allows an attachment to be uploaded that can be associated with a macro at a later time.
   *
   * **Note:** To ensure an uploaded attachment is not lost, associate it with a macro as soon as possible. From time to time, old attachments that are not not associated with any macro are purged.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateMacroAttachment: {
    responses: {
      /** @description Created Response */
      201: {
        content: {
          "application/json": components["schemas"]["MacroAttachmentResponse"];
        };
      };
    };
  };
  /**
   * Show Macro Attachment
   * @description Shows the properties of the specified macro attachment.
   *
   * #### Allowed For
   * * Agents
   */
  ShowMacroAttachment: {
    parameters: {
      path: {
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroAttachmentResponse"];
        };
      };
    };
  };
  /**
   * List Macro Categories
   * @description Lists all macro categories available to the current user.
   *
   * #### Allowed For
   * * Agents
   */
  ListMacroCategories: {
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroCategoriesResponse"];
        };
      };
    };
  };
  /**
   * List Macro Action Definitions
   * @description Returns the definitions of the actions a macro can perform. For example,
   * one action can set the status of a ticket. The definition of the action
   * includes a title ("Status"), a type ("list"), and possible values. For a
   * list of support actions, see [Actions reference](/documentation/ticketing/reference-guides/actions-reference).
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListMacroActionDefinitions: {
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": {
            definitions?: {
              actions?: {
                  [key: string]: unknown;
                }[];
            };
          };
        };
      };
    };
  };
  /**
   * Bulk Delete Macros
   * @description Deletes the macros corresponding to the provided comma-separated list of IDs.
   *
   * #### Allowed For
   * * Agents
   */
  DeleteManyMacros: {
    parameters: {
      query: {
        /**
         * @description The IDs of the macros to delete
         * @example [
         *   1,
         *   2,
         *   3
         * ]
         */
        ids: number[];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Show Macro Replica
   * @description Returns an unpersisted macro representation derived from a ticket or macro.
   *
   * The endpoint takes one of the following query parameters: `macro_id` or `ticket_id`. If you include both, `macro_id` is used.
   *
   * #### Allowed For
   * * Agents
   */
  ShowDerivedMacro: {
    parameters: {
      query: {
        macro_id: components["parameters"]["MacroIdQuery"];
        /**
         * @description The ID of the ticket from which to build a macro replica
         * @example 35436
         */
        ticket_id: number;
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroResponse"];
        };
      };
    };
  };
  /**
   * Search Macros
   * @description #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   * * Agents
   */
  SearchMacro: {
    parameters: {
      query: {
        include?: components["parameters"]["MacroInclude"];
        access?: components["parameters"]["MacroAccess"];
        active?: components["parameters"]["MacroActive"];
        category?: components["parameters"]["MacroCategory"];
        group_id?: components["parameters"]["MacroGroupId"];
        only_viewable?: components["parameters"]["MacroOnlyViewable"];
        sort_by?: components["parameters"]["MacroSortBy"];
        sort_order?: components["parameters"]["MacroSortOrder"];
        query: components["parameters"]["MacroQuery"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacrosResponse"];
        };
      };
    };
  };
  /**
   * Update Many Macros
   * @description Updates the provided macros with the specified changes.
   *
   * #### Allowed For
   * * Agents
   */
  UpdateManyMacros: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MacroUpdateManyInput"];
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacrosResponse"];
        };
      };
    };
  };
  /**
   * Show Essentials Card
   * @description Gets the essentials card for an object type.
   * #### Allowed For
   * * Admins and agents
   */
  ShowEssentialsCard: {
    parameters: {
      path: {
        object_type: components["parameters"]["EssentialsCardKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["EssentialsCardResponse"];
        };
      };
    };
  };
  /**
   * Update Essentials Card
   * @description Updates the essentials card for an object type.
   * #### Allowed For
   * * Admins
   */
  UpdateEssentialsCard: {
    parameters: {
      path: {
        object_type: components["parameters"]["EssentialsCardKey"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["EssentialsCardResponse"];
        };
      };
    };
  };
  /**
   * Delete Essentials Card
   * @description Delete the essentials card for an object type.
   * #### Allowed For
   * * Admins and agents
   */
  DeleteEssentialsCard: {
    parameters: {
      path: {
        object_type: components["parameters"]["EssentialsCardKey"];
      };
    };
    responses: {
      /** @description Success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List of Essentials Cards
   * @description Gets the list of essentials cards.
   * #### Allowed For
   * * Admins
   */
  ShowEssentialsCards: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["EssentialsCardsResponse"];
        };
      };
    };
  };
  /**
   * List Organization Fields
   * @description Returns a list of custom organization fields in your account. Fields are returned in the order that you specify in your organization fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each organization field to the values returned under the `organization_fields` attribute on the [organization](/api-reference/ticketing/organizations/organizations/) resource.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListOrganizationFields: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationFieldsResponse"];
        };
      };
    };
  };
  /**
   * Create Organization Field
   * @description Creates any of the following custom field types:
   *
   * * text (default when no "type" is specified)
   * * textarea
   * * checkbox
   * * date
   * * integer
   * * decimal
   * * regexp
   * * dropdown
   * * lookup
   *
   * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateOrganizationField: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationFieldResponse"];
        };
      };
    };
  };
  /**
   * Show Organization Field
   * @description #### Allowed for
   *
   * * Agents
   */
  ShowOrganizationField: {
    parameters: {
      path: {
        organization_field_id: components["parameters"]["OrganizationFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationFieldResponse"];
        };
      };
    };
  };
  /**
   * Update Organization Field
   * @description #### Updating a Drop-down (Tagger) Field
   *
   * Drop-down fields return an array of `custom_field_options` which specify the name, value, and order of drop-down options. When updating a drop-down field, note the following information:
   *
   * - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations
   * - To create a new option, pass a null `id` along with the `name` and `value`
   * - To update an existing option, pass its `id` along with the `name` and `value`
   * - To reorder an option, reposition it in the `custom_field_options` array relative to the other options
   * - To remove an option, omit it from the list of options upon update
   *
   * #### Example Request
   *
   * ```bash
   * curl https://{subdomain}.zendesk.com/api/v2/organization_fields/{organization_field_id}.json \
   *   -H "Content-Type: application/json" -X PUT \
   *   -d '{"organization_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 3", "value": "option_3"}]}}' \
   *   -v -u {email_address}:{password}
   * ```
   * #### Allowed for
   *
   * * Admins
   */
  UpdateOrganizationField: {
    parameters: {
      path: {
        organization_field_id: components["parameters"]["OrganizationFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationFieldResponse"];
        };
      };
    };
  };
  /**
   * Delete Organization Field
   * @description #### Allowed for
   *
   * * Admins
   */
  DeleteOrganizationField: {
    parameters: {
      path: {
        organization_field_id: components["parameters"]["OrganizationFieldId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Reorder Organization Field
   * @description #### Allowed For
   *
   * * Admins
   */
  ReorderOrganizationField: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Memberships
   * @description Returns a list of organization memberships for the account, user or organization in question.
   *
   * **Note**: When returning organization memberships for a user, organization memberships are sorted with the default organization first, and then by organization name.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * - Agents
   * - End users
   */
  ListOrganizationMemberships: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMembershipsResponse"];
        };
      };
    };
  };
  /**
   * Create Membership
   * @description Assigns a user to a given organization. Returns an error with status 422 if the user is already assigned to the organization.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents when creating a new organization membership for an end user
   */
  CreateOrganizationMembership: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationMembershipResponse"];
        };
      };
    };
  };
  /**
   * Show Membership
   * @description #### Allowed for
   *
   * * Agents
   */
  ShowOrganizationMembershipById: {
    parameters: {
      path: {
        organization_membership_id: components["parameters"]["OrganizationMembershipId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMembershipResponse"];
        };
      };
    };
  };
  /**
   * Delete Membership
   * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
   *
   * #### Allowed for
   *
   * * Admins
   * * Agents when deleting an organization membership for an end user
   */
  DeleteOrganizationMembership: {
    parameters: {
      path: {
        organization_membership_id: components["parameters"]["OrganizationMembershipId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Create Many Memberships
   * @description This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   * * Admins
   * * Agents
   */
  CreateManyOrganizationMemberships: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Memberships
   * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Agents
   */
  DeleteManyOrganizationMemberships: {
    parameters: {
      query?: {
        /** @description The IDs of the organization memberships to delete */
        ids?: number[];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Organization Subscriptions
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For:
   *
   * * Agents
   * * End users
   *
   * For end users, the response will only list the subscriptions created by the requesting end user.
   */
  ListOrganizationSubscriptions: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * Create Organization Subscription
   * @description #### Allowed For:
   *
   * * Agents
   * * End users
   *
   * End users can only subscribe to shared organizations in which they're members.
   */
  CreateOrganizationSubscription: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["OrganizationSubscriptionCreateRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationSubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Show Organization Subscription
   * @description #### Allowed For:
   *
   * * Agents
   * * End users
   *
   * For end users, the response will only list the subscriptions created by the requesting end user.
   */
  ShowOrganizationSubscription: {
    parameters: {
      path: {
        organization_subscription_id: components["parameters"]["OrganizationSubscriptionId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationSubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Organization Subscription
   * @description #### Allowed For:
   *
   * * Agents
   * * End users
   */
  DeleteOrganizationSubscription: {
    parameters: {
      path: {
        organization_subscription_id: components["parameters"]["OrganizationSubscriptionId"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Organizations
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents, with certain restrictions
   *
   * If the agent has a custom agent role that restricts their access to only users in their own organization, a 403 Forbidden error is returned. See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents#topic_cxn_hig_bd) in Zendesk help.
   */
  ListOrganizations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationsResponse"];
        };
      };
    };
  };
  /**
   * Create Organization
   * @description You must provide a unique `name` for each organization. Normally
   * the system doesn't allow records to be created with identical names.
   * However, a race condition can occur if you make two or more identical
   * POSTs very close to each other, causing the records to have identical
   * organization names.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
   */
  CreateOrganization: {
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
    };
  };
  /**
   * Show Organization
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ShowOrganization: {
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
    };
  };
  /**
   * Update Organization
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   *
   * Agents with no permissions restrictions can only update "notes" on organizations.
   *
   * **Note:** Updating an organization's `domain_names` property overwrites all existing `domain_names` values. To prevent this, submit a complete list of `domain_names` for the organization in your request.
   *
   * #### Example Request
   *
   * ```js
   * {
   *   "organization": {
   *     "notes": "Something interesting"
   *   }
   * }
   * ```
   */
  UpdateOrganization: {
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
      /** @description Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Delete Organization
   * @description #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
   */
  DeleteOrganization: {
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** @description No Content Response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Show Organization's Related Information
   * @description #### Allowed For
   *
   * * Agents
   */
  OrganizationRelated: {
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationsRelatedResponse"];
        };
      };
    };
  };
  /**
   * Autocomplete Organizations
   * @description Returns an array of organizations whose name starts with the
   * value specified in the `name` parameter.
   *
   * #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   *
   * * Agents
   */
  AutocompleteOrganizations: {
    parameters: {
      query: {
        name: components["parameters"]["OrganizationQueryFragment"];
        field_id?: components["parameters"]["LookupRelationshipAutocompleteFieldIdFragment"];
        source?: components["parameters"]["LookupRelationshipAutocompleteSourceFragment"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationsResponse"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Too Many Requests */
      429: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Count Organizations
   * @description Returns an approximate count of organizations. If the count exceeds
   * 100,000, it is updated every 24 hours.
   *
   * The `refreshed_at` property of the `count` object is a timestamp that indicates
   * when the count was last updated.
   *
   * When the count exceeds 100,000, the `refreshed_at` property may
   * occasionally be null. This indicates that the count is being
   * updated in the background and the `value` property of the `count` object is limited to
   * 100,000 until the update is complete.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CountOrganizations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CountOrganizationResponse"];
        };
      };
    };
  };
  /**
   * Create Many Organizations
   * @description Accepts an array of up to 100 organization objects.
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Agents, with restrictions applying on certain actions
   */
  CreateManyOrganizations: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Create Or Update Organization
   * @description Creates an organization if it doesn't already exist, or updates
   * an existing organization. Using this method means one less call
   * to check if an organization exists before creating it. You need
   * to specify the id or external id when updating
   * an organization to avoid a duplicate error response. Name is
   * not available as a matching criteria.
   *
   * #### Allowed For
   *
   * * Agents, with restrictions on certain actions
   */
  CreateOrUpdateOrganization: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Organizations
   * @description Accepts a comma-separated list of up to 100 organization ids or external ids.
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to manage organizations (Enterprise only)
   */
  DeleteManyOrganizations: {
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Search Organizations
   * @description Returns an array of organizations matching the criteria. You may search by an organization's `external_id` or `name`, but not both:
   *
   * #### Searching by `external_id`
   *
   * If you set the `external_id` value of an organization to associate it to an external record, you can use it to search for the organization.
   *
   * For an organization to be returned, its `external_id` must exactly match the value provided (case insensitive).
   *
   * #### Searching by `name`
   *
   * For an organization to be returned, its `name` must exactly match the value provided (case insensitive).
   *
   * #### Allowed For:
   *
   * * Admins
   * * Agents assigned to a custom role with permissions to add or modify organizations (Enterprise only)
   *
   * See [Creating custom agent roles](https://support.zendesk.com/hc/en-us/articles/203662026#topic_cxn_hig_bd) in the Support Help Center.
   */
  SearchOrganizations: {
    parameters: {
      query?: {
        external_id?: components["parameters"]["OrganizationExternalId"];
        name?: components["parameters"]["OrganizationName"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationsResponse"];
        };
      };
    };
  };
  /**
   * Show Many Organizations
   * @description Accepts a comma-separated list of up to 100 organization ids or external ids.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ShowManyOrganizations: {
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationsResponse"];
        };
      };
    };
  };
  /**
   * Update Many Organizations
   * @description Bulk or batch updates up to 100 organizations.
   *
   * #### Bulk update
   *
   * To make the same change to multiple organizations, use the following endpoint and data format:
   *
   * `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json?ids=1,2,3`
   *
   * ```js
   * {
   *   "organization": {
   *     "notes": "Priority"
   *   }
   * }
   * ```
   *
   * #### Batch update
   *
   * To make different changes to multiple organizations, use the following endpoint and data format:
   *
   * `https://{subdomain}.zendesk.com/api/v2/organizations/update_many.json`
   *
   * ```js
   * {
   *   "organizations": [
   *     { "id": 1, "notes": "Priority" },
   *     { "id": 2, "notes": "Normal" }
   *   ]
   * }
   * ```
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   *
   * Agents with no permissions restrictions can only update "notes" on organizations.
   */
  UpdateManyOrganizations: {
    parameters: {
      query?: {
        ids?: components["parameters"]["OrganizationIds"];
        external_ids?: components["parameters"]["OrganizationExternalIds"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Problems
   * @description The response is always ordered by `updated_at` in descending order
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTicketProblems: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketProblemsResponse"];
        };
      };
    };
  };
  /**
   * Autocomplete Problems
   * @description Returns tickets whose type is "problem" and whose subject contains the string specified in the `text` parameter.
   *
   * You can specify the `text` parameter in the request body rather than the query string. Example:
   *
   * `{"text": "fire"}`
   *
   * #### Allowed For
   *
   * * Agents
   */
  AutocompleteProblems: {
    parameters: {
      query?: {
        /** @description The text to search for */
        text?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "text": "fire"
         * }
         */
        "application/json": {
          /** @description The text to search for */
          text?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketProblemsResponse"];
        };
      };
    };
  };
  /**
   * Bulk Unregister Push Notification Devices
   * @description Unregisters the mobile devices that are receiving push notifications. Specify the devices as an array of mobile device tokens.
   *
   * #### Allowed for
   *
   * * Admins
   */
  PushNotificationDevices: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PushNotificationDevicesRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List queues
   * @description #### Allowed For
   *
   * * Admins
   */
  ListQueues: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["QueuesResponse"];
        };
      };
    };
  };
  /**
   * Create queue
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateQueue: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["QueueResponse"];
        };
      };
    };
  };
  /**
   * Show Queue
   * @description #### Allowed For
   *
   * * Admins
   */
  ShowQueueById: {
    parameters: {
      path: {
        queue_id: components["parameters"]["OcrQueueId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["QueueResponse"];
        };
      };
    };
  };
  /**
   * Update queue
   * @description #### Allowed For
   *
   * * Admins
   */
  UpdateQueue: {
    parameters: {
      path: {
        queue_id: components["parameters"]["OcrQueueId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["QueueResponse"];
        };
      };
    };
  };
  /**
   * Delete queue
   * @description #### Allowed For
   *
   * * Admins
   */
  DeleteQueue: {
    parameters: {
      path: {
        queue_id: components["parameters"]["OcrQueueId"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List queue definitions
   * @description #### Allowed For
   *
   * * Admins
   */
  ListQueueDefinitions: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["DefinitionsResponse"];
        };
      };
    };
  };
  /**
   * List Support Addresses
   * @description Lists all the support addresses for the account.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ListSupportAddresses: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SupportAddressesResponse"];
        };
      };
    };
  };
  /**
   * Create Support Address
   * @description Adds a Zendesk or external support address to your account.
   *
   * To add a Zendesk address, use the following syntax: `{local-part}@{accountname}.zendesk.com`.
   * Example: 'sales-team@example.zendesk.com'. The [local-part](https://en.wikipedia.org/wiki/Email_address#Local-part) can be anything you like.
   *
   * To add an external email address such as help@omniwearshop.com, the email must already exist and you must set up forwarding on your email server. The exact steps depend on your mail server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266). After setting up forwarding, run the [Verify Support Address Forwarding](#verify-support-address-forwarding) endpoint. The address won't work in Zendesk Support until it's been verified.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
   */
  CreateSupportAddress: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["SupportAddressResponse"];
        };
      };
    };
  };
  /**
   * Show Support Address
   * @description #### Allowed For
   *
   * * Admins
   * * Agents
   */
  ShowSupportAddress: {
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SupportAddressResponse"];
        };
      };
    };
  };
  /**
   * Update Support Address
   * @description Updates an existing support address for your account.
   *
   * You can't use this endpoint to update a support address's `email` property.
   * Instead, you can create a new address using the [Create Support
   * Address](#create-support-address) endpoint.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
   */
  UpdateSupportAddress: {
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SupportAddressResponse"];
        };
      };
    };
  };
  /**
   * Delete Support Address
   * @description Deletes a support address.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
   */
  DeleteRecipientAddress: {
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Verify Support Address Forwarding
   * @description Sends a test email to the specified support address to verify that email forwarding for the address works. An external support address won't work in Zendesk Support until it's verified.
   *
   * **Note**: You don't need to verify Zendesk system support addresses.
   *
   * The endpoint takes the following body: `{"type": "forwarding"}`. The value of the `type` property defaults to "forwarding" if none is specified, but the values "spf" and "dns" are also accepted.
   *
   * Use this endpoint after [adding](#create-support-address) an external support address to Zendesk Support and setting up forwarding on your email server. See [Forwarding incoming email to Zendesk Support](https://support.zendesk.com/hc/en-us/articles/203663266).
   *
   * The endpoint doesn't return the results of the test. Instead, use the [Show Support Address](#show-support-address) endpoint to check that the `forwarding_status` property is "verified".
   *
   * Other verification checks can also be performed using this API. These include SPF checks and DNS checks.
   *
   * When calling the endpoint with `type` set to "spf", it will queries the DNS records to check that the SPF records for Zendesk are present for outbound emails.
   *
   * When calling the endpoint with `type` set to "dns", it runs checks on your CNAME records to make sure they are set up properly in your DNS.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents with permission to manage channels and extensions. See the system permissions in [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026-Creating-custom-roles-and-assigning-agents-Enterprise-#topic_cxn_hig_bd) in the Support Help Center
   */
  VerifySupportAddressForwarding: {
    parameters: {
      path: {
        support_address_id: components["parameters"]["SupportAddressId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Filter Definitions
   * @description Returns filter definitions based on the given target type.  Target types
   * include users (zen:user), tickets (zen:ticket), organizations (zen:organization), or custom objects (zen:custom_object:CUSTOM_OBJECT_KEY).
   * The returned filter definitions are the options that you can use to build a custom field or ticket field's
   * `relationship_filter`.
   */
  GetRelationshipFilterDefinitions: {
    parameters: {
      query?: {
        /**
         * @description The source type for which you would like to see filter definitions.
         * The options are "zen:user", "zen:ticket", and "zen:organization"
         *
         * @example zen:user
         */
        source_type?: string;
      };
      path: {
        /**
         * @description The target type for which you would like to see filter definitions.
         * The options are "zen:user", "zen:ticket", "zen:organization", and "zen:custom_object:CUSTOM_OBJECT_KEY"
         *
         * @example zen:custom_object:apartment
         */
        target_type: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RelationshipFilterDefinitionResponse"];
        };
      };
    };
  };
  /**
   * List Requests
   * @description #### Allowed for
   *
   * * End Users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListRequests: {
    parameters: {
      query?: {
        /** @description Possible values are "updated_at", "created_at" */
        sort_by?: string;
        /** @description One of "asc", "desc". Defaults to "asc" */
        sort_order?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestsResponse"];
        };
      };
    };
  };
  /**
   * Create Request
   * @description Accepts a `request` object that sets one or more properties.
   *
   * #### Allowed for
   *
   * * End users
   * * Anonymous users (rate limit of 5 requests per hour for [trial accounts](/documentation/developer-tools/getting-started/getting-a-trial-or-sponsored-account-for-development/))
   *
   * #### Additional properties
   *
   * In addition to the writable request properties in the [JSON Format table](#json-format) above, you can set the following properties when creating a request.
   *
   * | Name                | Type   | Mandatory | Comment
   * | ----------------    | -------| --------- | -------
   * | comment             | object | yes       | Describes the problem, incident, question, or task. See [Request comments](#request-comments)
   * | collaborators       | array  | no        | Adds collaborators (cc's) to the request. An email notification is sent to them when the ticket is created. See [Setting collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#setting-collaborators)
   * | requester           | object | yes*      | \*Required for anonymous requests. Specifies the requester of the anonymous request. See [Creating anonymous requests](/documentation/ticketing/managing-tickets/creating-and-managing-requests#creating-anonymous-requests)
   *
   * #### Creating follow-up requests
   *
   * Once a ticket is closed (as distinct from solved), it can't be reopened. However, you can create a new request that references the closed ticket. To create the follow-up request, include a `via_followup_source_id` property in the `request` object that specifies the closed ticket. The parameter only works with closed tickets. It has no effect with other tickets.
   */
  CreateRequest: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["RequestResponse"];
        };
      };
    };
  };
  /**
   * Show Request
   * @description #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | users            | The email ccs for a request by side-loading users
   *
   * #### Allowed For
   *
   * * End Users
   */
  ShowRequest: {
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestResponse"];
        };
      };
    };
  };
  /**
   * Update Request
   * @description Updates a request with a comment or collaborators (cc's). The end user who created the request can also use it to mark the request as solved. The endpoint can't be used to update other request attributes.
   *
   * #### Writable properties
   * This endpoint can only update the following properties in the request.
   *
   * | Name                     | Type    | Required | Description                                          |
   * | ------------------------ | ------- | -------- | ---------------------------------------------------- |
   * | comment                  | object  | no       | Adds a comment to the request. See [Request comments](#request-comments) |
   * | solved                   | boolean | no       | Marks the request as solved. Example: `{"request": {"solved": "true"}}`. End users can mark requests as solved only if the request's `can_be_solved_by_me` property is true. The property is true only when the ticket is assigned to an agent and the ticket type is not a problem but a question, task, or incident |
   * | additional_collaborators | array   | no       | Adds collaborators to the request. An email notification is sent to them when the ticket is updated. See [Adding collaborators](/documentation/ticketing/managing-tickets/creating-and-managing-requests#adding-collaborators) |
   *
   * #### Allowed For
   *
   * * End users
   */
  UpdateRequest: {
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestResponse"];
        };
      };
    };
  };
  /**
   * Listing Comments
   * @description #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sorting
   *
   * By default, comments are sorted by creation date in ascending order.
   *
   * When using cursor pagination, use the following parameter to change the sort order:
   *
   * | Name   | Type   | Required | Comments
   * | ------ | ------ | -------- | --------
   * | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)
   *
   * When using offset pagination, use the following parameters to change the sort order:
   *
   * | Name         | Type   | Required | Comments
   * | ------------ | ------ | -------- | --------
   * | `sort_by`    | string | no       | One of `created_at`, `updated_at`
   * | `sort_order` | string | no       | One of `asc`, `desc`
   *
   * #### Allowed For
   *
   * * End Users
   */
  ListComments: {
    parameters: {
      query?: {
        /** @description Filters the comments from the given datetime */
        since?: string;
        /** @description One of "agent", "end_user". If not specified it does not filter */
        role?: string;
      };
      path: {
        request_id: components["parameters"]["RequestId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentsResponse"];
        };
      };
    };
  };
  /**
   * Getting Comments
   * @description #### Allowed For
   *
   * * End Users
   */
  ShowComment: {
    parameters: {
      path: {
        request_id: components["parameters"]["RequestId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentResponse"];
        };
      };
    };
  };
  /**
   * Search Requests
   * @description Examples:
   *
   * * `GET /api/v2/requests/search.json?query=printer`
   * * `GET /api/v2/requests/search.json?query=printer&organization_id=1`
   * * `GET /api/v2/requests/search.json?query=printer&cc_id=true`
   * * `GET /api/v2/requests/search.json?query=printer&status=hold,open`
   *
   * #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Results limit
   *
   * The Search Requests endpoint returns up to 1,000 results per query, with a maximum of 100 results per page. See [Pagination](/api-reference/ticketing/introduction/#pagination). If you request a page past the limit (`page=11` at 100 results per page), a 422 Insufficient Resource Error is returned.
   *
   * #### Allowed For
   *
   * * End Users
   */
  SearchRequests: {
    parameters: {
      query?: {
        /** @description The syntax and matching logic for the string is detailed in the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226). See also [Query basics](/api-reference/ticketing/ticket-management/search/#query-basics) in the Tickets API doc. */
        query?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestsResponse"];
        };
      };
    };
  };
  /**
   * List Resource Collections
   * @description Lists resource collections for the account.
   *
   * #### Allowed for
   *
   * * Admins
   */
  ListResourceCollections: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ResourceCollectionsResponse"];
        };
      };
    };
  };
  /**
   * Create Resource Collection
   * @description Creates a resource collection from a provided `payload` object. The `payload` object is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.
   *
   * The response includes a [job
   * status](/api-reference/ticketing/ticket-management/job_statuses/) for creation of the specified resources.
   *
   * #### Allowed for
   *
   * * Admins
   */
  CreateResourceCollection: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Show Resource Collection
   * @description Retrieves details for a specified resource collection.
   *
   * #### Allowed for
   *
   * * Admins
   */
  RetrieveResourceCollection: {
    parameters: {
      path: {
        resource_collection_id: components["parameters"]["ResourceCollectionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ResourceCollectionResponse"];
        };
      };
    };
  };
  /**
   * Update Resource Collection
   * @description Updates a resource collection using a provided `payload` object. The `payload` object  is specified the same way as the content of a requirements.json file in a Zendesk app. See [Specifying Apps Requirements](/documentation/apps/app-developer-guide/apps_requirements/) in the Zendesk Apps framework docs.
   *
   * The response includes a [job
   * status](/api-reference/ticketing/ticket-management/job_statuses/) for the resource updates.
   *
   * #### Allowed for
   *
   * * Admins
   */
  UpdateResourceCollection: {
    parameters: {
      path: {
        resource_collection_id: components["parameters"]["ResourceCollectionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Delete Resource Collection
   * @description Deletes a specified resource collection.
   *
   * The response includes a [job
   * status](/api-reference/ticketing/ticket-management/job_statuses/) for deletion of the collection's resources.
   *
   * #### Allowed for
   *
   * * Admins
   */
  DeleteResourceCollection: {
    parameters: {
      path: {
        resource_collection_id: components["parameters"]["ResourceCollectionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Agent Attribute Values
   * @description Returns an attribute value.
   *
   * #### Allowed For
   *
   * * Agents and admins
   */
  ListAGentAttributeValues: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValuesResponse"];
        };
      };
    };
  };
  /**
   * Set Agent Attribute Values
   * @description Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.
   *
   * #### Allowed For
   *
   * * Admins
   */
  SetAgentAttributeValues: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValuesResponse"];
        };
      };
    };
  };
  /**
   * List Account Attributes
   * @description Returns a list of attributes for the account.
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | attribute_values | The attribute values available on the account
   *
   * #### Allowed For
   *
   * * Agents and admins
   */
  ListAccountAttributes: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributesResponse"];
        };
      };
    };
  };
  /**
   * Create Attribute
   * @description Creates an attribute.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateAttribute: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeResponse"];
        };
      };
    };
  };
  /**
   * Show Attribute
   * @description Returns an attribute.
   *
   * #### Allowed For
   *
   * * Admins
   */
  ShowAttribute: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeResponse"];
        };
      };
    };
  };
  /**
   * Update Attribute
   * @description Updates an attribute.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateAttribute: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeResponse"];
        };
      };
    };
  };
  /**
   * Delete Attribute
   * @description Deletes an attribute.
   *
   * #### Allowed For
   *
   * * Admins
   */
  DeleteAttribute: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Attribute Values for an Attribute
   * @description Returns a list of attribute values for a provided attribute.
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListAttributeValues: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValuesResponse"];
        };
      };
    };
  };
  /**
   * Create Attribute Value
   * @description Creates an attribute value.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateAttributeValue: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValueResponse"];
        };
      };
    };
  };
  /**
   * Show Attribute Value
   * @description Returns an attribute value.
   *
   * #### Allowed For
   *
   * * Admins
   */
  ShowAttributeValue: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
        attribute_value_id: components["parameters"]["SkillBasedRoutingAttributeValueId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValueResponse"];
        };
      };
    };
  };
  /**
   * Delete Attribute Value
   * @description Deletes an attribute value.
   *
   * #### Allowed For
   *
   * * Agents
   */
  DeleteAttributeValue: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
        attribute_value_id: components["parameters"]["SkillBasedRoutingAttributeValueId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update Attribute Value
   * @description Updates an attribute value.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateAttributeValue: {
    parameters: {
      path: {
        attribute_id: components["parameters"]["SkillBasedRoutingAttributeId"];
        attribute_value_id: components["parameters"]["SkillBasedRoutingAttributeValueId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValueResponse"];
        };
      };
    };
  };
  /**
   * List Routing Attribute Definitions
   * @description Returns the condition definitions that can be configured to apply attributes to a ticket.
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListRoutingAttributeDefinitions: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeDefinitions"];
        };
      };
    };
  };
  /**
   * List Tickets Fulfilled by a User
   * @description Returns a list of ticket ids that contain attributes matching the current user's attributes. Accepts a `ticket_ids` parameter for relevant tickets to check for matching attributes.
   *
   * #### Allowed For
   *
   * * Agents and admins
   */
  ListTicketsFullfilledByUser: {
    parameters: {
      query: {
        /**
         * @description The IDs of the relevant tickets to check for matching attributes
         * @example 1
         */
        ticket_ids: number;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingTicketFulfilledResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Attribute Values
   * @description Returns a list of attributes values for the ticket.
   *
   * #### Allowed For
   *
   * * Agents and admins
   */
  ListTicketAttributeValues: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValuesResponse"];
        };
      };
    };
  };
  /**
   * Set Ticket Attribute Values
   * @description Adds the specified attributes if no attributes exists, or replaces all existing attributes with the specified attributes.
   *
   * Invalid or deleted attributes are ignored.
   *
   * #### Allowed For
   *
   * * Admins
   */
  SetTicketAttributeValues: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SkillBasedRoutingAttributeValuesResponse"];
        };
      };
    };
  };
  /**
   * List Satisfaction Ratings
   * @description #### Allowed For
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Filters
   *
   * | Parameter  | Value
   * | ---------- | -----
   * | score      | offered, unoffered, received, received\_with\_comment, received\_without\_comment,<br/>good, good\_with\_comment, good\_without\_comment,<br/>bad, bad\_with\_comment, bad\_without\_comment
   * | start_time | Time of the oldest satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)
   * | end_time   | Time of the most recent satisfaction rating, as a [Unix epoch time](https://www.epochconverter.com/)
   *
   * If you specify an unqualified score such as `good`, the results include all the records with and without comments.
   *
   * Examples:
   *
   * * `/api/v2/satisfaction_ratings.json?score=bad`
   * * `/api/v2/satisfaction_ratings.json?score=bad&start_time=1498151194`
   * * `/api/v2/satisfaction_ratings.json?start_time=1340384793&end_time=1371920793`
   */
  ListSatisfactionRatings: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionRatingsResponse"];
        };
      };
    };
  };
  /**
   * Show Satisfaction Rating
   * @description Returns a specific satisfaction rating. You can get the id from
   * the [List Satisfaction Ratings](#list-satisfaction-ratings) endpoint.
   *
   * #### Allowed For
   *
   *  * Admins
   */
  ShowSatisfactionRating: {
    parameters: {
      path: {
        /**
         * @description The id of the satisfaction rating to retrieve
         * @example 35436
         */
        satisfaction_rating_id: number;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionRatingResponse"];
        };
      };
    };
  };
  /**
   * Count Satisfaction Ratings
   * @description Returns an approximate count of satisfaction ratings in the account. If the count exceeds 100,000, the count will return a cached result. This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountSatisfactionRatings: {
    responses: {
      /** @description Count of satisfaction ratings */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionRatingsCountResponse"];
        };
      };
    };
  };
  /**
   * List Reasons for Satisfaction Rating
   * @description List all reasons for an account
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListSatisfactionRatingReasons: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionReasonsResponse"];
        };
      };
    };
  };
  /**
   * Show Reason for Satisfaction Rating
   * @description #### Allowed For
   *
   * * Admins
   */
  ShowSatisfactionRatings: {
    parameters: {
      path: {
        /**
         * @description The id of the satisfaction rating reason
         * @example 35121
         */
        satisfaction_reason_id: number;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionReasonResponse"];
        };
      };
    };
  };
  /**
   * List Search Results
   * @description Use the ampersand character (&) to append the `sort_by` or `sort_order` parameters to the URL.
   *
   * For examples, see [Searching with Zendesk API](/documentation/ticketing/using-the-zendesk-api/searching-with-the-zendesk-api).
   *
   * #### Pagination
   *
   * * Offset pagination only
   *
   * Offset pagination may result in duplicate results when paging. You can also use the
   * [Export Search Results](/api-reference/ticketing/ticket-management/search/#export-search-results) endpoint, which
   * uses cursor-based pagination and doesn't return duplicate results. See
   * [Pagination](/api-reference/introduction/pagination/) for more information.
   *
   * #### Allowed For
   *
   * * Admins, Agents and Light Agents
   *
   *
   * #### Errors JSON Format
   *
   * Errors are represented as JSON objects which have the following keys:
   *
   * | Name                  | Type                 | Comment
   * | --------------------- | ---------------------| --------------------
   * | error                 | string               | The type of error. Examples: "unavailable", "invalid"
   * | description           | string               |
   *
   * ##### Example Error
   * ```js
   * {
   *   "error": "unavailable",
   *   "description": "Sorry, we could not complete your search query. Please try again in a moment."
   * }
   * ```
   */
  ListSearchResults: {
    parameters: {
      query: {
        /**
         * @description The search query. See [Query basics](#query-basics) above. For details on the query syntax, see the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226)
         * @example https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket status:closed&sort_by=status&sort_order=desc
         */
        query: string;
        /** @description One of `updated_at`, `created_at`, `priority`, `status`, or `ticket_type`. Defaults to sorting by relevance */
        sort_by?: string;
        /** @description One of `asc` or `desc`.  Defaults to `desc` */
        sort_order?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResponse"];
        };
      };
    };
  };
  /**
   * Show Results Count
   * @description Returns the number of items matching the query rather than the items. The search string works the same as a regular search.
   */
  CountSearchResults: {
    parameters: {
      query: {
        /**
         * @description The search query
         * @example https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket status:closed
         */
        query: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchCountResponse"];
        };
      };
    };
  };
  /**
   * Export Search Results
   * @description Exports a set of results. See [Query basics](#query-basics) for the syntax of the `query` parameter.
   *
   * This endpoint is for search queries that will return more than 1000 results. The result set is ordered only by the `created_at` attribute.
   *
   * The search only returns results of a single object type. The following object types are supported: ticket, organization, user, or group.
   *
   * You must specify the type in the `filter[type]` parameter. Searches with type in the query string will result in an error.
   *
   * #### Allowed For
   *
   * - Agents
   *
   * #### Pagination
   *
   * - Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 1000 records per page. The number of results shown in a page is determined by the `page[size]` parameter.
   *
   * **Note**: You may experience a speed reduction or a timeout if you request 1000 results per page and you have many archived tickets in the results. Try reducing the number of results per page. We recommend 100 results per page.
   *
   * The cursor specified by the `after_cursor` property in a response expires after one hour.
   *
   * For more information on cursor-based pagination, see the following articles:
   *
   * - [Comparing cursor pagination and offset pagination](/documentation/developer-tools/pagination/comparing-cursor-pagination-and-offset-pagination)
   * - [Paginating through lists using cursor pagination](/documentation/developer-tools/pagination/paginating-through-lists-using-cursor-pagination)
   *
   * #### Limits
   *
   * This API endpoint is rate-limited to 100 requests per minute per account. The limit also counts towards the global API rate limit.
   *
   * #### Response Format
   *
   * | Name                  | Type                 | Comment
   * | --------------------- | ---------------------| --------------------
   * | links[next]           | string               | URL to the next page of results
   * | meta[has_more]        | string               | Boolean indicating if there are more results
   * | meta[after_cursor]    | string               | Cursor object returned from the Search Service
   * | results               | array                | May consist of tickets, users, groups, or organizations, as specified by the `filter_type` parameter
   *
   * The response is similar to the response of `GET /api/v2/search.json?`, with a few changes:
   *
   * * `links` - Has the following nested properties: `prev` and `next`. These replace the `next_page` and `prev_page` links. The `prev` property is always null because backward pagination is not supported. The `next` property may include an auto-generated link to the next page of results.
   * * `meta` - Has the following nested properties: `has_more` and `after_cursor`. The `has_more` property indicates whether the next page has more results. The `after_cursor` property is the cursor used to paginate to the next page. It expires after one hour.
   *
   * There's no `count` property.
   */
  ExportSearchResults: {
    parameters: {
      query: {
        /**
         * @description The search query. See [Query basics](#query-basics) above. For details on the query syntax, see the [Zendesk Support search reference](https://support.zendesk.com/hc/en-us/articles/203663226)
         * @example https://subdomain.zendesk.com/api/v2/search.json?query=type:ticket status:closed&sort_by=status&sort_order=desc
         */
        query: string;
        /** @description The number of results shown in a page. */
        "page[size]"?: number;
        /** @description The object type returned by the export query. Can be `ticket`, `organization`, `user`, or `group`. */
        "filter[type]"?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchExportResponse"];
        };
      };
    };
  };
  /**
   * List Sessions
   * @description If authenticated as an admin, returns all the account's sessions. If authenticated as an agent or end user, returns only the sessions of the user making the request.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Allowed For
   *
   * * Admins, Agents, End users
   */
  ListSessions: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionsResponse"];
        };
      };
    };
  };
  /**
   * List Sharing Agreements
   * @description #### Allowed For
   *
   * * Agents
   */
  ListSharingAgreements: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SharingAgreementsResponse"];
        };
      };
    };
  };
  /**
   * Create Sharing Agreement
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateSharingAgreement: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["SharingAgreementResponse"];
        };
      };
    };
  };
  /**
   * Show a Sharing Agreement
   * @description Returns a sharing agreement for your account.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowSharingAgreement: {
    parameters: {
      path: {
        sharing_agreement_id: components["parameters"]["SharingAgreementId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SharingAgreementResponse"];
        };
      };
    };
  };
  /**
   * Update a Sharing Agreement
   * @description Returns an updated sharing agreement. Only `status` is allowed to be updated.
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateSharingAgreement: {
    parameters: {
      path: {
        sharing_agreement_id: components["parameters"]["SharingAgreementId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SharingAgreementResponse"];
        };
      };
    };
  };
  /**
   * Delete a Sharing Agreement
   * @description Deletes a sharing agreement.
   *
   * #### Allowed For
   *
   * * Admins
   */
  DeleteSharingAgreement: {
    parameters: {
      path: {
        sharing_agreement_id: components["parameters"]["SharingAgreementId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Record a New Skip for the Current User
   * @description Record a new ticket skip for the current user.
   *
   * #### Allowed For
   *
   * * Agents
   */
  RecordNewSkip: {
    responses: {
      /** @description Success response */
      201: {
        content: {
          "application/json": components["schemas"]["TicketSkipCreation"];
        };
      };
    };
  };
  /**
   * List SLA Policies
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListSLAPolicies: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SLAPoliciesResponse"];
        };
      };
    };
  };
  /**
   * Create SLA Policy
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateSLAPolicy: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["SLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Show SLA Policy
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  ShowSLAPolicy: {
    parameters: {
      path: {
        sla_policy_id: components["parameters"]["SLAPolicyId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Update SLA Policy
   * @description Updates the specified policy.
   *
   * #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  UpdateSLAPolicy: {
    parameters: {
      path: {
        sla_policy_id: components["parameters"]["SLAPolicyId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SLAPolicyResponse"];
        };
      };
    };
  };
  /**
   * Delete SLA Policy
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  DeleteSLAPolicy: {
    parameters: {
      path: {
        sla_policy_id: components["parameters"]["SLAPolicyId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Retrieve Supported Filter Definition Items
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  RetrieveSLAPolicyFilterDefinitionItems: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SLAPolicyFilterDefinitionResponse"];
        };
      };
    };
  };
  /**
   * Reorder SLA Policies
   * @description #### Availability
   *
   * * Accounts on the Support Professional or Suite Growth plan or above
   *
   * #### Allowed For
   *
   * * Admins
   */
  ReorderSLAPolicies: {
    parameters: {
      query?: {
        /** @description The IDs of the SLA Policies to reorder */
        sla_policy_ids?: number[];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Suspended Tickets
   * @description #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   *
   * #### Sorting
   *
   * You can sort the tickets with the `sort_by` and `sort_order` query string parameters.
   *
   * #### Pagination
   *
   * * Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListSuspendedTickets: {
    parameters: {
      query?: {
        sort_by?: components["parameters"]["SuspendedTicketsSortBy"];
        sort_order?: components["parameters"]["SuspendedTicketsSortOrder"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SuspendedTicketsResponse"];
        };
      };
    };
  };
  /**
   * Show Suspended Ticket
   * @description #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   */
  ShowSuspendedTickets: {
    parameters: {
      path: {
        id: components["parameters"]["SuspendedTicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SuspendedTicketsResponse"];
        };
      };
    };
  };
  /**
   * Delete Suspended Ticket
   * @description #### Allowed For
   *
   * * Unrestricted agents
   */
  DeleteSuspendedTicket: {
    parameters: {
      path: {
        id: components["parameters"]["SuspendedTicketId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Recover Suspended Ticket
   * @description **Note**: During recovery, the API sets the requester to the authenticated agent who called the API, not the original requester. This prevents the ticket from being re-suspended after recovery. To preserve the original requester, use the [Recover Multiple Suspended Tickets](#recover-multiple-suspended-tickets) endpoint with the single ticket.
   *
   * This endpoint does not queue an asynchronous job that can be tracked from [Job Statuses](/api-reference/ticketing/ticket-management/job_statuses/). Instead, it processes the request with a synchronous response.
   *    - If all recoveries are successful, it returns a 200 with a `tickets` array in the response.
   *    - If all recoveries fail, it returns a 422 with a `suspended_tickets` array in the response.
   *    - If there is a mixture of successes and failures in a single call, it returns a 422 with a `suspended_tickets` array of the failures in the response.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   */
  RecoverSuspendedTicket: {
    parameters: {
      path: {
        id: components["parameters"]["SuspendedTicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RecoverSuspendedTicketResponse"];
        };
      };
      /** @description Recovery failed response */
      422: {
        content: {
          "application/json": components["schemas"]["RecoverSuspendedTicketUnprocessableContentResponse"];
        };
      };
    };
  };
  /**
   * Suspended Ticket Attachments
   * @description Makes copies of any attachments on a suspended ticket and returns them as [attachment tokens](/api-reference/ticketing/tickets/ticket-attachments/). If the  ticket is manually recovered, you can include the attachment tokens on the new ticket.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   */
  SuspendedTicketsAttachments: {
    parameters: {
      path: {
        id: components["parameters"]["SuspendedTicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SuspendedTicketsAttachmentsResponse"];
        };
      };
    };
  };
  /**
   * Delete Multiple Suspended Tickets
   * @description Accepts up to 100 ids (the auto-generated id, not the ticket id.)
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   */
  DeleteSuspendedTickets: {
    parameters: {
      query: {
        ids: components["parameters"]["SuspendedTicketsDeleteIds"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Export Suspended Tickets
   * @description Exports a list of suspended tickets for the Zendesk Support instance. To export the list, the endpoint enqueues a job to create a CSV file with the data. When done, Zendesk sends the requester an email containing a link to the CSV file. In the CSV, tickets are sorted by the update timestamp in ascending order.
   *
   *  #### Allowed For
   *
   *  * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   *  * Unrestricted agents on all other plans
   *
   *  #### Rate limits
   *
   *  Limited to one request per minute and up to one million records in return. The rate-limiting mechanism behaves identically to the one described in [Usage limits](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity).
   *  We recommend using the `Retry-After` header value as described in [Catching errors caused by rate limiting](/documentation/ticketing/using-the-zendesk-api/best-practices-for-avoiding-rate-limiting#catch).
   */
  ExportSuspendedTickets: {
    responses: {
      /** @description Ok */
      200: {
        content: {
          "application/json": components["schemas"]["SuspendedTicketsExportResponse"];
        };
      };
    };
  };
  /**
   * Recover Multiple Suspended Tickets
   * @description Accepts up to 100 ids (the auto-generated id, not the ticket id.) Note that suspended tickets that fail to be recovered are still included in the response.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage suspended tickets on Enterprise plans
   * * Unrestricted agents on all other plans
   */
  RecoverSuspendedTickets: {
    parameters: {
      query: {
        ids: components["parameters"]["SuspendedTicketsRecoverIds"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RecoverSuspendedTicketsResponse"];
        };
      };
    };
  };
  /**
   * List Tags
   * @description Lists up to the 20,000 most popular tags in the last 60 days, in decreasing popularity.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTags: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TagsResponse"];
        };
      };
    };
  };
  /**
   * Count Tags
   * @description Returns an approximate count of tags. If the count exceeds 100,000, it
   * is updated every 24 hours.
   *
   * The `refreshed_at` property of the `count` object is a timestamp that indicates when
   * the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, the `refreshed_at` property in the `count` object may
   * occasionally be null. This indicates that the count is being
   * updated in the background and the `value` property in the `count` object is limited to
   * 100,000 until the update is complete.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CountTags: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TagCountResponse"];
        };
      };
    };
  };
  /**
   * List Target Failures
   * @description Returns the 25 most recent target failures, per target.
   *
   * #### Stability
   *
   * * Development
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListTargetFailures: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetFailuresResponse"];
        };
      };
    };
  };
  /**
   * Show Target Failure
   * @description #### Stability
   *
   * * Development
   *
   * #### Allowed For
   *
   * * Admins
   */
  ShowTargetFailure: {
    parameters: {
      path: {
        target_failure_id: components["parameters"]["TargetFailureId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetFailureResponse"];
        };
      };
    };
  };
  /**
   * List Targets
   * @description #### Allowed For
   *
   * * Agents
   */
  ListTargets: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetsResponse"];
        };
      };
    };
  };
  /**
   * Create Target
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateTarget: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TargetResponse"];
        };
      };
    };
  };
  /**
   * Show Target
   * @description #### Allowed For
   *
   * * Agents
   */
  ShowTarget: {
    parameters: {
      path: {
        target_id: components["parameters"]["TargetId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetResponse"];
        };
      };
    };
  };
  /**
   * Update Target
   * @description #### Allowed For
   * * Admins
   */
  UpdateTarget: {
    parameters: {
      path: {
        target_id: components["parameters"]["TargetId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TargetResponse"];
        };
      };
    };
  };
  /**
   * Delete Target
   * @description #### Allowed For
   * * Admins
   */
  DeleteTarget: {
    parameters: {
      path: {
        target_id: components["parameters"]["TargetId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List All Ticket Audits
   * @description Returns ticket audits. Archived tickets are not included in the response. Use the [List Audits for a Ticket](#list-audits-for-a-ticket) endpoint to
   * retrieve audit records for an archived ticket. To learn more about archived tickets, see [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756).
   *
   * This endpoint should not be used for capturing change data. When continually chasing the tail of a cursor, some records will be skipped. For this use case, use the [Incremental Ticket Event Export API](/api-reference/ticketing/ticket-management/incremental_exports/#incremental-ticket-event-export).
   *
   * #### Pagination
   *
   * - Cursor pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Admins
   */
  ListTicketAudits: {
    parameters: {
      query?: {
        /** @description Maximum number of results returned */
        limit?: number;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketAuditsResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Fields
   * @description Returns a list of all system and custom ticket fields in your account.
   *
   * Cursor pagination returns a maximum of 100 records per page and fields are returned in the order specified by their id.
   *
   * If the results are not paginated every field is returned in the response and fields are returned in the order specified by the position and id.
   *
   * For accounts without access to multiple ticket forms, positions can be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint or the Ticket Forms page in Zendesk Support (**Admin** > **Manage** > **Ticket Forms**). The Ticket Forms page shows the fields for the account. The order of the fields is used in the different products to show the field values in the tickets.
   *
   * For accounts with access to multiple ticket forms, positions can only be changed using the [Update Ticket Field](/api-reference/ticketing/tickets/ticket_fields/#update-ticket-field) endpoint because products use the order defined on each form to show the field values instead of the general position of the ticket field in the account.
   *
   * Consider caching this resource to use with the [Tickets](/api-reference/ticketing/tickets/tickets/#json-format) API.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - No pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | users            | The user or users that created the ticket field
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTicketFields: {
    parameters: {
      query?: {
        /**
         * @description Forces the `title_in_portal` property to return a dynamic content variant for the specified locale.
         *  Only accepts [active locale ids](/api-reference/ticketing/account-configuration/locales/#list-locales).
         * Example: `locale="de"`.
         */
        locale?: string;
        /**
         * @description Displays the `creator_user_id` and `creator_app_name` properties. If the ticket field is created
         *  by an app, `creator_app_name` is the name of the app and `creator_user_id` is `-1`. If the ticket field
         *  is not created by an app, `creator_app_name` is null
         */
        creator?: boolean;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFieldsResponse"];
        };
      };
    };
  };
  /**
   * Create Ticket Field
   * @description Creates any of the following custom field types:
   *
   * | Custom field type | Description                                                                                                                                                     |
   * |-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
   * | text              | Default custom field type when `type` is not specified                                                                                                          |
   * | textarea          | For multi-line text                                                                                                                                             |
   * | checkbox          | To capture a boolean value. Allowed values are true or false                                                                                                    |
   * | date              | Example: 2021-04-16                                                                                                                                   |
   * | integer           | String composed of numbers. May contain an optional decimal point                                                                                               |
   * | decimal           | For numbers containing decimals                                                                                                                                 |
   * | regexp            | Matches the Regex pattern found in the custom field settings                                                                                                    |
   * | partialcreditcard | A credit card number. Only the last 4 digits are retained                                                                                                                                      |
   * | multiselect       | Enables users to choose multiple options from a dropdown menu                                                                                                |
   * | tagger            | Single-select dropdown menu. It contains one or more tag values belonging to the field's options. Example: ( {"id": 21938362, "value": ["hd_3000", "hd_5555"]}) |
   * | lookup            | A field to create a relationship (see [lookup relationships](/api-reference/ticketing/lookup_relationships/lookup_relationships/)) to another object such as a user, ticket, or organization |
   *
   * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in the Zendesk Help Center.
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Field limits
   *
   * We recommend the following best practices for ticket fields limits. Creating more than these amounts can affect performance.
   *
   * * 400 ticket fields per account if your account doesn't have ticket forms
   * * 400 ticket fields per ticket form if your account has ticket forms
   */
  CreateTicketField: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TicketFieldResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket Field
   * @description #### Allowed for
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | users            | The user or users that created the ticket field
   */
  ShowTicketfield: {
    parameters: {
      query?: {
        creator?: components["parameters"]["Creator"];
      };
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFieldResponse"];
        };
      };
    };
  };
  /**
   * Update Ticket Field
   * @description #### Updating drop-down field options
   *
   * You can also use the update endpoint to add, update, or remove options in a drop-down custom field. Updating field options for multi-select fields works exactly the same as drop-down field options.
   *
   * **Important**: Unless you want to remove some options, you must specify all existing options in any update request. Omitting an option removes it from the drop-down field, which removes its values from any tickets or macros.
   *
   * Use the `custom_field_options` attribute to update the options. The attribute consists of an array of option objects, with each object consisting of a `name` and `value` property. The properties correspond to the "Title" and "Tag" text boxes in the admin interface. Example request body:
   *
   * ```json
   * {"ticket_field": {
   *     "custom_field_options": [
   *       {"name": "Apple Pie", "value": "apple"},
   *       {"name": "Pecan Pie", "value": "pecan"}
   *     ]
   *   }
   * }
   * ```
   *
   * #### Example Request
   *
   * ```bash
   * curl https://{subdomain}.zendesk.com/api/v2/ticket_fields/{id}.json \
   *   -d '{"ticket_field": {"custom_field_options": [{"name": "Apple Pie", "value": "apple"}, {"name": "Pecan Pie", "value": "pecan"}]}}' \
   *   -H "Content-Type: application/json" -X PUT \
   *   -v -u {email_address}:{password}
   * ```
   *
   * #### Example Response
   *
   * ```http
   * Status: 200 OK
   *
   * {
   *   "ticket_field": {
   *     "id":21938362,
   *     "type":"tagger",
   *     "title":"Pies",
   *     ...
   *     "custom_field_options": [
   *       {
   *         "id":21029772,
   *         "name":"Apple Pie",
   *         "raw_name":"Apple Pie",
   *         "value":"apple",
   *         "default":false
   *       },
   *       ...
   *     ]
   *   }
   * }
   * ```
   *
   * #### Allowed for
   *
   * * Admins
   */
  UpdateTicketField: {
    parameters: {
      query?: {
        creator?: components["parameters"]["Creator"];
      };
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFieldResponse"];
        };
      };
    };
  };
  /**
   * Delete Ticket Field
   * @description #### Allowed for
   *
   * * Admins
   */
  DeleteTicketField: {
    parameters: {
      query?: {
        creator?: components["parameters"]["Creator"];
      };
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Ticket Field Options
   * @description Returns a list of custom ticket field options for the given drop-down ticket field.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTicketFieldOptions: {
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionsResponse"];
        };
      };
    };
  };
  /**
   * Create or Update Ticket Field Option
   * @description Creates or updates an option for the given drop-down ticket field.
   *
   * To update an option, include the id of the option in the `custom_field_option` object. Example:
   *
   * `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`
   *
   * If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.
   *
   * #### Response
   *
   * Returns one of the following status codes:
   *
   * - 200 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option already exists in the database
   * - 201 with `Location: /api/v2/ticket_fields/{ticket_field_id}/options.json` if the ticket field option is new
   *
   * #### Allowed For
   *
   * * Admins
   *
   * #### Rate Limit
   * You can make 100 requests every 1 minute using this endpoint.
   * The rate limiting mechanism behaves as described in
   * [Monitoring your request activity](/api-reference/ticketing/account-configuration/usage_limits/#monitoring-your-request-activity) in the API introduction.
   *
   * #### Field Option Limits
   *
   * * 2000 options per ticket field
   */
  CreateOrUpdateTicketFieldOption: {
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket Field Option
   * @description #### Allowed for
   * * Agents
   */
  ShowTicketFieldOption: {
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
        ticket_field_option_id: components["parameters"]["TicketFieldOptionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Ticket Field Option
   * @description #### Allowed for
   * * Admins
   */
  DeleteTicketFieldOption: {
    parameters: {
      path: {
        ticket_field_id: components["parameters"]["TicketFieldId"];
        ticket_field_option_id: components["parameters"]["TicketFieldOptionId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Count Ticket Fields
   * @description Returns an approximate count of system and custom ticket fields in the account. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountTicketFields: {
    responses: {
      /** @description Count of ticket fields */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFieldCountResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Forms
   * @description Returns a list of all ticket forms for your account if accessed as an admin or agent. End users only see ticket forms that have `end_user_visible` set to true.
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ListTicketForms: {
    parameters: {
      query?: {
        /** @description true returns active ticket forms; false returns inactive ticket forms. If not present, returns both */
        active?: boolean;
        /** @description true returns ticket forms where `end_user_visible`; false returns ticket forms that are not end-user visible. If not present, returns both */
        end_user_visible?: boolean;
        /** @description true returns the default ticket form when the criteria defined by the parameters results in a set without active and end-user visible ticket forms */
        fallback_to_default?: boolean;
        /** @description true returns the ticket forms of the brand specified by the url's subdomain */
        associated_to_brand?: boolean;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormsResponse"];
        };
      };
    };
  };
  /**
   * Create Ticket Form
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateTicketForm: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TicketFormResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket Form
   * @description #### Allowed For
   *
   * * Admins, Agents, and End Users
   */
  ShowTicketForm: {
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormResponse"];
        };
      };
    };
  };
  /**
   * Update Ticket Form
   * @description #### Allowed For
   * * Admins
   */
  UpdateTicketForm: {
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormResponse"];
        };
      };
    };
  };
  /**
   * Delete Ticket Form
   * @description #### Allowed For
   * * Admins
   */
  DeleteTicketForm: {
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Clone an Already Existing Ticket Form
   * @description #### Allowed For
   *
   * * Admins
   */
  CloneTicketForm: {
    parameters: {
      path: {
        ticket_form_id: components["parameters"]["TicketFormId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormResponse"];
        };
      };
    };
  };
  /**
   * Reorder Ticket Forms
   * @description #### Allowed For
   * * Admins
   *
   * #### Request Parameters
   *
   * You can pass in the following parameter in the payload:
   *
   * | Name                | Type   | Comment
   * | ------------------- | ------ | --------
   * | ticket_form_ids     | array  | An array of ticket form ids. Example: "[2, 23, 46, 50]"
   */
  ReorderTicketForms: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormsResponse"];
        };
      };
    };
  };
  /**
   * Show Many Ticket Forms
   * @description Takes an `ids` query parameter that accepts a comma-separated list of up to 100 ticket form ids. This endpoint is used primarily by the [mobile SDK](/documentation/classic-web-widget-sdks/) and the [Web Widget](/api-reference/widget/introduction/).
   *
   * #### Allowed For
   *
   * * Anyone
   */
  ShowManyTicketForms: {
    parameters: {
      query: {
        /**
         * @description IDs of the ticket forms to be shown
         * @example 1,2,3
         */
        ids: string;
        /** @description true returns active ticket forms; false returns inactive ticket forms. If not present, returns both */
        active?: boolean;
        /** @description true returns ticket forms where `end_user_visible`; false returns ticket forms that are not end-user visible. If not present, returns both */
        end_user_visible?: boolean;
        /** @description true returns the default ticket form when the criteria defined by the parameters results in a set without active and end-user visible ticket forms */
        fallback_to_default?: boolean;
        /** @description true returns the ticket forms of the brand specified by the url's subdomain */
        associated_to_brand?: boolean;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketFormsResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Metrics
   * @description Returns a list of tickets with their metrics.
   *
   * Tickets are ordered chronologically by created date, from newest to oldest.
   * The last ticket listed may not be the absolute oldest ticket in your account
   * due to ticket archiving.
   *
   * Archived tickets are not included in the response. See
   * [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
   * Zendesk help.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTicketMetrics: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketMetricsResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket Metrics
   * @description Returns a specific metric, or the metrics of a specific ticket.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowTicketMetrics: {
    parameters: {
      path: {
        /**
         * @description The id of the ticket metric to retrieve
         * @example 10001
         */
        ticket_metric_id: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketMetricsByTicketMetricIdResponse"];
        };
      };
    };
  };
  /** List Tickets */
  ListTickets: {
    parameters: {
      query?: {
        /** @description Lists tickets by external id. External ids don't have to be unique for each ticket. As a result, the request may return multiple tickets with the same external id. */
        external_id?: string;
      };
    };
    responses: {
      /** @description List tickets */
      200: {
        content: {
          "application/json": components["schemas"]["TicketsResponse"];
        };
      };
    };
  };
  /** Create Ticket */
  CreateTicket: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketCreateRequest"];
      };
    };
    responses: {
      /** @description Create ticket */
      201: {
        headers: {
          /** @description The URL of the created ticket */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["TicketResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket
   * @description Returns a number of ticket properties though not the ticket comments. To get the comments, use [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments)
   *
   * #### Allowed For
   * * Agents
   */
  ShowTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Ticket */
      200: {
        content: {
          "application/json": components["schemas"]["TicketResponse"];
        };
      };
    };
  };
  /** Update Ticket */
  UpdateTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketUpdateRequest"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": components["schemas"]["TicketUpdateResponse"];
        };
      };
    };
  };
  /**
   * Delete Ticket
   * @description #### Allowed For
   *
   * * Admins
   * * Agents with permission to delete tickets
   *
   * Agent delete permissions are set in Support. See
   * [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
   * in the Support Help Center.
   *
   * #### Ticket deletion rate limit
   *
   * You can delete 400 tickets every 1 minute using this endpoint.
   * The rate limiting mechanism behaves as described in
   * [Rate limits](/api-reference/introduction/rate-limits/) in the API introduction.
   * Zendesk recommends that you obey the Retry-After header values.
   * To delete many tickets, you may use [Bulk Delete Tickets](/api-reference/ticketing/tickets/tickets/#bulk-delete-tickets).
   */
  DeleteTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Audits for a Ticket
   * @description Lists the audits for a specified ticket.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * **Note**: Audits for [Archived Tickets](https://support.zendesk.com/hc/en-us/articles/4408887617050) do not support pagination for this endpoint.
   *
   * #### Allowed for
   *
   * * Agents
   */
  ListAuditsForTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description OK response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketAuditsResponseNoneCursor"];
        };
      };
    };
  };
  /**
   * Show Audit
   * @description #### Allowed for
   *
   * * Agents
   */
  ShowTicketAudit: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_audit_id: components["parameters"]["TicketAuditId"];
      };
    };
    responses: {
      /** @description OK response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketAuditResponse"];
        };
      };
    };
  };
  /**
   * Change a Comment From Public To Private
   * @description #### Allowed for
   *
   * * Agents
   */
  MakeTicketCommentPrivateFromAudits: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_audit_id: components["parameters"]["TicketAuditId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Count Audits for a Ticket
   * @description Returns an approximate count of audits for a specified ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed for
   *
   * * Agents
   */
  CountAuditsForTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Count of audits on a ticket */
      200: {
        content: {
          "application/json": components["schemas"]["TicketAuditsCountResponse"];
        };
      };
    };
  };
  /**
   * List Collaborators for a Ticket
   * @description #### Allowed For
   *
   * * Agents
   */
  ListTicketCollaborators: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketCollaboratorsResponse"];
        };
      };
    };
  };
  /**
   * List Comments
   * @description Returns the comments added to the ticket.
   *
   * Each comment may include a `content_url` for an attachment or a `recording_url` for a voice comment that points to a file that may be hosted externally. For security reasons, take care not to inadvertently send Zendesk authentication credentials to third parties when attempting to access these files. See [Working with url properties](/documentation/ticketing/managing-tickets/working-with-url-properties).
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Sorting
   *
   * By default, comments are sorted by creation date in ascending order.
   *
   * When using cursor pagination, use the following parameter to change the sort order:
   *
   * | Name   | Type   | Required | Comments
   * | ------ | ------ | -------- | --------
   * | `sort` | string | no       | Possible values are "created_at" (ascending order) or "-created_at" (descending order)
   *
   * When using offset pagination, use the following parameters to change the sort order:
   *
   * | Name         | Type   | Required | Comments
   * | ------------ | ------ | -------- | --------
   * | `sort_order` | string | no       | One of `asc`, `desc`. Defaults to `asc`
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTicketComments: {
    parameters: {
      query?: {
        /** @description Default is false. When true, inline images are also listed as attachments in the response */
        include_inline_images?: boolean;
        /** @description Accepts "users". Use this parameter to list email CCs by side-loading users. Example: `?include=users`. **Note**: If the comment source is email, a deleted user will be represented as the CCd email address. If the comment source is anything else, a deleted user will be represented as the user name. */
        include?: string;
      };
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentsResponse"];
        };
      };
    };
  };
  /**
   * Redact Comment Attachment
   * @description Redaction allows you to permanently remove attachments from an existing comment on a ticket. Once removed from a comment, the attachment is replaced with an empty "redacted.txt" file.
   *
   * The redaction is permanent. It is not possible to undo redaction or see what was removed. Once a ticket is closed, redacting its attachments is no longer possible.
   *
   * Also, if you want to redact an inline attachment, you can use the `include_inline_images` parameter in the [List Comments](/api-reference/ticketing/tickets/ticket_comments/#list-comments) operation to obtain the inline attachment ID, and use it in the request URL.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents when [deleting tickets is enabled for agents on professional accounts](https://support.zendesk.com/hc/en-us/articles/360002128107)
   * * Agents assigned to a custom role with permissions to redact ticket content (Enterprise only)
   */
  RedactCommentAttachment: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        comment_id: components["parameters"]["CommentId"];
        attachment_id: components["parameters"]["AttachmentId"];
      };
    };
    responses: {
      /** @description OK response */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentResponse"];
        };
      };
    };
  };
  /**
   * Make Comment Private
   * @description #### Allowed For
   *
   * * Agents
   */
  MakeTicketCommentPrivate: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Redact String in Comment
   * @description Permanently removes words or strings from a ticket comment. Specify the string to redact in an object with a `text` property. Example: `'{"text": "987-65-4320"}'`. The characters of the word or string are replaced by the ▇ symbol.
   *
   * If the comment was made by email, the endpoint also attempts to redact the string from the original email retained by Zendesk for audit purposes.
   *
   * **Note**: If you use the rich text editor, support for redacting formatted text (bold, italics, hyperlinks) is limited.
   *
   * Redaction is permanent. You can't undo the redaction or see *what* was removed. Once a ticket is closed, you can no longer redact strings from its comments.
   *
   * To use this endpoint, the "Agents can delete tickets" option must be enabled in the Zendesk Support admin interface at **Admin** > **Settings** > **Agents**.
   *
   * #### Allowed For
   *
   * * Agents
   */
  RedactStringInComment: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
        ticket_comment_id: components["parameters"]["TicketCommentId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentResponse"];
        };
      };
    };
  };
  /**
   * Count Ticket Comments
   * @description Returns an approximate count of the comments added to the ticket. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountTicketComments: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Count of ticket comments */
      200: {
        content: {
          "application/json": components["schemas"]["TicketCommentsCountResponse"];
        };
      };
    };
  };
  /**
   * List Email CCs for a Ticket
   * @description Returns any users cc'd on the ticket.
   *
   * #### Availability
   *
   * The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.
   *
   * If the feature is not enabled, the default CC functionality is used. In that case, use [List Collaborators](/api-reference/ticketing/tickets/tickets/#list-collaborators-for-a-ticket) to list the users cc'ed on the ticket.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTicketEmailCCs: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketEmailCCsResponse"];
        };
      };
    };
  };
  /**
   * List Followers for a Ticket
   * @description Returns any users who follow the ticket.
   *
   * #### Availability
   *
   * The [CCs and Followers](https://support.zendesk.com/hc/en-us/articles/203690846) feature must be enabled in Zendesk Support.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTicketFollowers: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketFollowersResponse"];
        };
      };
    };
  };
  /**
   * List Ticket Incidents
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTicketIncidents: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ListTicketIncidentsResponse"];
        };
      };
    };
  };
  /**
   * Show Ticket After Changes
   * @description Returns the full ticket object as it would be after applying the macro to the ticket.
   * It doesn't actually change the ticket.
   *
   * To get only the ticket fields that would be changed by the macro,
   * see [Show Changes to Ticket](#show-changes-to-ticket).
   *
   * #### Allowed For
   *
   * * Agents
   */
  ShowTicketAfterChanges: {
    parameters: {
      path: {
        macro_id: components["parameters"]["MacroId"];
        /**
         * @description The ID of the ticket
         * @example 35436
         */
        ticket_id: number;
      };
    };
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["MacroApplyTicketResponse"];
        };
      };
    };
  };
  /**
   * Mark Ticket as Spam and Suspend Requester
   * @description #### Allowed For
   *
   * * Agents
   */
  MarkTicketAsSpamAndSuspendRequester: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Merge Tickets into Target Ticket
   * @description Merges one or more tickets into the ticket with the specified id.
   *
   * See [Merging tickets](https://support.zendesk.com/hc/en-us/articles/203690916)
   * in the Support Help Center for ticket merging rules.
   *
   * Any attachment to the source ticket is copied to the target ticket.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * Agents in the Enterprise account must have merge permissions.
   * See [Creating custom roles and assigning agents (Enterprise)](https://support.zendesk.com/hc/en-us/articles/203662026)
   * in the Support Help Center.
   *
   * #### Available parameters
   *
   * The request takes a data object with the following properties:
   *
   * | Name                     | Type    | Required | Comments                                                |
   * | ------------------------ | ------- | -------- | ------------------------------------------------------- |
   * | ids                      | array   | yes      | Ids of tickets to merge into the target ticket          |
   * | target_comment           | string  | no       | Private comment to add to the target ticket. This comment is optional but strongly recommended |
   * | source_comment           | string  | no       | Private comment to add to the source ticket. This comment is optional but strongly recommended |
   * | target_comment_is_public | boolean | no       | Whether comments in the target ticket are public or private   |
   * | source_comment_is_public | boolean | no       | Whether comments in the source tickets are public or private |
   *
   * `target_comment` and `source_comment` can be used to provide a reason for the merge for recordkeeping purposes. If the source ticket has attachments, they are included in `target_comment`.
   *
   * Comments are private and can't be modified in the following cases:
   *
   *   * Any of the sources or target tickets are private
   *   * Any of the sources or target tickets were created through X (formerly Twitter), Facebook or the Channel framework
   *
   * In any other case, comments default to private but can be modified with the comment privacy parameters.
   */
  MergeTicketsIntoTargetTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketMergeInput"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Ticket Related Information
   * @description The request returns a data object with the following properties:
   *
   * | Name                | Type    | Comment
   * | ------------------- | ------- | -------
   * | topic_id            | string  | Related topic in the Web portal (deprecated feature)
   * | followup_source_ids | array   | Sources to follow up
   * | from_archive        | boolean | Is true if the current ticket is archived
   * | incidents           | integer | A count of related incident occurrences
   * | twitter             | object  | X (formerly Twitter) information associated with the ticket
   *
   * #### Allowed For
   *
   * * Agents
   */
  TicketRelatedInformation: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketRelatedInformation"];
        };
      };
    };
  };
  /**
   * Create a Satisfaction Rating
   * @description Creates a CSAT rating for a solved ticket, or for a ticket that was previously
   * solved and then reopened.
   *
   * Only the end user listed as the ticket requester can create a satisfaction rating for the ticket.
   *
   * #### Allowed For
   *
   * * End user who requested the ticket
   *
   * The end user must be a verified user.
   */
  CreateTicketSatisfactionRating: {
    parameters: {
      path: {
        /**
         * @description The id of the ticket
         * @example 35436
         */
        ticket_id: number;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SatisfactionRatingResponse"];
        };
      };
    };
  };
  /**
   * List Resource Tags
   * @description #### Allowed For
   *
   * * Agents
   */
  ListResourceTags: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TagsByObjectIdResponse"];
        };
      };
    };
  };
  /**
   * Add Tags
   * @description You can also add tags to multiple tickets with the [Update Many
   * Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.
   *
   * #### Safe Update
   *
   * If the same ticket is updated by multiple API requests at
   * the same time, some tags could be lost because of ticket
   * update collisions. Include `updated_stamp` and `safe_update`
   * properties in the request body to make a safe update.
   *
   * For `updated_stamp`, retrieve and specify the ticket's
   * latest `updated_at` timestamp. The tag update only occurs
   * if the `updated_stamp` timestamp matches the ticket's
   * actual `updated_at` timestamp at the time of the request.
   * If the timestamps don't match (in other words, if the
   * ticket was updated since you retrieved the ticket's
   * last `updated_at` timestamp), the request returns a
   * 409 Conflict error.
   *
   * #### Example
   *
   * ```js
   * {
   *   "tags": ["customer"],
   *   "updated_stamp":"2019-09-12T21:45:16Z",
   *   "safe_update":"true"
   * }
   * ```
   *
   * For details, see [Protecting against ticket update collisions](/api-reference/ticketing/tickets/tickets/#protecting-against-ticket-update-collisions).
   *
   * #### Allowed For
   *
   * * Agents
   */
  PutTagsTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TagsByObjectIdResponse"];
        };
      };
    };
  };
  /**
   * Set Tags
   * @description #### Allowed For
   *
   * * Agents
   */
  SetTagsTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TagsByObjectIdResponse"];
        };
      };
    };
  };
  /**
   * Remove Tags
   * @description You can also delete tags from multiple tickets with the
   * [Update Many Tickets](/api-reference/ticketing/tickets/tickets/#update-many-tickets) endpoint.
   *
   * This endpoint supports safe updates. See [Safe Update](/api-reference/ticketing/ticket-management/tags/#safe-update).
   *
   * #### Allowed For
   *
   * * Agents
   */
  DeleteTagsTicket: {
    parameters: {
      path: {
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Count Tickets
   * @description Returns an approximate count of tickets in the account. If the count exceeds 100,000, it is updated every 24 hours.
   *
   * `ccd` lists tickets that the specified user is cc'd on.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountTickets: {
    responses: {
      /** @description Count of tickets */
      200: {
        content: {
          "application/json": {
            count?: {
              /** Format: date-time */
              refreshed_at?: string;
              value?: number;
            };
          };
        };
      };
    };
  };
  /**
   * Create Many Tickets
   * @description Accepts an array of up to 100 ticket objects. **Note**: Every ticket created with this endpoint may be affected by your business rules, which can include sending email notifications to your end users. If you are importing historical tickets or creating more than 1000 tickets, consider using the [Ticket Bulk Import](/api-reference/ticketing/tickets/ticket_import/#ticket-bulk-import) endpoint.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   * * Agents
   */
  TicketsCreateMany: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TicketsCreateRequest"];
      };
    };
    responses: {
      /** @description Create many tickets */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Tickets
   * @description Accepts a comma-separated list of up to 100 ticket ids.
   *
   * #### Allowed For
   *
   * * Admins
   * * Agents with permission to delete tickets
   *
   * Agent delete permissions are set in Support. See
   * [Deleting tickets](https://support.zendesk.com/hc/en-us/articles/203690936)
   * in the Support Help Center.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   */
  BulkDeleteTickets: {
    parameters: {
      query: {
        ids: components["parameters"]["TicketIds"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Bulk Mark Tickets as Spam
   * @description Accepts a comma-separated list of up to 100 ticket ids.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Agents
   */
  MarkManyTicketsAsSpam: {
    parameters: {
      query: {
        ids: components["parameters"]["TicketIds"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Show Multiple Tickets
   * @description Accepts a comma-separated list of ticket ids to return.
   *
   * This endpoint will return up to 100 tickets records.
   *
   * #### Allowed For
   * * Agents
   */
  TicketsShowMany: {
    parameters: {
      query: {
        ids: components["parameters"]["TicketIds"];
      };
    };
    responses: {
      /** @description List tickets */
      200: {
        content: {
          "application/json": components["schemas"]["TicketsResponse"];
        };
      };
    };
  };
  /**
   * Update Many Tickets
   * @description Accepts an array of up to 100 ticket objects, or a comma-separated list of up to 100 ticket ids.
   */
  TicketsUpdateMany: {
    parameters: {
      query?: {
        /**
         * @description Comma-separated list of ticket ids
         * @example 35436,35437
         */
        ids?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Trigger Categories
   * @description Returns all the trigger categories in the account.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTriggerCategories: {
    parameters: {
      query?: {
        /**
         * @description Pagination parameters
         * @example {
         *   "after": "eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9",
         *   "before": "eyJvIjoiLXNjb3JlLGlkIiwidiI6ImFRSUFBQUFBQUFBQWFRMHBJUUVBQUFBQSJ9",
         *   "size": 50
         * }
         */
        page?: {
          after?: string;
          before?: string;
          size?: number;
        };
        /** @description Sort parameters */
        sort?: "position" | "-position" | "name" | "-name" | "created_at" | "-created_at" | "updated_at" | "-updated_at";
        /** @description Allowed sideloads */
        include?: "rule_counts";
      };
    };
    responses: {
      /** @description A paged array of trigger categories */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerCategoriesResponse"] & components["schemas"]["Pagination"];
        };
      };
      /** @description Error */
      400: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Error */
      403: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Create Trigger Category
   * @description Creates a trigger category.
   */
  CreateTriggerCategory: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "trigger_category": {
         *     "name": "All Notification Triggers",
         *     "position": 0
         *   }
         * }
         */
        "application/json": {
          trigger_category?: components["schemas"]["TriggerCategoryRequest"] & components["schemas"]["TriggerCategoryRequestRequired"];
        };
      };
    };
    responses: {
      /** @description The created trigger category */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerCategoryResponse"];
        };
      };
      /** @description Error */
      400: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Error */
      403: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Show Trigger Category
   * @description Returns the trigger category with the specified ID.
   */
  ShowTriggerCategoryById: {
    parameters: {
      path: {
        /**
         * @description The id of the trigger category to retrieve
         * @example 10001
         */
        trigger_category_id: string;
      };
    };
    responses: {
      /** @description The requested trigger category */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerCategoryResponse"];
        };
      };
      /** @description Error */
      404: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Delete Trigger Category
   * @description Deletes the trigger category with the specified ID.
   */
  DeleteTriggerCategory: {
    parameters: {
      path: {
        /**
         * @description The id of the trigger category to delete
         * @example 10001
         */
        trigger_category_id: string;
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
      /** @description Error */
      400: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Error */
      404: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Update Trigger Category
   * @description Updates the trigger category with the specified ID.
   */
  UpdateTriggerCategory: {
    parameters: {
      path: {
        /**
         * @description The id of the trigger category to update
         * @example 10001
         */
        trigger_category_id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "trigger_category": {
         *     "name": "All Notification Triggers Updated",
         *     "position": 10
         *   }
         * }
         */
        "application/json": {
          trigger_category?: components["schemas"]["TriggerCategoryRequest"];
        };
      };
    };
    responses: {
      /** @description The updated trigger category */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerCategoryResponse"];
        };
      };
      /** @description Error */
      400: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
      /** @description Error */
      404: {
        content: {
          "application/json": components["schemas"]["Errors"];
        };
      };
    };
  };
  /**
   * Create Batch Job for Trigger Categories
   * @description Creates a job that performs a batch operation for the given trigger categories.
   */
  BatchOperateTriggerCategories: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "job": {
         *     "action": "patch",
         *     "items": {
         *       "trigger_categories": [
         *         {
         *           "id": "10001",
         *           "position": 0
         *         },
         *         {
         *           "id": "10002",
         *           "position": 1
         *         }
         *       ],
         *       "triggers": [
         *         {
         *           "active": false,
         *           "category_id": "10001",
         *           "id": "10011",
         *           "position": 10
         *         },
         *         {
         *           "active": true,
         *           "category_id": "10002",
         *           "id": "10012",
         *           "position": 1
         *         }
         *       ]
         *     }
         *   }
         * }
         */
        "application/json": components["schemas"]["BatchJobRequest"];
      };
    };
    responses: {
      /** @description The response to the batch job */
      200: {
        content: {
          "application/json": components["schemas"]["BatchJobResponse"];
        };
      };
      /** @description Error */
      400: {
        content: {
          "application/json": components["schemas"]["BatchJobResponse"];
        };
      };
    };
  };
  /**
   * List Triggers
   * @description Lists all triggers for the current account.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported. The usage sideloads are only supported on the Support Professional or Suite Growth plan or above.
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each trigger, if present
   * | permissions      | The permissions for each trigger
   * | usage_1h         | The number of times each trigger has been used in the past hour
   * | usage_24h        | The number of times each trigger has been used in the past day
   * | usage_7d         | The number of times each trigger has been used in the past week
   * | usage_30d        | The number of times each trigger has been used in the past thirty days
   */
  ListTriggers: {
    parameters: {
      query?: {
        active?: components["parameters"]["TriggerActive"];
        sort?: components["parameters"]["TriggerSort"];
        sort_by?: components["parameters"]["TriggerSortBy"];
        sort_order?: components["parameters"]["TriggerSortOrder"];
        category_id?: components["parameters"]["TriggerCategoryId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggersResponse"];
        };
      };
    };
  };
  /**
   * Create Trigger
   * @description #### Allowed For
   *
   * * Agents
   */
  CreateTrigger: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TriggerWithCategoryRequest"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["TriggerResponse"];
        };
      };
    };
  };
  /**
   * Show Trigger
   * @description #### Allowed For
   *
   * * Agents
   *
   * The Via Type value is a number instead of a text string. See [Via types reference](/documentation/ticketing/reference-guides/via-types/) for the keys.
   */
  GetTrigger: {
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerResponse"];
        };
      };
    };
  };
  /**
   * Update Trigger
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### Note
   *
   * Updating a condition or action updates both the conditions and actions arrays,
   * clearing all existing values of both arrays. Include all your conditions
   * and actions when updating any condition or action.
   */
  UpdateTrigger: {
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TriggerWithCategoryRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerResponse"];
        };
      };
    };
  };
  /**
   * Delete Trigger
   * @description #### Allowed For
   *
   * * Agents
   */
  DeleteTrigger: {
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Trigger Revisions
   * @description List the revisions associated with a trigger. Trigger revision history is only available on Enterprise plans.
   *
   * #### Allowed For
   *
   *  * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name  | Will sideload
   * | ----- | -------------
   * | users | The user that authored each revision
   *
   * #### Pagination
   *
   * This endpoint uses cursor-based pagination. The records are ordered in
   * descending order by the `created_at` timestamp, then by `id` on duplicate
   * `created_at` values.
   *
   * The `cursor` parameter is a non-human-readable argument you can use to move
   * forward or backward in time.
   *
   * Each JSON response will contain the following attributes to help you get
   * more results:
   *
   * - `after_url` requests more recent results
   * - `before_url` requests older results
   * - `after_cursor` is the cursor to build the request yourself
   * - `before_cursor` is the cursor to build the request yourself
   *
   * The properties are null if no more records are available.
   *
   * You can request a maximum of 1000 records using the `limit` parameter. If
   * no `limit` parameter is supplied, it will default to 1,000.
   */
  ListTriggerRevisions: {
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerRevisionsResponse"];
        };
      };
    };
  };
  /**
   * Show Trigger Revision
   * @description Fetches a revision associated with a trigger. Trigger revision history is only available on Enterprise plans.
   *
   * #### Allowed For
   *
   *  * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name  | Will sideload
   * | ----- | -------------
   * | users | The user that authored each revision
   */
  TriggerRevision: {
    parameters: {
      path: {
        trigger_id: components["parameters"]["TriggerId"];
        trigger_revision_id: components["parameters"]["TriggerRevisionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerRevisionResponse"];
        };
      };
    };
  };
  /**
   * List Active Triggers
   * @description Lists all active triggers.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   * #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each trigger, if present
   * | permissions      | The permissions for each trigger
   * | usage_1h         | The number of times each trigger has been used in the past hour
   * | usage_24h        | The number of times each trigger has been used in the past day
   * | usage_7d         | The number of times each trigger has been used in the past week
   * | usage_30d        | The number of times each trigger has been used in the past thirty days
   */
  ListActiveTriggers: {
    parameters: {
      query?: {
        sort?: components["parameters"]["TriggerSort"];
        sort_by?: components["parameters"]["TriggerSortBy"];
        sort_order?: components["parameters"]["TriggerSortOrder"];
        category_id?: components["parameters"]["TriggerCategoryId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggersResponse"];
        };
      };
    };
  };
  /**
   * List Trigger Action and Condition Definitions
   * @description Returns the definitions of the actions a trigger can perform and the
   * definitions of the conditions under which a trigger can execute. The
   * definition of the action includes a title ("Status"), a type ("list"), and
   * possible values. The definition of the condition includes the same fields
   * as well as the possible operators.
   *
   * For a list of supported actions, see the [Actions reference](/documentation/ticketing/reference-guides/actions-reference)
   * For a list of supported conditions, see the [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListTriggerActionConditionDefinitions: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerDefinitionResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Triggers
   * @description Deletes the triggers corresponding to the provided comma-separated list of IDs.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Request Parameters
   *
   * The DELETE request takes one parameter, an `ids` object that lists the
   * triggers to delete.
   *
   * | Name | Description
   * | ---- | -----------
   * | ids  | The IDs of the triggers to delete
   *
   * #### Example request
   *
   * ```js
   * {
   *   "ids": "25,23,27,22"
   * }
   * ```
   */
  DeleteManyTriggers: {
    parameters: {
      query: {
        ids: components["parameters"]["TriggerIds"];
      };
    };
    responses: {
      /** @description No content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Reorder Triggers
   * @description Alters the firing order of triggers in the account. See
   * [Reordering and sorting triggers](https://support.zendesk.com/hc/en-us/articles/115015696088)
   * in the Zendesk Help Center. The firing order is set in a `trigger_ids` array in the request body.
   *
   * You must include every trigger id in your account to reorder the triggers. If not, the endpoint will return 404 Forbidden.
   *
   * Reordering triggers via the API is not permitted if you have more than one trigger category. If there is more than one
   * trigger category, the endpoint will return a `LimitOneCategory` error.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ReorderTriggers: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggerResponse"];
        };
      };
    };
  };
  /**
   * Search Triggers
   * @description #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each trigger, if present
   * | permissions      | The permissions for each trigger
   * | usage_1h         | The number of times each trigger has been used in the past hour
   * | usage_24h        | The number of times each trigger has been used in the past day
   * | usage_7d         | The number of times each trigger has been used in the past week
   * | usage_30d        | The number of times each trigger has been used in the past thirty days
   *
   * #### Filter
   *
   * Use the `filter` query parameter to filter a trigger search by one or more attributes. For example, the following `filter` argument filters triggers by the `description` attribute:
   *
   * ```json
   * {
   *   "json": {
   *     "description": "Close a ticket"
   *   }
   * }
   * ```
   */
  SearchTriggers: {
    parameters: {
      query: {
        query: components["parameters"]["TriggerSearchQuery"];
        filter?: components["parameters"]["TriggerSearchFilter"];
        active?: components["parameters"]["TriggerActive"];
        sort?: components["parameters"]["TriggerSort"];
        sort_by?: components["parameters"]["TriggerSortBy"];
        sort_order?: components["parameters"]["TriggerSortOrder"];
        include?: components["parameters"]["TriggerInclude"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggersResponse"];
        };
      };
    };
  };
  /**
   * Update Many Triggers
   * @description Updates the position or the active status of multiple triggers. Any additional properties are ignored.
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Request Parameters
   *
   * The PUT request expects a `triggers` object that lists the triggers to update.
   *
   * Each trigger may have the following properties:
   *
   * | Name        | Mandatory | Description
   * | --------    | --------- | -----------
   * | id          | yes       | The ID of the trigger to update
   * | position    | no        | The new position of the trigger
   * | active      | no        | The active status of the trigger (true or false)
   * | category_id | no        | The ID of the new category the trigger is to be moved to
   *
   * #### Example Request
   *
   * ```js
   * {
   *   "triggers": [
   *     {"id": 25, "position": 3},
   *     {"id": 23, "position": 5},
   *     {"id": 27, "position": 9},
   *     {"id": 22, "position": 7}
   *   ]
   * }
   * ```
   */
  UpdateManyTriggers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TriggerBulkUpdateRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TriggersResponse"];
        };
      };
    };
  };
  /**
   * Upload Files
   * @description Uploads a file that can be attached to a ticket comment. It doesn't attach the file to the comment. For details and examples, see [Attaching ticket comments with the API](/documentation/ticketing/using-the-zendesk-api/adding-ticket-attachments-with-the-api).
   *
   * The endpoint has a required `filename` query parameter. The parameter specifies what the file will be named when attached to the ticket comment (to give the agent more context about the file). The parameter does not specify the file on the local system to be uploaded. While the two names can be different, their file extensions must be the same. If they don't match, the agent's browser or file reader could give an error when attempting to open the attachment.
   *
   * The `Content-Type` header must contain a recognized MIME type that correctly describes the type of the uploaded file. Failing to send a recognized, correct type may cause undesired behavior. For example, in-browser audio playback may be interrupted by the browser's security mechanisms for MP3s uploaded with an incorrect type.
   *
   * Adding multiple files to the same upload is handled by splitting requests and passing the API token received from the first request to each subsequent request. The token is valid for 3 days.
   *
   * **Note**: Even if [private attachments](https://support.zendesk.com/hc/en-us/articles/204265396) are enabled in the Zendesk Support instance, uploaded files are visible to any authenticated user at the `content_URL` specified in the [JSON response](#json-format) until the upload token is consumed. Once a file is associated with a ticket or post, visibility is restricted to users with access to the ticket or post with the attachment.
   *
   * #### Allowed For
   *
   * * End users
   */
  UploadFiles: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["AttachmentUploadResponse"];
        };
      };
    };
  };
  /**
   * Delete Upload
   * @description #### Allowed for
   *
   * * End Users
   */
  DeleteUpload: {
    parameters: {
      path: {
        /**
         * @description The token of the uploaded attachment
         * @example 6bk3gql82em5nmf
         */
        token: string;
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List User Fields
   * @description Returns a list of custom user fields in your account. Fields are returned in the order that you specify in your user fields configuration in Zendesk Support. Clients should cache this resource for the duration of their API usage and map the key for each User Field to the values returned under the `user_fields` attribute on the [User](/api-reference/ticketing/users/users/) resource.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListUserFields: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserFieldsResponse"];
        };
      };
    };
  };
  /**
   * Create User Field
   * @description Creates any of the following custom field types:
   *
   * * text (default when no "type" is specified)
   * * textarea
   * * checkbox
   * * date
   * * integer
   * * decimal
   * * regexp
   * * dropdown
   * * lookup
   *
   * See [About custom field types](https://support.zendesk.com/hc/en-us/articles/203661866) in Zendesk help.
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateUserField: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["UserFieldResponse"];
        };
      };
    };
  };
  /**
   * Show User Field
   * @description #### Allowed for
   *
   * * Agents
   */
  ShowUserField: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserFieldResponse"];
        };
      };
    };
  };
  /**
   * Update User Field
   * @description #### Updating a Dropdown (Tagger) Field
   *
   * Dropdown fields return an array of `custom_field_options` which specify the name, value and order of the list of dropdown options.
   * Understand the following behavior when updating a dropdown field:
   *
   * - All options must be passed on update. Options that are not passed will be removed. As a result, these values will be removed from any organizations.
   * - To create a new option, pass a null `id` along with `name` and `value`.
   * - To update an existing option, pass its `id` along with `name` and `value`.
   * - To re-order an option, reposition it in the `custom_field_options` array relative to the other options.
   * - To remove an option, omit it from the list of options upon update.
   *
   * #### Example Request
   *
   * ```bash
   * curl https://{subdomain}.zendesk.com/api/v2/user_fields/{user_field_id}.json \
   *   -H "Content-Type: application/json" -X PUT \
   *   -d '{"user_field": {"custom_field_options": [{"id": 124, "name": "Option 2", "value": "option_2"}, {"id": 123, "name": "Option 1", "value": "option_1"}, {"id": 125, "name": "Option 2", "value": "option_3"}]}}' \
   *   -v -u {email_address}:{password}
   * ```
   * #### Allowed for
   *
   * * Admins
   */
  UpdateUserField: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserFieldResponse"];
        };
      };
    };
  };
  /**
   * Delete User Field
   * @description #### Allowed for
   *
   * * Admins
   */
  DeleteUserField: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List User Field Options
   * @description Returns a list of custom user field options for the given dropdown user field.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListUserFieldOptions: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionsResponse"];
        };
      };
    };
  };
  /**
   * Create or Update a User Field Option
   * @description Creates a new option or updates an existing option for the given drop-down user field.
   *
   * To update an option, include the id of the option in the `custom_field_option` object. Example: `{"custom_field_option": {"id": 10002, "name": "Pineapples", ... }`. If an option exists for the given ID, the option will be updated. Otherwise, a new option will be created.
   *
   * #### Response
   *
   * Returns one of the following status codes:
   *
   * - 200 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option already exists in the database
   * - 201 with `Location: /api/v2/user_fields/{user_field_id}/options.json` if the user field option is new
   *
   * #### Allowed For
   *
   * * Admins
   */
  CreateOrUpdateUserFieldOption: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
    };
  };
  /**
   * Show a User Field Option
   * @description #### Allowed for
   * * Agents
   */
  ShowUserFieldOption: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
        user_field_option_id: components["parameters"]["UserFieldOptionId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOptionResponse"];
        };
      };
    };
  };
  /**
   * Delete User Field Option
   * @description #### Allowed for
   * * Admins
   */
  DeleteUserFieldOption: {
    parameters: {
      path: {
        user_field_id: components["parameters"]["UserFieldId"];
        user_field_option_id: components["parameters"]["UserFieldOptionId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Reorder User Field
   * @description #### Allowed For
   *
   * * Admins
   */
  ReorderUserField: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Users
   * @description #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Admins, Agents and Light Agents
   */
  ListUsers: {
    parameters: {
      query?: {
        role?: components["parameters"]["UserRoleFilter"];
        "role[]"?: components["parameters"]["UserRolesFilter"];
        permission_set?: components["parameters"]["UserPermissionSetFilter"];
        external_id?: components["parameters"]["UserExternalIdFilter"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"];
        };
      };
    };
  };
  /** Create User */
  CreateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /**
   * Show User
   * @description #### Allowed For
   *
   * * Agents
   */
  ShowUser: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /** Update User */
  UpdateUser: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /**
   * Delete User
   * @description Deletes the user and associated records from the account.
   *
   * **Warning**:
   *
   * * Deleted users are not recoverable.
   * * Both agents and administrators can soft delete users in the agent interface in Zendesk Support. Agents with permission can delete end users, while administrators can delete all users except the account owner.
   *
   * To comply with GDPR, a further step is needed. See [Permanently Delete User](/api-reference/ticketing/users/users/#permanently-delete-user).
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   */
  DeleteUser: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /**
   * Show Compliance Deletion Statuses
   * @description Returns the GDPR status for each user per area of compliance. A Zendesk area of compliance is typically a product like "support/explore" but can be more fine-grained for areas within the product lines.
   *
   * If the user is not in the account, the request returns a 404 status.
   *
   * ```http
   * Status: 404
   * {
   *   "error":"RecordNotFound",
   *   "description":"Not found"
   * }
   * ```
   *
   * #### Allowed For
   *
   * * Agents, with restrictions
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ShowUserComplianceDeletionStatuses: {
    parameters: {
      query?: {
        /**
         * @description Area of compliance
         * @example chat
         */
        application?: string;
      };
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ComplianceDeletionStatusesResponse"];
        };
      };
    };
  };
  /**
   * Set Membership as Default
   * @description #### Allowed For:
   *
   * * Agents
   */
  GroupMembershipSetDefault: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        group_membership_id: components["parameters"]["GroupMembershipId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["GroupMembershipsResponse"];
        };
      };
    };
  };
  /**
   * List Identities
   * @description Returns a list of identities for the given user.
   *
   * Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only list email and phone number identities.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   * * Verified end users
   */
  ListUserIdentities: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIdentitiesResponse"];
        };
      };
    };
  };
  /**
   * Create Identity
   * @description Adds an identity to a user's profile. An agent can add an identity to any user profile.
   *
   * Supported identity types:
   *
   * | Type             | Example |
   * | ---------------- | ------- |
   * | email            | `{ "type" : "email", "value" : "someone@example.com" }` |
   * | twitter          | `{ "type" : "twitter", "value" : "screen_name" }` |
   * | facebook         | `{ "type" : "facebook", "value" : "855769377321" }` |
   * | google           | `{ "type" : "google", "value" : "example@gmail.com" }` |
   * | agent_forwarding | `{ "type" : "agent_forwarding", "value" : "+1 555-123-4567" }` |
   * | phone_number     | `{ "type" : "phone_number", "value" : "+1 555-123-4567" }` |
   *
   * To create an identity without sending out a verification email, include a `"skip_verify_email": true` property.
   *
   * #### Allowed For
   *
   * * Agents
   */
  CreateUserIdentity: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["UserIdentityResponse"];
        };
      };
    };
  };
  /**
   * Show Identity
   * @description Shows the identity with the given id for a given user.
   *
   * Use the first endpoint if authenticating as an agent. Use the second if authenticating as an end user. End users can only view email or phone number identity.
   *
   * #### Allowed For
   *
   * * Agents
   * * Verified end users
   */
  ShowUserIdentity: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIdentityResponse"];
        };
      };
    };
  };
  /**
   * Update Identity
   * @description This endpoint allows you to:
   *
   * * Set the specified identity as verified (but you cannot unverify a verified identity)
   * * Update the `value` property of the specified identity
   *
   * You can't change an identity's `primary` attribute with this endpoint. You must use the [Make Identity Primary](#make-identity-primary) endpoint instead.
   *
   * #### Allowed For
   *
   * * Agents
   */
  UpdateUserIdentity: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIdentityResponse"];
        };
      };
    };
  };
  /**
   * Delete Identity
   * @description Deletes the identity for a given user.
   * In certain cases, a phone number associated with an identity is still visible on the user profile after the identity has been deleted via API. You can remove the phone number from the user profile by updating the `phone` attribute of the user to an empty string. See [Update User via API](/api-reference/ticketing/users/users/#update-user) for details and examples.
   *
   * #### Allowed For
   * * Agents
   */
  DeleteUserIdentity: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Make Identity Primary
   * @description Sets the specified identity as primary. To change other attributes, use the [Update  Identity](#update-identity) endpoint. This is a collection-level operation and the correct behavior for an API client is to subsequently reload the entire collection.
   *
   * The first endpoint is the preferred option if authenticating as an agent. If authenticating as an end user, you can only use the second endpoint. In addition, an end user can only make an email identity primary if the email is verified.
   *
   * #### Allowed For
   *
   * * Agents
   * * Verified end users
   */
  MakeUserIdentityPrimary: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIdentitiesResponse"];
        };
      };
    };
  };
  /**
   * Request User Verification
   * @description Sends the user a verification email with a link to verify ownership of the email address.
   *
   * #### Allowed For
   *
   * * Agents
   */
  RequestUserVerfication: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description Success description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Verify Identity
   * @description Sets the specified identity as verified.
   *
   * For security reasons, you can't use this endpoint to update the email identity of the account owner. To verify the person's identity, send a verification email. See [Verifying the account owner's email address](https://support.zendesk.com/hc/en-us/articles/4408828975130) in Zendesk help.
   *
   * #### Allowed For
   *
   * * Agents
   */
  VerifyUserIdentity: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        user_identity_id: components["parameters"]["UserIdentityId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserIdentityResponse"];
        };
      };
    };
  };
  /**
   * Merge End Users
   * @description Merges the end user specified in the path parameter into the existing end user specified in the request body.
   *
   * Any two end users can be merged with the exception of end users created by sharing agreements.
   *
   * Agents and admins cannot be merged.
   *
   * For more information about how user data is merged, see [Merging a user's duplicate account](https://support.zendesk.com/hc/en-us/articles/4408887695898) in Zendesk help.
   *
   * #### Allowed For
   *
   * * Admins or agents with permission to edit end users
   */
  MergeEndUsers: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /**
   * Set Membership as Default
   * @description Sets the default organization membership of a given user.
   *
   * #### Allowed for
   *
   * * Admins
   * * Agents when setting the default organization membership for an end user
   */
  SetOrganizationMembershipAsDefault: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        organization_membership_id: components["parameters"]["OrganizationMembershipId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMembershipsResponse"];
        };
      };
    };
  };
  /**
   * Unassign Organization
   * @description Immediately removes a user from an organization and schedules a job to unassign all working tickets currently assigned to the user and organization combination. The `organization_id` of the unassigned tickets is set to null.
   *
   * #### Allowed For
   *
   * * Agents
   */
  UnassignOrganization: {
    parameters: {
      path: {
        organization_id: components["parameters"]["OrganizationId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Set Organization as Default
   * @description Sets the default organization membership of a given user.
   *
   * #### Allowed For
   *
   * * Agents
   */
  SetOrganizationAsDefault: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
        organization_id: components["parameters"]["OrganizationId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMembershipResponse"];
        };
      };
    };
  };
  /**
   * Change Your Password
   * @description You can only change your own password. Nobody can change the password of another user because it requires knowing the user's existing password. However, an admin can set a new password for another user without knowing the existing password. See [Set a User's Password](#set-a-users-password) above.
   *
   * #### Allowed For
   *
   * * Agents
   * * End Users
   */
  ChangeOwnPassword: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Set a User's Password
   * @description An admin can set a user's password only if the setting is enabled in Zendesk Support under **Settings** > **Security** > **Global**. The setting is off by default. Only the account owner can access and change this setting.
   *
   * #### Allowed For
   *
   * * Admins
   */
  SetUserPassword: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List password requirements
   * @description #### Allowed For
   *
   * * Agents
   * * End Users
   */
  GetUserPasswordRequirements: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserPasswordRequirementsResponse"];
        };
      };
    };
  };
  /** Show User Related Information */
  ShowUserRelated: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRelatedResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Sessions
   * @description Deletes all the sessions for a user.
   *
   * #### Allowed For
   *
   * * Admins, Agents, End users
   */
  BulkDeleteSessionsByUserId: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Show Session
   * @description #### Allowed For
   *
   * * Admins, Agents, End users
   */
  ShowSession: {
    parameters: {
      path: {
        session_id: components["parameters"]["SessionId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionResponse"];
        };
      };
    };
  };
  /**
   * Delete Session
   * @description #### Allowed For
   *
   * * Admins, Agents, End users
   */
  DeleteSession: {
    parameters: {
      path: {
        session_id: components["parameters"]["SessionId"];
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Ticket Skips
   * @description Archived tickets are not included in the response. See
   * [About archived tickets](https://support.zendesk.com/hc/en-us/articles/203657756) in
   * the Support Help Center.
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   * * Agents with "View only" or higher reports permissions in Support.
   *   These permissions are distinct from Explore permissions.
   * * Agents retrieving their own skips
   */
  ListTicketSkips: {
    parameters: {
      query?: {
        sort_order?: components["parameters"]["TicketSortOrder"];
      };
      path: {
        user_id: components["parameters"]["SkipTicketUserId"];
        ticket_id: components["parameters"]["TicketId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketSkipsResponse"];
        };
      };
    };
  };
  /**
   * Autocomplete Users
   * @description Returns an array of users whose name starts with the value specified in the `name` parameter.
   * It only returns users with no foreign identities.
   *
   * #### Allowed For
   *
   * * Agents
   */
  AutocompleteUsers: {
    parameters: {
      query: {
        /**
         * @description The name to search for the user.
         *
         * @example gil
         */
        name: string;
        field_id?: components["parameters"]["LookupRelationshipAutocompleteFieldIdFragment"];
        source?: components["parameters"]["LookupRelationshipAutocompleteSourceFragment"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"];
        };
      };
    };
  };
  /**
   * Count Users
   * @description Returns an approximate count of users. If the count exceeds 100,000, it is updated every 24 hours.
   *
   * The response includes a `refreshed_at` property in a `count` object that contains a timestamp indicating when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, the `refreshed_at` property may occasionally be null.
   * This indicates that the count is being updated in the background. The `count` object's `value` property is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   *
   * * Admins, Agents and Light Agents
   */
  CountUsers: {
    parameters: {
      query?: {
        role?: components["parameters"]["UserRoleFilter"];
        "role[]"?: components["parameters"]["UserRolesFilter"];
        permission_set?: components["parameters"]["UserPermissionSetFilter"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CountResponse"];
        };
      };
    };
  };
  /**
   * Create Many Users
   * @description Accepts an array of up to 100 user objects.
   *
   * **Note**: To protect the data in your Zendesk account, bulk user imports are not enabled by default in Zendesk accounts. The account owner must contact [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850) to enable the imports. A 403 Forbidden
   * error is returned if data imports are not enabled.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   *
   * #### Specifying an organization
   *
   * You can assign a user to an existing organization by setting an
   * `organization_id` property in the user object.
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   */
  CreateManyUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UsersRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Create Or Update User
   * @description Creates a user if the user does not already exist, or updates an existing user
   * identified by e-mail address or external ID.
   *
   * If you don't specify a role parameter, the new user is assigned the role of end user.
   *
   * If you need to create users without sending out a verification email, include a `"skip_verify_email": true` property in the body.
   *
   * #### External ID Case Sensitivity
   *
   * When providing an external id to identify an existing user to update, the search for the user record is not case sensitive.
   *
   * However, if an existing user is found, the system will update the user's external id to match the case of the external id used to find the user.
   *
   * #### Response Status Code
   *
   * - If the user exists in Zendesk, a successful request returns a 200 status code with "Location: /api/v2/users/{user_id}.json".
   * - If the user does not exist in Zendesk, a successful request returns a 201 status code with "Location: /api/v2/users/{new_user_id}.json".
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   */
  CreateOrUpdateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description Successful response, when user exits */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** @description Created response, when user is new */
      201: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  /**
   * Create Or Update Many Users
   * @description Accepts an array of up to 100 user objects. For each user, the user is created if it does not
   * already exist, or the existing user is updated.
   *
   * **Note**: To protect the data in your Zendesk account, bulk user imports are not enabled by default in Zendesk accounts. The account owner must contact [Zendesk Customer Support](https://support.zendesk.com/hc/en-us/articles/4408843597850) to enable the imports. A 403 Forbidden
   * error is returned if data imports are not enabled.
   *
   * Each individual user object can identify an existing user by `email` or by `external_id`.
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   *
   * #### Allowed For
   *
   * * Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   */
  CreateOrUpdateManyUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UsersRequest"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Users
   * @description Accepts a comma-separated list of up to 100 user ids.
   *
   * The request takes an `ids` or an `external_ids` query parameter.
   *
   * #### Allowed for
   *
   * - Admins and [agents in custom roles with permission](https://support.zendesk.com/hc/en-us/articles/4408882153882#topic_cxn_hig_bd) to manage end users or team members
   *
   * #### Response
   *
   * This endpoint returns a `job_status` [JSON object](/api-reference/ticketing/ticket-management/job_statuses/#json-format) and queues a background job to do the work. Use the [Show Job Status](/api-reference/ticketing/ticket-management/job_statuses/#show-job-status) endpoint to check for the job's completion. Only a certain number of jobs can be queued or running at the same time. See [Job limit](/api-reference/introduction/rate-limits/#job-limit) for more information.
   */
  DestroyManyUsers: {
    parameters: {
      query?: {
        /**
         * @description Id of the users to delete. Comma separated
         * @example 1,2,3
         */
        ids?: string;
        /**
         * @description External Id of the users to delete. Comma separated
         * @example abc,def,ghi
         */
        external_ids?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * Logout many users
   * @description Accepts a comma-separated list of up to 100 user ids.
   *
   * #### Allowed For:
   *
   * * Admins
   */
  LogoutManyUsers: {
    parameters: {
      query?: {
        /**
         * @description Accepts a comma-separated list of up to 100 user ids.
         *
         * @example 1,2
         */
        ids?: string;
      };
    };
    responses: {
      /** @description Accepted response */
      202: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Show Self
   * @description The endpoint returns [user information](/api-reference/ticketing/users/users/) and an `authenticity_token`.
   *
   * #### Allowed For
   *
   * * Anonymous users
   *
   * #### Authenticity Token
   *
   * Zendesk API calls made by end users from a Zendesk help center must include `authenticity_token` in the `X-CSRF-Token` HTTP header. This helps prevent [cross-site request forgery (CSRF)](https://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks.
   *
   * For an example using an authenticity token, see the AJAX request in the [Upgrading from Templating API v1](https://developer.zendesk.com/documentation/help_center/help-center-templates/v1#jquery) documentation.
   */
  ShowCurrentUser: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["CurrentUserResponse"];
        };
      };
    };
  };
  /**
   * Delete the Authenticated Session
   * @description Deletes the current session. In practice, this only works when using session auth for requests, such as client-side requests
   * made from a Zendesk app. When using OAuth or basic authentication, you don't have a current session so this endpoint has no effect.
   *
   * #### Allowed For
   *
   * * Admins, Agents, End users
   */
  DeleteAuthenticatedSession: {
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Show the Currently Authenticated Session
   * @description #### Allowed For
   *
   * * Admins, Agents, End users
   */
  ShowCurrentlyAuthenticatedSession: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionResponse"];
        };
      };
    };
  };
  /**
   * Renew the current session
   * @description #### Allowed For
   *
   * * Admins, Agents, End users
   */
  RenewCurrentSession: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["RenewSessionResponse"];
        };
      };
    };
  };
  /**
   * Request User Create
   * @description Sends the owner a reminder email to update their subscription so more agents can be created.
   *
   * #### Allowed For
   *
   * * Agents
   */
  RequestUserCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Search Users
   * @description Returns an array of users who meet the search criteria.
   *
   * #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   *
   * * Admins, Agents and Light Agents
   */
  SearchUsers: {
    parameters: {
      query?: {
        /**
         * @description The `query` parameter supports the Zendesk search syntax for more advanced
         * user searches. It can specify a partial or full value of any
         * user property, including name, email address, notes, or phone. Example:
         * `query="jdoe"`.
         * See the [Search API](/api-reference/ticketing/ticket-management/search/).
         *
         * @example jdoe
         */
        query?: string;
        /**
         * @description The `external_id` parameter does not support the search syntax. It only accepts ids.
         *
         * @example abc124
         */
        external_id?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"];
        };
      };
    };
  };
  /**
   * Show Many Users
   * @description Accepts a comma-separated list of up to 100 user ids or external ids.
   *
   * #### Allowed For:
   *
   * * Agents
   */
  ShowManyUsers: {
    parameters: {
      query?: {
        /**
         * @description Accepts a comma-separated list of up to 100 user ids.
         *
         * @example 1,2
         */
        ids?: string;
        /**
         * @description Accepts a comma-separated list of up to 100 external ids.
         *
         * @example abc,def
         */
        external_ids?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"];
        };
      };
    };
  };
  /** Update Many Users */
  UpdateManyUsers: {
    parameters: {
      query?: {
        /**
         * @description Id of the users to update. Comma separated
         * @example 1,2,3
         */
        ids?: string;
        /**
         * @description External Id of the users to update. Comma separated
         * @example abc,def,ghi
         */
        external_ids?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRequest"] | components["schemas"]["UsersRequest"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["JobStatusResponse"];
        };
      };
    };
  };
  /**
   * List Views
   * @description Lists shared and personal views available to the current user.
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each view, if present
   * | permissions      | The permissions for each view
   *
   * #### Pagination
   *
   * - Cursor pagination (recommended, but only sorts by `created_at`)
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListViews: {
    parameters: {
      query?: {
        /** @description Only views with given access. May be "personal", "shared", or "account" */
        access?: string;
        /** @description Only active views if true, inactive views if false */
        active?: boolean;
        /** @description Only views belonging to given group */
        group_id?: number;
        /** @description Possible values are "alphabetical", "created_at", or "updated_at". Defaults to "position" */
        sort_by?: string;
        /** @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others */
        sort_order?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * Create View
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### JSON Format
   *
   * The JSON format consists of one property, a `view` object that lists the values to set when the view is created.
   *
   * **Note**: The request must include at least one condition in the `all` array that checks one of the following fields: `status`, `type`, `group_id`, `assignee_id`, or `requester_id`.
   *
   * | Name        | Description
   * | ----------- | -----------
   * | title       | Required. The title of the view
   * | all         | Required. An array of one or more conditions. A ticket must meet all of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
   * | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
   * | description | The description of the view
   * | active      | Allowed values are true or false. Determines if the view is displayed or not
   * | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description", "priority"]}`. See [View columns](#view-columns)
   * | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property
   *
   * The `restriction` object has the following properties.
   *
   * | Name | Comment
   * | ---- | -------
   * | type | Allowed values are "Group" or "User"
   * | id   | The numeric ID of a single group or user
   * | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`
   *
   * If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.
   *
   * #### Example Request Body
   *
   * ```js
   * {
   *   "view": {
   *     "title": "Kelly's tickets",
   *     "raw_title": "{{dc.tickets_assigned_to_kelly}}",
   *     "description": "Tickets that are assigned to Kelly",
   *     "active": true,
   *     "position": 3,
   *     "restriction": {
   *       "type": "User",
   *       "id": "213977756"
   *     },
   *     "all": [
   *       {
   *         "field": "status",
   *         "operator": "less_than",
   *         "value": "solved"
   *       },
   *       {
   *         "field": "group_id",
   *         "operator": "is",
   *         "value": "24000932"
   *       },
   *       {
   *         "field": "custom_fields_360011872073",
   *         "operator": "is",
   *         "value": "Canada"
   *       },
   *       ...
   *     ],
   *     "output": {
   *       "columns": ["status", "requester", "assignee"],
   *       "group_by": "assignee",
   *       "group_order": "desc",
   *       "sort_by": "status",
   *       "sort_order": "desc"
   *     }
   *   }
   * }
   * ```
   *
   * #### View columns
   *
   * The `output` request parameter lets you specify what columns to include in the view in the agent interface. Example: `"output": {"columns": ["status", "description", "priority"]}`. The following table lists possible columns for views in the agent UI and the corresponding values in the `columns` array.
   *
   * For custom fields, specify the id of the custom field in the `columns` array.
   *
   * You can specify a total of 10 columns to a view.
   *
   * | View column title in UI     | Value                |
   * |---------------------------- | -------------------- |
   * | Assigned                    | `assigned`           |
   * | Assignee                    | `assignee`           |
   * | Due Date                    | `due_date`           |
   * | Group                       | `group`              |
   * | ID                          | `nice_id`            |
   * | Updated                     | `updated`            |
   * | Assignee updated            | `updated_assignee`   |
   * | Requester updated           | `updated_requester`  |
   * | Updater                     | `updated_by_type`    |
   * | Organization                | `organization`       |
   * | Priority                    | `priority`           |
   * | Requested                   | `created`            |
   * | Requester                   | `requester`          |
   * | Requester language          | `locale_id`          |
   * | Satisfaction                | `satisfaction_score` |
   * | Solved                      | `solved`             |
   * | Status category             | `status`             |
   * | Subject                     | `description`        |
   * | Submitter                   | `submitter`          |
   * | Ticket form                 | `ticket_form`        |
   * | Type                        | `type`               |
   * | Brand                       | `brand`              |
   * | Ticket status               | `custom_status_id`   |
   *
   * #### View sorting
   *
   * You can group and sort items in the view by adding items to the `output` parameter:
   *
   * | Attribute                   | Description
   * |-----------------------------| -----------
   * | `group_by`, `sort_by`       | Sort or group the tickets by a column in the [View columns](#view-columns) table. The `subject` and `submitter` columns are not supported
   * | `group_order`, `sort_order` | Either "asc" or "desc"
   */
  CreateView: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewResponse"];
        };
      };
    };
  };
  /**
   * Show View
   * @description #### Allowed For
   *
   * * Agents
   */
  ShowView: {
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewResponse"];
        };
      };
    };
  };
  /**
   * Update View
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### JSON Format
   *
   *  The PUT request takes one property, a `view` object that lists the values to update. All properties are optional.
   *
   * **Note**: Updating a condition updates the containing array, clearing the other conditions. Include all your conditions when updating any condition.
   *
   * | Name        | Description
   * | ----------- | -----------
   * | title       | The title of the view
   * | all         | An array of one or more conditions. A ticket must meet all the conditions to be included in the view. The PUT request replaces all existing conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
   * | any         | An array of one or more conditions. A ticket must meet any of them to be included in the view. At least one `all` condition must be defined with the `any` conditions. The PUT request replaces all existing `any` conditions. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference)
   * | active      | Allowed values are true or false. Determines if the view is displayed or not
   * | output      | An object that specifies the columns to display. Example: `"output": {"columns": ["status", "description," "priority"]}`. See [View columns](#view-columns)
   * | restriction | An object that describes who can access the view. To give all agents access to the view, omit this property
   *
   * The `restriction` object has the following properties.
   *
   * | Name | Comment
   * | ---- | -------
   * | type | Allowed values are "Group" or "User"
   * | id   | The numeric ID of a single group or user
   * | ids  | The numeric IDs of a single or more groups. Recommended for "Group" `type`
   *
   * If `type` is "Group", the `ids` property is the preferred method of specifying the group id or ids.
   *
   * You can also update how items are sorted and grouped. See [View sorting](#view-sorting) in Create View.
   *
   * #### Example Request Body
   *
   * ```js
   * {
   *   "view": {
   *     "title": "Code red tickets",
   *     "restriction": {
   *       "type": "Group",
   *       "ids": [10052, 10057, 10062, 10002]
   *     },
   *     "all": [
   *       {
   *         "field": "priority",
   *         "operator": "is",
   *         "value": "urgent"
   *       }
   *     ],
   *     "output": {
   *       "columns": ["status", "requester", "assignee", "updated"]
   *     }
   *   }
   * }
   * ```
   */
  UpdateView: {
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewResponse"];
        };
      };
    };
  };
  /**
   * Delete View
   * @description #### Allowed For
   * * Agents
   */
  DeleteView: {
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Count Tickets in View
   * @description Returns the ticket count for a single view.
   *
   * This endpoint is rate limited to 5 requests per minute, per view, per agent.
   *
   * #### View Counts
   *
   * The view count endpoints, Count Tickets in View (this endpoint) and [Count Tickets in Views](#count-tickets-in-views), let you estimate how many tickets remain in a view without having to retrieve the entire view. They're designed to help estimate view size. From a business perspective, accuracy becomes less relevant as view size increases.
   *
   * To ensure quality of service, these counts are cached more heavily as the number of tickets in a view grows. For a view with thousands of tickets, you can expect the count to be cached for 60-90 minutes. As a result, the count may not reflect the actual number of tickets in your view.
   *
   * View counts are represented as JSON objects with the following attributes:
   *
   * | Name            | Type        | Comment
   * | --------------- | ------------| -------
   * | view_id         | integer     | The id of the view
   * | url             | string      | The API url of the count
   * | value           | integer     | The cached number of tickets in the view. Can also be null if the system is loading and caching new data. Not to be confused with 0 tickets
   * | pretty          | string      | A pretty-printed text approximation of the view count
   * | fresh           | boolean     | false if the cached data is stale and the system is still loading and caching new data
   * | active          | boolean     | Only active views if true, inactive views if false, all views if null.
   *
   * #### Example
   * ```js
   * {
   *   "view_count": {
   *     "view_id": 25,
   *     "url":     "https://company.zendesk.com/api/v2/views/25/count.json",
   *     "value":   719,
   *     "pretty":  "~700",
   *     "fresh":   true
   *   }
   * }
   * ```
   */
  GetViewCount: {
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewCountResponse"];
        };
      };
    };
  };
  /**
   * Execute View
   * @description Returns the column titles and the rows of the specified view.
   *
   * The `columns` array lists the view's column titles and includes only views parameters.
   *
   * The `rows` array lists the values of each column for each ticket and includes parameters from both views and tickets. Though not displayed in the view, a partial ticket object is included with each row object.
   *
   * **Note**: To get the full ticket objects for a specified view, use [List Tickets from a View](#list-tickets-from-a-view).
   *
   * This endpoint is rate limited to 5 requests per minute, per view, per agent.
   *
   * The view execution system is designed for periodic rather than high-frequency API usage. In particular, views called very frequently may be cached by Zendesk. This means that the API client will still receive a result, but that result may have been computed at any time within the last 10 minutes.
   *
   * Zendesk recommends using the Incremental Ticket Export endpoint to get the latest changes. You can call it more often, and it returns all the tickets that changed since the last poll. For details and rate limits, see [Incremental Exports](/api-reference/ticketing/ticket-management/incremental_exports/).
   *
   * View output sorting can be controlled by passing the `sort_by` and `sort_order` parameters in the format described in the table in [Preview Views](#preview-views).
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ExecuteView: {
    parameters: {
      query?: {
        /** @description The ticket field used for sorting. This will either be a title or a custom field id. */
        sort_by?: string;
        /** @description The direction the tickets are sorted. May be one of 'asc' or 'desc' */
        sort_order?: string;
      };
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewResponse"];
        };
      };
    };
  };
  /**
   * Export View
   * @description Returns the csv attachment of the specified view if possible. Enqueues a job to produce the csv if necessary.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ExportView: {
    parameters: {
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewExportResponse"];
        };
      };
    };
  };
  /**
   * List Tickets From a View
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### Pagination
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTicketsFromView: {
    parameters: {
      query?: {
        /** @description Sort or group the tickets by a column in the [View columns](#view-columns) table. The `subject` and `submitter` columns are not supported */
        sort_by?: string;
        /** @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others */
        sort_order?: string;
      };
      path: {
        view_id: components["parameters"]["ViewId"];
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["TicketsResponse"];
        };
      };
    };
  };
  /**
   * List Active Views
   * @description Lists active shared and personal views available to the current user.
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each view, if present
   * | permissions      | The permissions for each view
   *
   * #### Pagination
   *
   * - Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 records per page.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListActiveViews: {
    parameters: {
      query?: {
        /** @description Only views with given access. May be "personal", "shared", or "account" */
        access?: string;
        /** @description Only views belonging to given group */
        group_id?: number;
        /** @description Possible values are "alphabetical", "created_at", or "updated_at". Defaults to "position" */
        sort_by?: string;
        /** @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others */
        sort_order?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * List Views - Compact
   * @description A compacted list of shared and personal views available to the current user. This endpoint never returns more than 32 records and does not respect the "per_page" option.
   *
   * #### Allowed For
   *
   * * Agents
   */
  ListCompactViews: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * Count Views
   * @description Returns an approximate count of shared and personal views available to the current user. If the count exceeds 100,000, the count will return a cached result.  This cached result will update every 24 hours.
   *
   * The `count[refreshed_at]` property is a timestamp that indicates when the count was last updated.
   *
   * **Note**: When the count exceeds 100,000, `count[refreshed_at]` may occasionally be null.
   * This indicates that the count is being updated in the background, and `count[value]` is limited to 100,000 until the update is complete.
   *
   * #### Allowed For
   * * Agents
   */
  CountViews: {
    responses: {
      /** @description Count of views */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsCountResponse"];
        };
      };
    };
  };
  /**
   * Count Tickets in Views
   * @description Returns the ticket count of each view in a list of views. Accepts up to 20 view ids per request. For the ticket count of a single view, see [Count Tickets in View](#count-tickets-in-view).
   *
   * Only returns values for personal and shared views accessible to the user performing the request.
   *
   * This endpoint is rate limited to 6 requests every 5 minutes.
   *
   * #### Allowed For
   *
   * * Agents
   */
  GetViewCounts: {
    parameters: {
      query: {
        /**
         * @description List of view's ids separated by commas.
         * @example 1,2,3
         */
        ids: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewCountsResponse"];
        };
      };
    };
  };
  /**
   * Bulk Delete Views
   * @description Deletes the views corresponding to the provided list of IDs.
   *
   * #### Allowed For
   * * Agents
   */
  BulkDeleteViews: {
    parameters: {
      query: {
        /**
         * @description The IDs of the views to delete
         * @example 1,2,3
         */
        ids: string;
      };
    };
    responses: {
      /** @description No Content response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Preview Views
   * @description You can preview views by constructing the conditions in the proper format and nesting them under the `view` property. See [Conditions reference](/documentation/ticketing/reference-guides/conditions-reference/). The output can also be controlled by passing in any of the following parameters and nesting them under the `output` property.
   *
   * | Name            | Type    | Comment
   * | --------------- | ------- | -------
   * | columns         | Array   | The ticket fields to display. System fields are looked up by name, custom fields by title or id. See the [View columns](#view-columns) table
   * | group_by        | String  | When present, the field by which the tickets are grouped
   * | group_order     | String  | The direction the tickets are grouped. May be one of "asc" or "desc"
   * | sort_order      | String  | The direction the tickets are sorted. May be one of "asc" or "desc"
   * | sort_by         | String  | The ticket field used for sorting. This will either be a title or a custom field id.
   *
   * This endpoint is rate limited to 5 requests per minute, per view, per agent.
   *
   * #### Allowed For
   *
   * * Agents
   */
  PreviewViews: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewResponse"];
        };
      };
    };
  };
  /**
   * Preview Ticket Count
   * @description Returns the ticket count for a single preview.
   *
   * #### Allowed For
   *
   * * Agents
   */
  PreviewCount: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewCountResponse"];
        };
      };
    };
  };
  /**
   * Search Views
   * @description #### Pagination
   *
   * * Offset pagination only
   *
   * See [Using Offset Pagination](/api-reference/ticketing/introduction/#using-offset-pagination).
   *
   * #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported. For more information, see [Side-loading](/documentation/ticketing/using-the-zendesk-api/side_loading/).
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each view, if present
   * | permissions      | The permissions for each view
   */
  SearchViews: {
    parameters: {
      query: {
        /**
         * @description Query string used to find all views with matching title
         * @example sales&group_id=25789188
         */
        query: string;
        /** @description Filter views by access. May be "personal", "shared", or "account" */
        access?: string;
        /** @description Filter by active views if true or inactive views if false */
        active?: boolean;
        /** @description Filter views by group */
        group_id?: number;
        /** @description Possible values are "alphabetical", "created_at", "updated_at", and "position". If unspecified, the views are sorted by relevance */
        sort_by?: string;
        /** @description One of "asc" or "desc". Defaults to "asc" for alphabetical and position sort, "desc" for all others */
        sort_order?: string;
        /**
         * @description A sideload to include in the response. See [Sideloads](#sideloads-3)
         * @example permissions
         */
        include?: string;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * List Views By ID
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name             | Will sideload
   * | ---------------- | -------------
   * | app_installation | The app installation that requires each view, if present
   * | permissions      | The permissions for each view
   */
  ListViewsById: {
    parameters: {
      query: {
        /**
         * @description List of view's ids separated by commas.
         * @example 1,2,3
         */
        ids: string;
        /** @description Only active views if true, inactive views if false */
        active?: boolean;
      };
    };
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * Update Many Views
   * @description #### Allowed For
   *
   * * Agents
   *
   * #### Request Parameters
   *
   * The PUT request expects a `views` object that lists the views to update.
   *
   * Each view may have the following properties:
   *
   * | Name     | Mandatory | Description
   * | -------- | --------- | -----------
   * | id       | yes       | The ID of the view to update
   * | position | no        | The new position of the view
   * | active   | no        | The active status of the view (true or false)
   *
   * #### Example Request Body
   *
   * ```js
   * {
   *   "views": [
   *     {"id": 25, "position": 3},
   *     {"id": 23, "position": 5},
   *     {"id": 27, "position": 9},
   *     {"id": 22, "position": 7}
   *   ]
   * }
   * ```
   */
  UpdateManyViews: {
    responses: {
      /** @description Success response */
      200: {
        content: {
          "application/json": components["schemas"]["ViewsResponse"];
        };
      };
    };
  };
  /**
   * List Workspaces
   * @description #### Allowed For
   *
   * * Admins, Agents
   */
  ListWorkspaces: {
    responses: {
      /** @description Success Response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceResponse"];
        };
      };
    };
  };
  /**
   * Create Workspace
   * @description #### Allowed For
   *
   * * Admins
   */
  CreateWorkspace: {
    requestBody?: {
      content: {
        "application/json": {
          workspace?: components["schemas"]["WorkspaceInput"];
        };
      };
    };
    responses: {
      /** @description Created workspace */
      201: {
        content: {
          "application/json": {
            workspace?: components["schemas"]["WorkspaceObject"];
          };
        };
      };
    };
  };
  /**
   * Show Workspace
   * @description #### Allowed For
   * * Admins
   */
  ShowWorkspace: {
    parameters: {
      path: {
        workspace_id: components["parameters"]["WorkspaceId"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            workspace?: components["schemas"]["WorkspaceObject"];
          };
        };
      };
    };
  };
  /**
   * Update Workspace
   * @description #### Allowed For
   * * Admins
   */
  UpdateWorkspace: {
    parameters: {
      path: {
        workspace_id: components["parameters"]["WorkspaceId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          workspace?: components["schemas"]["WorkspaceInput"];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            workspace?: components["schemas"]["WorkspaceObject"];
          };
        };
      };
    };
  };
  /**
   * Delete Workspace
   * @description #### Allowed For
   * * Admins
   */
  DeleteWorkspace: {
    parameters: {
      path: {
        workspace_id: components["parameters"]["WorkspaceId"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Bulk Delete Workspaces
   * @description #### Allowed For
   * * Admins
   */
  DestroyManyWorkspaces: {
    parameters: {
      query: {
        /**
         * @description The ids of the workspaces to delete
         * @example [
         *   1,
         *   2,
         *   3
         * ]
         */
        ids: number[];
      };
    };
    responses: {
      /** @description Succesful response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Reorder Workspaces
   * @description #### Allowed For
   * * Admins
   */
  ReorderWorkspaces: {
    requestBody?: {
      content: {
        "application/json": {
          ids?: number[];
        };
      };
    };
    responses: {
      /** @description Succesful response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
}
