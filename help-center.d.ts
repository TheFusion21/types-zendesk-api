/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/community/posts": {
    /** List Posts */
    get: operations["ListPosts"];
    /**
     * Create Post
     * @description Adds a post to the specified [topic](/api-reference/help_center/help-center-api/topics).
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * Agents with the Help Center manager role can optionally supply an
     * `author_id` as part of the `post` object. If it is provided, the post's
     * author will be set to the value of the `author_id` key.
     *
     * Agents with the Help Center manager role can optionally supply a `created_at` as part of the `post` object. If it is not provided `created_at` is set to the current time.
     *
     * Supplying a `notify_subscribers` property with a value of false will prevent subscribers to the post's topic from receiving a post creation email notification. This can be helpful when creating many posts at a time. Specify the property in the root of the JSON object, not in the "post" object.
     * Optionally, you can attach existing [content tags](/api-reference/help_center/help-center-api/content_tags) by specifying their ids.
     */
    post: operations["CreatePost"];
  };
  "/api/v2/community/posts/{post_id}": {
    /**
     * Show Post
     * @description Gets information about a given post.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name        | Will sideload
     * |-------------|--------------
     * | users       | authors
     * | topics      | topics
     */
    get: operations["ShowPost"];
    /**
     * Update Post
     * @description #### Allowed for
     *
     * * Agents
     * * The end user who created the post
     */
    put: operations["UpdatePost"];
    /**
     * Delete Post
     * @description #### Allowed for
     *
     * * Agents
     * * The end user who created the post
     */
    delete: operations["DeletePost"];
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
  };
  "/api/v2/community/posts/{post_id}/comments": {
    /**
     * List Comments
     * @description Lists all comments on a specific post or all the comments created by a specific user.
     * When listing comments by specific user, the comments of the user making the request
     * can be listed by specifying `me` as the id.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     *
     * You can sideload related records with the `include` query string parameter. The following sideloads are supported:
     *
     * | Name   | Will sideload
     * |--------|--------------
     * | users  | authors
     * | posts  | posts
     *
     * See [Sideloading related records](/documentation/developer-tools/working-with-data/sideloading-related-records).
     */
    get: operations["ListPostComments"];
    /**
     * Create Post Comment
     * @description Adds a comment to the specified post.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * Agents with the Help Center manager role can optionally supply an
     * `author_id` as part of the `comment` object. If it is provided, the
     * comment's author will be set to the value of the `author_id` key.
     *
     * Supplying a `notify_subscribers` property with a value of false
     * will prevent subscribers to the comment's post from receiving a comment
     * creation email notification. This can be helpful when creating many
     * comments at a time. Specify the property in the root of the JSON object, not in the "comment" object.
     */
    post: operations["CreatePostComment"];
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
  };
  "/api/v2/community/posts/{post_id}/comments/{post_comment_id}": {
    /**
     * Show Comment
     * @description Shows information about the specified comment.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name   | Will sideload
     * |--------|--------------
     * | users  | The comment's author
     * | posts  | The comment's post
     */
    get: operations["ShowPostComment"];
    /**
     * Update Comment
     * @description Updates the specified comment.
     *
     * #### Allowed for
     *
     * * Agents
     * * The end user who created the comment
     */
    put: operations["UpdatePostComment"];
    /**
     * Delete Comment
     * @description Deletes the specified comment.
     *
     * #### Allowed for
     *
     * * Agents
     * * The end user who created the comment
     */
    delete: operations["DeletePostComment"];
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        post_comment_id: components["parameters"]["PostCommentId"];
      };
    };
  };
  "/api/v2/community/posts/{post_id}/subscriptions": {
    /**
     * List Post Subscriptions
     * @description Lists the subscriptions to a given post.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will list only the subscriptions created by the
     * requesting end-user.
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | users
     * | posts         | posts
     */
    get: operations["ListPostSubscriptions"];
    /**
     * Create Post Subscription
     * @description Creates a subscription to a given [post](/api-reference/help_center/help-center-api/posts).
     *
     * #### Allowed for
     *
     * * End-users
     *
     * Agents with the Help Center manager role can optionally supply a
     * `subscription` object containing a `user_id` value. If provided,
     * the user associated with `user_id` will be subscrbed to the post.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    post: operations["CreatePostSubscription"];
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
  };
  "/api/v2/community/posts/{post_id}/subscriptions/{subscription_id}": {
    /**
     * Show Post Subscription
     * @description #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will only show a subscription created by the requesting end-user.
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     * | posts         | posts         | post subscriptions
     */
    get: operations["ShowPostSubscription"];
    /**
     * Delete Post Subscription
     * @description Removes a subscription to a given [post](/api-reference/help_center/help-center-api/posts).
     *
     * #### Allowed for
     *
     * * End-users
     */
    delete: operations["DeletePostSubscription"];
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
  };
  "/api/v2/community/topics": {
    /**
     * List Topics
     * @description Lists all topics.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTopics"];
    /**
     * Create Topic
     * @description #### Allowed for
     *
     * * Help Center managers
     *
     * Agents with the Help Center Manager role can optionally supply a `created_at` as part of the `topic` object. If it is not provided `created_at` is set to the current time.
     */
    post: operations["CreateTopic"];
  };
  "/api/v2/community/topics/{topic_id}": {
    /**
     * Show Topic
     * @description Shows information about a single topic.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     */
    get: operations["ShowTopic"];
    /**
     * Update Topic
     * @description #### Allowed for
     *
     * * Help Center managers
     */
    put: operations["UpdateTopic"];
    /**
     * Delete Topic
     * @description #### Allowed for
     *
     * * Help Center managers
     */
    delete: operations["DeleteTopic"];
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
  };
  "/api/v2/community/topics/{topic_id}/subscriptions": {
    /**
     * List Topic Subscriptions
     * @description Lists the subscriptions to a given topic.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will list only the subscriptions created by the
     * requesting end-user.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | users
     * | topics        | topics
     */
    get: operations["ListTopicSubscriptions"];
    /**
     * Create Topic Subscription
     * @description Creates a subscription to a given [topic](/api-reference/help_center/help-center-api/topics).
     *
     * #### Allowed for
     *
     * * End-users
     *
     * Agents with the Help Center manager role can optionally supply a `user_id`
     * value. If provided, the user associated with `user_id` will be subscribed
     * to the topic.
     */
    post: operations["CreateTopicSubscription"];
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
  };
  "/api/v2/community/topics/{topic_id}/subscriptions/{subscription_id}": {
    /**
     * Show Topic Subscription
     * @description #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will only show a subscription created by the requesting end-user.
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     * | topics        | topics        | topic subscriptions
     */
    get: operations["ShowTopicSubscription"];
    /**
     * Update Topic Subscription
     * @description #### Allowed for
     *
     * * End-users
     */
    put: operations["UpdateTopicSubscription"];
    /**
     * Delete Topic Subscription
     * @description Removes a subscription to a given [topic](/api-reference/help_center/help-center-api/topics).
     *
     * #### Allowed for
     *
     * * End-users
     */
    delete: operations["DeleteTopicSubscription"];
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
  };
  "/api/v2/guide/search": {
    /** Unified Search */
    get: operations["UnifiedSearch"];
  };
  "/api/v2/guide/user_images": {
    /**
     * Create Image Path
     * @description Returns the image path that you can use to display the image in a community post.
     *
     * You should only use this endpoint after uploading the image. See [Uploading the image with the upload URL](#uploading-the-image-with-the-upload-url).
     *
     * #### Request Body Format
     * The request body must be a JSON object with the following properties:
     *
     * | Name         | Type   | Mandatory | Description |
     * | ------------ | ------ | --------- | ----------- |
     * | token        | string | true      | The image token. See [Create Image Upload URL and Token](#create-image-upload-url-and-token) |
     * | brand_id     | string | true      | The ID of the brand where this image was uploaded |
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     */
    post: operations["CreateUserImage"];
  };
  "/api/v2/guide/user_images/uploads": {
    /**
     * Create Image Upload URL and Token
     * @description Returns an upload URL and token. Use the upload URL in a PUT request to upload the image to the help center. See [Uploading the image with the upload URL](#uploading-the-image-with-the-upload-url) below.
     *
     * After uploading the image, use the image token to create the image path. See [Create Image Path](#create-image-path).
     *
     * #### Uploading the image with the upload URL
     *
     * The endpoint returns an object with the `url` and `headers` properties:
     *
     * ```json
     * "headers": {
     *   "Content-Disposition": "attachment; filename=\"01GC9JEN2X052BAKW905PH9C36.jpeg\"",
     *   "Content-Type": "image/jpeg",
     *   "X-Amz-Server-Side-Encryption": "AES256"
     * },
     * ...
     * "url": "https://aus-uploaded-assets-production.s3-accelerate.amazonaws.com/20/13633840/01GC9JEN2X052BAKW905PH9C36?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ACCESS_KEY%2F20220906%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220906T141448Z&X-Amz-Expires=3600&X-Amz-Signature=476f8f09a97cae0bb582716d54dc58cdfbc754c5e20a2c492515d7ffce954971&X-Amz-SignedHeaders=content-disposition%3Bhost%3Bx-amz-server-side-encryption&x-amz-server-side-encryption=AES256"
     * ```
     *
     * To upload the image, make a PUT request to the URL and with the specified headers. Agents, end users, or anonymous users can make the request. The maximum file size is 2MB.
     *
     * The following curl example uploads the image:
     *
     * ```sh
     * curl -L -X PUT 'https://aus-uploaded-assets-production.s3-accelerate.amazonaws.com/20/13633840/01GC9JEN2X052BAKW905PH9C36?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ACCESS_KEY%2F20220906%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220906T141448Z&X-Amz-Expires=3600&X-Amz-Signature=476f8f09a97cae0bb582716d54dc58cdfbc754c5e20a2c492515d7ffce954971&X-Amz-SignedHeaders=content-disposition%3Bhost%3Bx-amz-server-side-encryption&x-amz-server-side-encryption=AES256' \
     *   -H 'Content-Disposition: attachment; filename="01GC9JEN2X052BAKW905PH9C36.jpeg"' \
     *   -H 'Content-Type: image/jpeg' \
     *   -H 'X-Amz-Server-Side-Encryption: AES256' \
     *   --data-binary "@{file}"
     * ```
     *
     * A successful response will return:
     *
     * ```
     * Status 200 OK
     * ```
     *
     * #### Request Body Format
     * The request body of `POST /api/v2/guide/user_images/uploads` must be a JSON object with the following properties:
     *
     * | Name         | Type   | Mandatory | Description |
     * | ------------ | ------ | --------- | ----------- |
     * | content_type | string | true      | The content type of the file to upload |
     * | file_size    | number | true      | Size of the file in bytes. Max size is 2000000 (2MB). |
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     */
    post: operations["RequestUserImageUpload"];
  };
  "/api/v2/help_center/{locale}/articles": {
    /** List Articles */
    get: operations["ListArticles"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}": {
    /**
     * Show Article
     * @description Shows the properties of an article.
     *
     * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | the author
     * | sections      | the section
     * | categories    | the category
     * | translations  | the article, section and category translations, if any
     *
     * Unlike other sideloads, translations are embedded within the article because they're
     * not shared between resources.
     * Section and category translations are only sideloaded if present.
     */
    get: operations["ShowArticle"];
    /** Update Article */
    put: operations["UpdateArticle"];
    /**
     * Archive Article
     * @description Archives the article. You can restore the article using the Help Center user interface. See [Viewing and restoring archived articles](https://support.zendesk.com/hc/en-us/articles/235721587).
     *
     * #### Allowed for
     *
     * * Agents
     */
    delete: operations["ArchiveArticle"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/bulk_attachments": {
    /**
     * Associate Attachments in Bulk to Article
     * @description You can associate attachments in bulk to only one article at a time,
     * with a maximum of 20 attachments per request.
     *
     * To create the attachments, see [Create Unassociated Attachment](/api-reference/help_center/help-center-api/article_attachments#create-unassociated-attachment).
     *
     * #### Allowed for
     *
     * * Agents
     */
    post: operations["BulkAttachmentsArticles"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/comments": {
    /**
     * List Comments
     * @description Lists the comments created by a specific user, or all comments made by all users on
     * a specific article.
     *
     * The `{locale}` for the article comments is required only for end users. Admins and agents can omit it.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * End-users can only list their own comments. If listing comments by user, they must specify `me` as the id.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | authors
     * | articles      | articles
     */
    get: operations["ListArticleComments"];
    /**
     * Create Comment
     * @description Adds a comment to the specified [article](/api-reference/help_center/help-center-api/articles). Because comments are associated
     * with a specific article translation, or locale, you must specify a locale.
     *
     * #### Allowed for
     *
     * * End users
     *
     * Agents with the Help Center manager role can optionally supply a `created_at` as part of the `comment` object. If not provided, `created_at` is set to the current time.
     *
     * Supplying a `notify_subscribers` property with a value of false will prevent subscribers to the comment's article from receiving a comment creation email notification. This can be helpful when creating many comments at a time. Specify the property in the root of the JSON object, not in the "comment" object.
     */
    post: operations["CreateArticleComment"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/comments/{comment_id}": {
    /**
     * Show Comment
     * @description Shows the properties of the specified comment.
     *
     * The `{locale}` is required only for end users and anomynous users. Admins and agents can omit it.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     * * Anonymous users
     */
    get: operations["ShowComment"];
    /**
     * Update Comment
     * @description #### Allowed for
     *
     * * Agents
     * * The end user who created the comment
     */
    put: operations["UpdateComment"];
    /**
     * Delete Comment
     * @description #### Allowed for
     *
     * * Agents
     * * The end user who created the comment
     */
    delete: operations["DeleteComment"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        comment_id: components["parameters"]["CommentId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/labels": {
    /**
     * List Article Labels
     * @description Lists all the labels in a given article.
     *
     * #### Allowed for
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListArticleLabels"];
    /**
     * Create Label
     * @description #### Allowed for
     *
     * * Agents
     */
    post: operations["CreateArticleLabel"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/labels/{label_id}": {
    /**
     * Delete Label from Article
     * @description Removes the label from the specified article's list of labels.
     *
     * #### Allowed for
     *
     * * Agents
     */
    delete: operations["DeleteArticleLabel"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        label_id: components["parameters"]["LabelId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/source_locale": {
    /**
     * Update Article Source Locale
     * @description Updates the article's `source_locale` property. The source locale is the main language of the article. When you delete the article in the source locale, you delete all the article's translations.
     *
     * The endpoint sets one of the article's translation as the source locale of the article. The article in the previous source locale becomes a translation, which you can delete separately.
     *
     * The new source locale must be enabled in Guide. See [Enabling languages for your help center](https://support.zendesk.com/hc/en-us/articles/224857687#topic_ys2_kxh_tz). You can use the [List all enabled locales and default locale](/api-reference/help_center/help-center-api/translations/#list-enabled-locales-and-default-locale) endpoint to check for the enabled locales.
     *
     * #### Allowed for
     *
     * * Agents
     */
    put: operations["UpdateArticleSourceLocale"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/subscriptions": {
    /**
     * List Article Subscriptions
     * @description Lists the subscriptions to a given article.
     *
     * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will list only the subscriptions created by the
     * requesting end-user.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | users
     * | articles      | articles
     * | sections      | sections
     *
     * Note that you need to specify the `articles` sideload to get the sections
     * and translations sideloaded because these are not directly associated with the
     * subscriptions.
     */
    get: operations["ListArticleSubscriptions"];
    /**
     * Create Article Subscription
     * @description Creates a subscription to a given [article](/api-reference/help_center/help-center-api/articles).
     *
     * #### Allowed for
     *
     * * End-users
     *
     * Agents with the Help Center manager role can optionally supply a `user_id`
     * value. If provided, the user associated with `user_id` will be subscribed
     * to the article.
     */
    post: operations["CreateArticleSubscription"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/subscriptions/{subscription_id}": {
    /**
     * Show Article Subscription
     * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will only show a subscription created by the requesting end-user.
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     * | articles      | articles      | article subscriptions
     * | sections      | sections      | section subscriptions
     */
    get: operations["ShowArticleSubscription"];
    /**
     * Delete Article Subscription
     * @description Removes the specified subscription from the specified [article](/api-reference/help_center/help-center-api/articles).
     *
     * #### Allowed for
     *
     * * End users
     */
    delete: operations["DeleteArticleSubscription"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/articles/{article_id}/up": {
    /**
     * Create Vote
     * @description Creates an up or down vote for a given [article](/api-reference/help_center/help-center-api/articles), [article comment](/api-reference/help_center/help-center-api/article_comments/), [post](/api-reference/help_center/help-center-api/posts), or [post comment](/api-reference/help_center/help-center-api/post_comments).
     * If a vote already exists for the source object, it's updated.
     *
     * #### Allowed for
     *
     * * End users
     */
    post: operations["CreateArticleUpVote"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/categories": {
    /**
     * List Categories
     * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * The response will list only the categories that the agent, end user, or
     * anonymous user can view in the help center.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sorting
     *
     * You can sort the results with the `sort_by` and `sort_order` query string parameters.
     *
     * ```
     * GET /api/v2/help_center/en-us/categories.json?sort_by=updated_at&sort_order=asc
     * ```
     *
     * The `sort_by` parameter can have one of the following values:
     *
     * | value         | description
     * | ------------- | -----------
     * | `position`    | order set manually using the Arrange Content page. Default order
     * | `created_at`  | order by creation time
     * | `updated_at`  | order by update time
     *
     * The `sort_order` parameter can have one of the following values:
     *
     * | value   | description
     * | ------- | -----------
     * | `asc`   | ascending order
     * | `desc`  | descending order
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | translations  | the category translations, if any
     *
     * Translations are embedded within the category because they're
     * not shared between resources.
     */
    get: operations["ListCategories"];
    /**
     * Create Category
     * @description You must specify a category name and locale. The locale can be omitted if it's specified
     * in the URL. Optionally, you can specify multiple [translations](/api-reference/help_center/help-center-api/translations) for
     * the category. The specified locales must be enabled for the current Help Center.
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    post: operations["CreateCategory"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
  };
  "/api/v2/help_center/{locale}/categories/{category_id}": {
    /**
     * Show Category
     * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | translations  | the category translations, if any
     *
     * Translations are embedded within the category because they're
     * not shared between resources.
     */
    get: operations["ShowCategory"];
    /**
     * Update Category
     * @description These endpoints only update category-level metadata such as the sorting position.
     * They don't update category translations.
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    put: operations["UpdateCategory"];
    /**
     * Delete Category
     * @description **WARNING: Every section and all articles in the category will also be deleted.**
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    delete: operations["DeleteCategory"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/categories/{category_id}/sections": {
    /**
     * Create Section
     * @description Creates a section in a given [category](/api-reference/help_center/help-center-api/categories). You must
     * specify a section name and locale. The locale can be omitted if it's specified
     * in the URL. Optionally, you can specify multiple [translations](/api-reference/help_center/help-center-api/translations)
     * for the section. The specified locales must be enabled for
     * the current Help Center.
     *
     * #### Allowed for
     *
     * * Agents
     */
    post: operations["CreateSection"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/categories/{category_id}/source_locale": {
    /**
     * Update Category Source Locale
     * @description The endpoint updates the category `source_locale` property
     *
     * #### Allowed for
     *
     * * Agents
     */
    put: operations["UpdateCategorySourceLocale"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections": {
    /**
     * List Sections
     * @description Lists all the sections in Help Center or in a specific [category](/api-reference/help_center/help-center-api/categories).
     *
     * The `{locale}` is required only for end users and anomynous users. Admins and agents can omit it.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * The response will list only the sections that the requesting agent,
     * end user, or anonymous user can view in the help center.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sorting
     *
     * You can sort the results with the `sort_by` and `sort_order` query string parameters.
     *
     * ```
     * GET /api/v2/help_center/en-us/sections.json?sort_by=updated_at&sort_order=asc
     * ```
     *
     * The `sort_by` parameter can have one of the following values:
     *
     * | value         | description
     * | ------------- | -----------
     * | `position`    | order set manually using the Arrange Content page. Default order
     * | `created_at`  | order by creation time
     * | `updated_at`  | order by update time
     *
     * The `sort_order` parameter can have one of the following values:
     *
     * | value   | description
     * | ------- | -----------
     * | `asc`   | ascending order
     * | `desc`  | descending order
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | categories    | the category
     * | translations  | the section and category translations, if any
     *
     * Unlike other sideloads, translations are embedded within the section because they're
     * not shared between resources.
     * Category translations are only sideloaded if categories are.
     */
    get: operations["ListSections"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections/{section_id}": {
    /**
     * Show Section
     * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     * * Anonymous users
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | categories    | the category
     * | translations  | the section and category translations, if any
     *
     * Unlike other sideloads, translations are embedded within the section since they're
     * not shared between resources.
     * [Category](/api-reference/help_center/help-center-api/categories) translations are only sideloaded if categories are.
     */
    get: operations["ShowSection"];
    /**
     * Update Section
     * @description Update section. This endpoint updates section-level data, specifically:
     *
     * * name (in the source locale)
     * * description (in the source locale)
     * * position
     * * sorting
     * * category_id
     * * parent_section_id
     * * theme_template
     *
     * To update non-source section translations, see [Translations](/api-reference/help_center/help-center-api/translations).
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    put: operations["UpdateSection"];
    /**
     * Delete Section
     * @description **WARNING: All articles in the section will also be deleted.**
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    delete: operations["DeleteSection"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections/{section_id}/articles": {
    /** Create Article */
    post: operations["CreateArticle"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections/{section_id}/source_locale": {
    /**
     * Update Section Source Locale
     * @description This endpoint lets you set a section's source language to something other
     * than the default language of your Help Center. For example, if the default language
     * of your Help Center is English but your KB has a section only for Japanese customers,
     * you can set the section's source locale to 'ja'.
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    put: operations["UpdateSectionSourceLocale"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections/{section_id}/subscriptions": {
    /**
     * List Section Subscriptions
     * @description Lists the subscriptions to a given [section](/api-reference/help_center/help-center-api/sections).
     *
     * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * For end-users, the response will list only the subscriptions created by the
     * requesting end-user.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | users
     * | sections      | sections
     * | translations  | translations of any sideloaded articles and sections
     *
     * To sideload the section translations, specify the `translations` sideload in
     * addition to `sections`.
     */
    get: operations["ListSectionSubscriptions"];
    /**
     * Create Section Subscription
     * @description Creates a subscription to a given [section](/api-reference/help_center/help-center-api/sections).
     *
     * #### Allowed for
     *
     * * End-users
     *
     * Agents with the Help Center manager role can optionally supply a `user_id`
     * value. If provided, the user associated with `user_id` will be subscribed
     * to the section.
     */
    post: operations["CreateSectionSubscription"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
  };
  "/api/v2/help_center/{locale}/sections/{section_id}/subscriptions/{subscription_id}": {
    /**
     * Show Section Subscription
     * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     * | sections      | sections      | section subscriptions
     * | translations  | translations  | article or section subscriptions
     */
    get: operations["ShowSectionSubscription"];
    /**
     * Delete Section Subscription
     * @description Removes the specified subscription from the specified [section](/api-reference/help_center/help-center-api/sections).
     *
     * #### Allowed for
     *
     * * End users
     */
    delete: operations["DeleteSectionSubscription"];
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/attachments": {
    /**
     * List Article Attachments
     * @description Lists all the article's attachments.
     *
     * **Note**: By default the pagination returns the maximum attachments per page, which is 100.
     *
     * #### Allowed for
     *
     *  * Agents
     *  * End users, as long as they can view the associated article
     *
     * #### Pagination
     *   * Cursor pagination (recommended)
     *   * Offset pagination
     *
     *   See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListArticleAttachments"];
    /**
     * Create Article Attachment
     * @description Creates an attachment for the specified [article](/api-reference/help_center/help-center-api/articles). You can specify whether the
     * attachment is `inline` or not. The default is false.
     *
     * #### Allowed for
     *
     * * Agents
     */
    post: operations["CreateArticleAttachment"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/attachments/{article_attachment_id}": {
    /**
     * Show Article Attachment
     * @description Shows the properties of the specified attachment.
     *
     * **Note**: Omit `{/article_id}` to access unassociated article attachments.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users, as long as they can view the associated article
     */
    get: operations["ShowArticleAttachment"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
        article_attachment_id: components["parameters"]["ArticleAttachmentId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/attachments/block": {
    /**
     * List Article Block Attachments
     * @description Lists all the article's block attachments. Block attachments are those that are not inline.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users, as long as they can view the associated article
     */
    get: operations["ListBlockArticleAttachments"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/attachments/inline": {
    /**
     * List Article Inline Attachments
     * @description Lists all the article's inline attachments.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users, as long as they can view the associated article
     */
    get: operations["ListInlineArticleAttachments"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/translations": {
    /**
     * List Translations
     * @description Lists all translations for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories).
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * For end users, the response will list only the translations for articles, sections, or categories that they can view in Help Center.
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListTranslations"];
    /**
     * Create Translation
     * @description Creates a translation for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories). Any locale
     * that you specify must be enabled for the current Help Center. The locale must also be
     * different from that of any existing translation associated with the source object.
     *
     * #### Allowed for
     *
     * * Help Center Managers
     * * Agents (article translations only)
     *
     * The requesting agent can create an article translation only if they can edit the article in Help Center.
     */
    post: operations["CreateTranslation"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/translations/{locale}": {
    /**
     * Show Translation
     * @description #### Allowed for
     *
     * * Agents
     * * End-users
     */
    get: operations["ShowTranslation"];
    /**
     * Update Translation
     * @description When updating a translation, any locale that you specify must be enabled for
     * the current Help Center. If you change the translation locale, it must be
     * different from that of any existing translation associated with the same
     * source object.
     *
     * #### Allowed for
     *
     * * Agents (only articles)
     */
    put: operations["UpdateTranslation"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
        locale: components["parameters"]["RequiredLocale"];
      };
    };
  };
  "/api/v2/help_center/articles/{article_id}/translations/missing": {
    /**
     * List Missing Translations
     * @description Lists the locales that don't have a translation for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories).
     *
     * #### Allowed for
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListMissingTranslations"];
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
  };
  "/api/v2/help_center/articles/attachments": {
    /**
     * Create Unassociated Attachment
     * @description You can use this endpoint for bulk imports. It lets you upload a file without associating it
     * to an article until later. See [Associate Attachments in Bulk to Article](/api-reference/help_center/help-center-api/articles#associate-attachments-in-bulk-to-article).
     *
     * *Note:* Associate attachments to articles as soon as possible. For example, if you use the endpoint to bulk-import inline images, only signed-in end users can see the images; anonymous users don't have permission to view unassociated images. Also, from time to time, we purge old article attachments not associated to any article. To ensure you don't lose an uploaded file, associate it to an article.
     *
     * #### Allowed for
     *
     *   * Agents
     */
    post: operations["CreateAttachment"];
  };
  "/api/v2/help_center/articles/attachments/{article_attachment_id}": {
    /**
     * Delete Article Attachment
     * @description #### Allowed for
     *
     * * Agents
     */
    delete: operations["DeleteArticleAttachment"];
    parameters: {
      path: {
        article_attachment_id: components["parameters"]["ArticleAttachmentId"];
      };
    };
  };
  "/api/v2/help_center/articles/labels": {
    /**
     * List All Labels
     * @description Lists all the labels in the articles in Help Center.
     *
     * #### Allowed for
     *
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListAllArticleLabels"];
  };
  "/api/v2/help_center/articles/labels/{label_id}": {
    /**
     * Show Label
     * @description Shows the properties of the specified label.
     *
     * #### Allowed for
     *
     * * Agents
     */
    get: operations["ShowLabel"];
    /**
     * Delete Label
     * @description Removes the label from all articles and deletes it.
     *
     * #### Allowed for
     *
     * * Agents
     */
    delete: operations["DeleteLabel"];
    parameters: {
      path: {
        label_id: components["parameters"]["LabelId"];
      };
    };
  };
  "/api/v2/help_center/articles/search": {
    /**
     * Search Articles
     * @description Returns a default number of 25 articles per page, up to a maximum of 1000 results. See [Pagination](/api-reference/introduction/pagination/). The `per_page` parameter, if provided, must be an integer between 1 and 100.
     *
     * The `page` parameter, if provided, must be an integer greater than 0.
     *
     * The results are sorted by relevance by default. You can also sort the results by `created_at` or `updated_at`.
     *
     * The [article objects](/api-reference/help_center/help-center-api/articles) returned by the search endpoint contain two additional properties:
     *
     * | Name        | Type   | Read-only | Mandatory | Comment
     * |-------------|--------|-----------|-----------|-------
     * | result_type | string | yes       | no        | For articles, always the string "article"
     * | snippet     | string | yes       | no        | The portion of an article that is relevant to the search query, with matching words or phrases delimited by `<em></em>` tags. Example: a query for "carrot potato" might return the snippet "...don't confuse `<em>`carrots`</em>` with `<em>`potatoes`</em>`..."
     *
     * You must specify at least one of the following parameters in your request:
     *
     * - query
     * - category
     * - section
     * - label_names
     *
     * #### Pagination
     *
     * - Offset pagination only
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 articles per page.
     *
     * #### Allowed for
     *
     * * Anonymous users
     */
    get: operations["ArticleSearch"];
  };
  "/api/v2/help_center/community_posts/search": {
    /**
     * Search Posts
     * @description Returns a maximum of 25 posts per page, up to a maximum of 1000 results. See [Pagination](/api-reference/introduction/pagination/).
     *
     * The results are sorted by relevance by default. You can also sort the results by `created_at` or `updated_at`.
     *
     * #### Pagination
     *
     * - Offset pagination only
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * Returns a maximum of 100 articles per page.
     *
     * #### Allowed for
     *
     * * End users
     */
    get: operations["CommunityPostSearch"];
  };
  "/api/v2/help_center/locales": {
    /**
     * List Enabled Locales and Default Locale
     * @description #### Allowed for
     *
     *  * Agents
     *  * End users
     */
    get: operations["ListLocales"];
  };
  "/api/v2/help_center/translations/{translation_id}": {
    /**
     * Delete Translation
     * @description Deletes a translation, provided it's not the only translation for the source object.
     *
     * #### Allowed for
     *
     * * Agents
     */
    delete: operations["DeleteTranslation"];
    parameters: {
      path: {
        translation_id: components["parameters"]["TranslationId"];
      };
    };
  };
  "/api/v2/help_center/user_segments": {
    /**
     * List User Segments
     * @description Some user segments can only be applied to sections and topics on certain Guide plans. For instance, user segments with a `user_type` of `"staff"` cannot be applied to sections and topics on accounts on the Guide Lite plan or the Suite Team plan. To request only user segments applicable on the account's current Suite plan, use the `/api/v2/help_center/user_segments/applicable.json` endpoint.
     *
     * The `/api/v2/help_center/users/{user_id}/user_segments.json` endpoint returns the list of user segments that a particular user belongs to. This is the only list endpoint that agents have access to. When an agent makes a request to this endpoint with another user's id, the response only includes user segments that the requesting agent also belongs to.
     *
     * These endpoints support pagination, as described in the [pagination documentation](/api-reference/introduction/pagination/).
     *
     * #### Allowed for
     *
     * * Help Center managers
     * * Agents
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListUserSegments"];
    /**
     * Create User Segment
     * @description #### Allowed for
     *
     * * Help Center managers
     */
    post: operations["CreateUserSegment"];
  };
  "/api/v2/help_center/user_segments/{user_segment_id}": {
    /**
     * Show User Segment
     * @description #### Allowed for
     *
     * * Help Center managers
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ShowUserSegment"];
    /**
     * Update User Segment
     * @description #### Allowed for
     *
     * * Help Center managers
     */
    put: operations["UpdateUserSegment"];
    /**
     * Delete User Segment
     * @description #### Allowed for
     *
     * * Help Center managers
     */
    delete: operations["DeleteUserSegment"];
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
  };
  "/api/v2/help_center/user_segments/{user_segment_id}/sections": {
    /**
     * List Sections with User Segment
     * @description Lists the sections that use the specified user segment.
     *
     * This endpoint supports pagination as described in [Pagination](/api-reference/help_center/help-center-api/help-center-api/#pagination).
     *
     * #### Allowed for
     *
     * * Help Center managers
     */
    get: operations["ListUserSegmentSections"];
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
  };
  "/api/v2/help_center/user_segments/{user_segment_id}/topics": {
    /**
     * List Topics with User Segment
     * @description Lists the topics that use the specified user segment.
     *
     * This endpoint supports pagination as described in [Pagination](/api-reference/help_center/help-center-api/help-center-api/#pagination).
     *
     * #### Allowed for
     *
     * * Help Center managers
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListUserSegmentTopics"];
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
  };
  "/api/v2/help_center/users/{user_id}/subscriptions": {
    /**
     * List Content Subscriptions By User
     * @description Lists the content subscriptions of a given user. To list your own subscriptions,
     * specify `me` as the user id.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     * | articles      | articles      | article subscriptions
     * | sections      | sections      | section subscriptions
     * | questions     | questions     | question subscriptions
     * | topics        | topics        | topic subscriptions
     * | translations  | translations  | article or section subscriptions
     */
    get: operations["ListContentSubscriptionsByUserId"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/help_center/users/{user_id}/user_subscriptions": {
    /**
     * List User Subscriptions By User
     * @description Lists the user subscriptions of a given user. To list your own subscriptions,
     * specify `me` as the user id.
     *
     * #### Allowed for
     *
     * * Agents
     * * End-users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     *
     * #### Sideloads
     *
     * The following sideloads are supported:
     *
     * | Name          | Will sideload | For
     * |---------------|---------------|----
     * | users         | users         | all
     */
    get: operations["ListUserSubscriptionsByUserId"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/help_center/users/{user_id}/votes": {
    /**
     * List Votes
     * @description Lists all votes cast by a given user, or all votes cast by all users for a given article, article comment, post, or post comment.
     *
     * To list only your own votes, specify `me` as the user id.
     *
     * The `{locale}` for article and article comment votes is required only for end users. Admins and agents can omit it.
     *
     * #### Allowed for
     *
     * * Agents
     * * End users
     *
     * #### Pagination
     *
     * * Cursor pagination (recommended)
     * * Offset pagination
     *
     * See [Pagination](/api-reference/introduction/pagination/).
     */
    get: operations["ListUserVotes"];
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
  };
  "/api/v2/help_center/votes/{vote_id}": {
    /**
     * Show Vote
     * @description #### Allowed for
     *
     * * Agents
     * * End users
     *
     * #### Sideloads
     * The following sideloads are supported:
     *
     * | Name          | Will sideload
     * |---------------|--------------
     * | users         | authors
     * | articles      | articles
     * | translations  | translations of any sideloaded articles
     * | posts         | posts
     * | comments      | comments
     *
     * Note that you must sideload `articles` in order to sideload `translations`.
     */
    get: operations["ShowVote"];
    /**
     * Delete Vote
     * @description #### Allowed for
     *
     * * Agents
     * * End users
     */
    delete: operations["DeleteVote"];
    parameters: {
      path: {
        vote_id: components["parameters"]["VoteId"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "article_id": 23,
     *   "content_type": "application/pdf",
     *   "content_url": "https://company.zendesk.com/hc/article_attachments/200109629/party_invitation.pdf",
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "file_name": "party_invitation.pdf",
     *   "id": 1428,
     *   "inline": false,
     *   "size": 58298
     * }
     */
    ArticleAttachmentObject: {
      /** @description The associated article, if present */
      article_id?: number;
      /** @description The file type. Example: image/png */
      content_type?: string;
      /** @description URL where the attachment file can be downloaded */
      content_url?: string;
      /** @description The time the article attachment was created */
      created_at?: string;
      /** @description The file name */
      file_name?: string;
      /** @description Assigned ID when the article attachment is created */
      id?: number;
      /** @description The attached file is shown in the admin interface for inline attachments. Its URL can be referenced in the article's HTML body. Inline attachments are image files directly embedded in the article body. If false, the attachment is listed in the list of attachments. The default value is false */
      inline?: boolean;
      /** @description The attachment file size in bytes */
      size?: number;
      /** @description The time the article attachment was last updated */
      updated_at?: string;
      /** @description The URL of the article attachment */
      url?: string;
    };
    ArticleAttachmentResponse: {
      article_attachment?: components["schemas"]["ArticleAttachmentObject"];
    };
    ArticleAttachmentsResponse: {
      article_attachments?: components["schemas"]["ArticleAttachmentObject"][];
    };
    /**
     * @example {
     *   "author_id": 3465,
     *   "comments_disabled": false,
     *   "id": 1635,
     *   "locale": "en",
     *   "permission_group_id": 13,
     *   "title": "The article",
     *   "user_segment_id": 12
     * }
     */
    ArticleObject: {
      /** @description The id of the user who wrote the article (set to the user who made the request on create by default) */
      author_id?: number;
      /** @description HTML body of the article. Unsafe tags and attributes may be removed before display. For a list of safe tags and attributes, see [Allowing unsafe HTML in Help Center articles](https://support.zendesk.com/hc/en-us/articles/115015895948) in Zendesk help */
      body?: string;
      /** @description True if comments are disabled; false otherwise */
      comments_disabled?: boolean;
      /** @description The list of content tags attached to the article */
      content_tag_ids?: string[];
      /** @description The time the article was created */
      created_at?: string;
      /** @description True if the translation for the current locale is a draft; false otherwise. false by default. Can be set when creating but not when updating. For updating, see Translations */
      draft?: boolean;
      /** @description The time the article was last edited in its displayed locale */
      edited_at?: string;
      /** @description The url of the article in Help Center */
      html_url?: string;
      /** @description Automatically assigned when the article is created */
      id?: number;
      /** @description An array of label names associated with this article. By default no label names are used. Only available on certain plans */
      label_names?: string[];
      /** @description The locale that the article is being displayed in */
      locale: string;
      /** @description Deprecated. Always false because the source translation is always the most up-to-date translation */
      outdated?: boolean;
      /** @description Locales in which the article was marked as outdated */
      outdated_locales?: readonly string[];
      /** @description The id of the permission group which defines who can edit and publish this article */
      permission_group_id: number;
      /** @description The position of this article in the article list. 0 by default */
      position?: number;
      /** @description True if this article is promoted; false otherwise. false by default */
      promoted?: boolean;
      /** @description The id of the section to which this article belongs */
      section_id?: number;
      /** @description The source (default) locale of the article */
      source_locale?: string;
      /** @description The title of the article */
      title: string;
      /** @description The time the article was last updated */
      updated_at?: string;
      /** @description The API url of the article */
      url?: string;
      /** @description The id of the user segment which defines who can see this article. Set to null to make it accessible to everyone */
      user_segment_id: number | null;
      /** @description The total number of upvotes and downvotes */
      vote_count?: number;
      /** @description The sum of upvotes (+1) and downvotes (-1), which may be positive or negative */
      vote_sum?: number;
    };
    ArticleRequest: {
      article: {
        /** @example Use a tripod */
        body?: string;
        /** @example en-us */
        locale: string;
        /**
         * @default 0
         * @example 56
         */
        permission_group_id: number;
        /** @example Taking photos in low light */
        title: string;
        /** @example 123 */
        user_segment_id: number;
      };
      /** @example false */
      notify_subscribers?: boolean;
    };
    ArticleResponse: {
      article?: components["schemas"]["ArticleObject"];
    };
    ArticleSearchResponse: {
      /**
       * @description For articles, always the string `article`
       * @default article
       */
      result_type?: string;
      results?: components["schemas"]["ArticleObject"][];
      /** @description The portion of an article that is relevant to the search query, with matching words or phrases delimited by <em></em> tags. Example: a query for `carrot potato` might return the snippet `...don't confuse <em>carrots</em> with <em>potatoes</em>...` */
      snippet?: string;
    };
    ArticlesResponse: {
      articles?: components["schemas"]["ArticleObject"][];
    };
    /**
     * @example {
     *   "errors": {
     *     "field_name_with_error": [
     *       "cannot process this field"
     *     ]
     *   }
     * }
     */
    BadRequestErrorResponse: {
      errors?: {
        [key: string]: unknown;
      };
    };
    CategoriesResponse: {
      categories?: components["schemas"]["CategoryObject"][];
    };
    /**
     * @example {
     *   "description": "",
     *   "html_url": "https://company.zendesk.com/hc/en-us/categories/354362577",
     *   "id": 1635,
     *   "locale": "en-us",
     *   "name": "Self Help Articles",
     *   "source_locale": "en-us",
     *   "url": "https://company.zendesk.com/api/v2/help_center/categories/354362577"
     * }
     */
    CategoryObject: {
      /**
       * Format: date-time
       * @description The time at which the category was created
       */
      created_at?: string;
      /** @description The description of the category */
      description?: string;
      /** @description The url of this category in Help Center */
      html_url?: string;
      /** @description Automatically assigned when creating categories */
      id: number;
      /** @description The locale where the category is displayed */
      locale: string;
      /** @description The name of the category */
      name: string;
      /** @description Whether the category is out of date */
      outdated?: boolean;
      /** @description The position of this category relative to other categories */
      position?: number;
      /** @description The source (default) locale of the category */
      source_locale?: string;
      /**
       * Format: date-time
       * @description The time at which the category was last updated
       */
      updated_at?: string;
      /** @description The API url of this category */
      url?: string;
    };
    CategoryResponse: {
      category?: components["schemas"]["CategoryObject"];
    };
    /**
     * @example {
     *   "author_id": 3465,
     *   "body": "Thanks for your help!",
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "id": 1635,
     *   "locale": "en-us",
     *   "source_id": 65466,
     *   "source_type": "Article"
     * }
     */
    CommentObject: {
      /** @description The id of the author of this comment. Writable on create by Help Center managers. See [Create Comment](#create-comment) */
      author_id?: number;
      /** @description The comment made by the author. See [User content](#user-content) */
      body: string;
      /** @description The time the comment was created. Writable on create by Help Center managers. See [Create Comment](#create-comment) */
      created_at?: string;
      /** @description The url at which the comment is presented in Help Center */
      html_url?: string;
      /** @description Automatically assigned when the comment is created */
      id?: number;
      /** @description The locale in which this comment was made */
      locale: string;
      /** @description The user id of whoever performed the most recent (if any) non-author edit. A non-author edit consists of an edit make by a user other than the author that creates or updates the `body` or `author_id`. Note that only edits made after May 17, 2021 will be reflected in this field. If no non-author edits have occured since May 17, 2021, then this field will be `null`. */
      non_author_editor_id?: number;
      /**
       * Format: date-time
       * @description When the comment was last edited by a non-author user
       */
      non_author_updated_at?: string;
      /** @description The id of the item on which this comment was made */
      source_id?: number;
      /** @description The type of the item on which this comment was made. Currently only supports 'Article' */
      source_type?: string;
      /** @description The time at which the comment was last updated */
      updated_at?: string;
      /** @description The API url of this comment */
      url?: string;
      /** @description The total number of upvotes and downvotes */
      vote_count?: number;
      /** @description The sum of upvotes (+1) and downvotes (-1), which may be positive or negative */
      vote_sum?: number;
    };
    CommentResponse: {
      comment?: components["schemas"]["CommentObject"];
    };
    CommentsResponse: {
      comments?: components["schemas"]["CommentObject"][];
    };
    CommunityPostSearchResponse: {
      results?: components["schemas"]["PostObject"][];
    };
    /**
     * @example {
     *   "content_id": 65466,
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "id": 1635,
     *   "locale": "en-us",
     *   "user_id": 3465
     * }
     */
    ContentSubscriptionObject: {
      /** @description The id of the subscribed item */
      content_id?: number;
      /** @description The type of the subscribed item */
      content_type?: string;
      /** @description The time at which the subscription was created */
      created_at?: string;
      /** @description Automatically assigned when the subscription is created */
      id?: number;
      /** @description Subscribe also to article comments / post comments. Only for section / topic subscriptions. */
      include_comments?: boolean;
      /** @description The locale of the subscribed item */
      locale: string;
      /** @description Used only for [Create Section Subscription](#create-section-subscription) and [Create Article Subscription](#create-article-subscription), where it's mandatory. Selects the locale of the content to be subscribed */
      source_locale?: string;
      /** @description The time at which the subscription was last updated */
      updated_at?: string;
      /** @description The API url of the subscription */
      url?: string;
      /** @description The id of the user who has this subscription */
      user_id?: number;
    };
    ContentSubscriptionsResponse: {
      subscriptions?: components["schemas"]["ContentSubscriptionObject"][];
    };
    CreateUserImageResponse: {
      user_image?: {
        content_type?: string;
        path?: string;
        size?: number;
      };
    };
    /**
     * @example {
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "id": 2003,
     *   "name": "instructions"
     * }
     */
    LabelObject: {
      /** @description The time at which the label was created */
      created_at?: string;
      /** @description Automatically assigned when the label is created */
      id?: number;
      /** @description The actual name of the label */
      name: string;
      /** @description The time at which the label was last updated */
      updated_at?: string;
      /** @description The API url of this label */
      url?: string;
    };
    LabelResponse: {
      label?: components["schemas"]["LabelObject"];
    };
    LabelsResponse: {
      labels?: components["schemas"]["LabelObject"][];
    };
    LocalesResponse: {
      locales?: string[];
    };
    LocalesWithDefaultResponse: {
      default_locale?: string;
      locales?: string[];
    };
    /**
     * @example {
     *   "author_id": 89567,
     *   "body": "My printer is on fire!",
     *   "id": 35467,
     *   "official": false,
     *   "vote_count": 15,
     *   "vote_sum": 10
     * }
     */
    PostCommentObject: {
      /** @description The id of the author of the comment. Writable on create by Help Center managers. See [Create Post Comment](#create-post-comment) */
      author_id?: number;
      /** @description The comment made by the author. See [User content](#user-content) */
      body: string;
      /** @description When the comment was created. Writable on create by Help Center managers. See [Create Post Comment](#create-post-comment) */
      created_at?: string;
      /** @description The community url of the comment */
      html_url?: string;
      /** @description Automatically assigned when the comment is created */
      id?: number;
      /** @description The user id of whoever performed the most recent (if any) non-author edit. A non-author edit consists of an edit make by a user other than the author that creates or updates the `body`. Note that only edits made after May 17, 2021 will be reflected in this field. If no non-author edits have occured since May 17, 2021, then this field will be `null`. */
      non_author_editor_id?: number;
      /**
       * Format: date-time
       * @description When the comment was last edited by a non-author user
       */
      non_author_updated_at?: string;
      /** @description Whether the comment is marked as official */
      official?: boolean;
      /** @description The id of the post on which the comment was made */
      post_id?: number;
      /** @description When the comment was last updated */
      updated_at?: string;
      /** @description The API url of the comment */
      url?: string;
      /** @description The total number of upvotes and downvotes */
      vote_count?: number;
      /** @description The sum of upvotes (+1) and downvotes (-1), which may be positive or negative */
      vote_sum?: number;
    };
    PostCommentResponse: {
      comment?: components["schemas"]["PostCommentObject"];
    };
    PostCommentsResponse: {
      comments?: components["schemas"]["PostCommentObject"][];
    };
    /**
     * @example {
     *   "author_id": 3465,
     *   "featured": true,
     *   "id": 1635,
     *   "title": "The post"
     * }
     */
    PostObject: {
      /** @description The id of the author of the post. *Writable on create by Help Center managers -- see Create Post */
      author_id?: number;
      /** @description Whether further comments are allowed */
      closed?: boolean;
      /** @description The number of comments on the post */
      comment_count?: number;
      /** @description The list of content tags attached to the post */
      content_tag_ids?: number[];
      /**
       * Format: date-time
       * @description When the post was created. Writable on create by Help Center managers -- see [Create Post](#create-post)
       */
      created_at?: string;
      /** @description The details of the post made by the author. See [User content](#user-content) */
      details?: string;
      /** @description Whether the post is featured */
      featured?: boolean;
      /** @description The number of followers of the post */
      follower_count?: number;
      /** @description The community url of the post */
      html_url?: string;
      /** @description Automatically assigned when the post is created */
      id?: number;
      /** @description The user id of whoever performed the most recent (if any) non-author edit. A non-author edit consists of an edit make by a user other than the author that creates or updates the `title` or `details`. Note that only edits made after May 17, 2021 will be reflected in this field. If no non-author edits have occured since May 17, 2021, then this field will be `null`. */
      non_author_editor_id?: number;
      /**
       * Format: date-time
       * @description When the post was last edited by a non-author user
       */
      non_author_updated_at?: string;
      /** @description When true, pins the post to the top of its topic */
      pinned?: boolean;
      /** @description The status of the post. Possible values: "planned", "not_planned" , "answered", or "completed" */
      status?: string;
      /** @description The title of the post */
      title: string;
      /** @description The id of the topic that the post belongs to */
      topic_id?: number;
      /**
       * Format: date-time
       * @description When the post was last updated
       */
      updated_at?: string;
      /** @description The API url of the post */
      url?: string;
      /** @description The total number of upvotes and downvotes */
      vote_count?: number;
      /** @description The sum of upvotes (+1) and downvotes (-1), which may be positive or negative */
      vote_sum?: number;
    };
    PostResponse: {
      post?: components["schemas"]["PostObject"];
    };
    PostsResponse: {
      posts?: components["schemas"]["PostObject"][];
    };
    RequestUserImageUploadResponse: {
      upload?: {
        headers?: {
          [key: string]: unknown;
        };
        token?: string;
        url?: string;
      };
    };
    SearchObject: {
      /** @description An array with the base articles or community posts */
      results: (components["schemas"]["ArticleObject"] | components["schemas"]["PostCommentObject"])[];
    };
    /**
     * @example {
     *   "category_id": 3465,
     *   "description": "This section contains tricks for the airborne",
     *   "id": 1635,
     *   "locale": "en-us",
     *   "name": "Avionics"
     * }
     */
    SectionObject: {
      /** @description The id of the category to which this section belongs */
      category_id?: number;
      /** @description The time at which the section was created */
      created_at?: string;
      /** @description The description of the section */
      description?: string;
      /** @description The url of this section in HC */
      html_url?: string;
      /** @description Automatically assigned when creating subscriptions */
      id?: number;
      /** @description The locale in which the section is displayed */
      locale: string;
      /** @description The name of the section */
      name: string;
      /** @description Whether the section is out of date */
      outdated?: boolean;
      /** @description The id of the section to which this section belongs. Only writable for Guide Enterprise customers */
      parent_section_id?: number | null;
      /** @description The position of this section in the section list. Used when sorting is set to ´manual´. By default the section is added to the end of the list */
      position?: number;
      /** @description The source (default) locale of the section */
      source_locale?: string;
      /**
       * @description The theme template name used to display this section in Help Center.
       * @example section_template
       */
      theme_template?: string;
      /** @description The time at which the section was last updated */
      updated_at?: string;
      /** @description The API url of this section */
      url?: string;
    };
    SectionPutRequest: {
      section: {
        /** @description The id of the category to which this section belongs */
        category_id?: number;
        /** @description The description of the section */
        description?: string;
        /** @description The name of the section */
        name?: string;
        /** @description The id of the section to which this section belongs. Only writable for Guide Enterprise customers */
        parent_section_id?: number;
        /** @description The position of this section in the section list. Used when sorting is set to ´manual´. */
        position?: number;
        /**
         * @description Defines the type of sorting used in this section
         * @enum {string}
         */
        sorting?: "manual" | "title" | "creation_desc" | "creation_asc";
        /**
         * @description The theme template name used to display this section in Help Center.
         * @example section_template
         */
        theme_template?: string;
      };
    };
    SectionResponse: {
      section?: components["schemas"]["SectionObject"];
    };
    SectionsResponse: {
      sections?: components["schemas"]["SectionObject"][];
    };
    SubscriptionResponse: {
      subscription?: components["schemas"]["ContentSubscriptionObject"];
    };
    /**
     * @description The `manageable_by` attribute takes one of the following values:
     *
     * | Value     | Users                       |
     * |-----------|---------------------------- |
     * | staff     | agents and managers         |
     * | managers  | only Help Center managers   |
     *
     * Note that `manageable_by` is only displayed to users who can manage the topic.
     *
     * @example {
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "description": "Security Best Practices",
     *   "follower_count": 332,
     *   "id": 1635,
     *   "manageable_by": "staff",
     *   "name": "Security"
     * }
     */
    TopicObject: {
      /** @description When the topic was created */
      created_at?: string;
      /** @description The description of the topic. By default an empty string */
      description?: string | null;
      /** @description The number of users following the topic */
      follower_count?: number;
      /** @description The community url of the topic */
      html_url?: string;
      /** @description Automatically assigned when the topic is created */
      id?: number;
      /**
       * @description The set of users who can manage this topic.
       * @enum {string}
       */
      manageable_by?: "staff" | "managers";
      /** @description The name of the topic */
      name: string;
      /** @description The position of the topic relative to other topics in the community */
      position?: number;
      /** @description When the topic was last updated */
      updated_at?: string;
      /** @description The API url of the topic */
      url?: string;
      /** @description The id of the user segment to which this topic belongs */
      user_segment_id?: number | null;
    };
    TopicResponse: {
      topic?: components["schemas"]["TopicObject"];
    };
    TopicsResponse: {
      topics?: components["schemas"]["TopicObject"][];
    };
    /**
     * @example {
     *   "id": 3243452,
     *   "locale": "en",
     *   "source_id": 768934,
     *   "source_type": "Article",
     *   "title": "Hello translation"
     * }
     */
    TranslationObject: {
      /** @description HTML body of the translation. Empty by default */
      body?: string;
      /** @description The time at which the translation was created */
      created_at?: string;
      /** @description The id of the user who created the translation */
      created_by_id?: number;
      /** @description True if the translation is a draft; false otherwise. False by default */
      draft?: boolean;
      /** @description The url of the translation in Help Center */
      html_url?: string;
      /** @description Automatically assigned when a translation is created */
      id?: number;
      /** @description The locale of the translation */
      locale: string;
      /** @description True if the translation is outdated; false otherwise. False by default */
      outdated?: boolean;
      /** @description The id of the item that has this translation */
      source_id?: number;
      /** @description The type of the item that has this translation. Can be "article", "section", or "category". */
      source_type?: string;
      /** @description The title of the translation */
      title: string;
      /** @description The time at which the translation was last updated */
      updated_at?: string;
      /** @description The id of the user who last updated the translation */
      updated_by_id?: number | null;
      /** @description The API url of the translation */
      url?: string;
    };
    TranslationResponse: {
      translation?: components["schemas"]["TranslationObject"];
    };
    TranslationsResponse: {
      translations?: components["schemas"]["TranslationObject"][];
    };
    UnifiedSearchResult: {
      title?: string;
      /** @enum {string} */
      type?: "ARTICLE" | "POST" | "EXTERNAL_RECORD";
      /** Format: date-time */
      updated_at?: string;
      url?: string;
    };
    UnifiedSearchResultSet: {
      meta?: {
        after_cursor?: string;
        before_cursor?: string;
        has_more?: boolean;
      };
      results?: components["schemas"]["UnifiedSearchResult"][];
    };
    /**
     * @description The `user_type` attribute takes one of the following values:
     *
     * | Value               | Users                                |
     * |---------------------|--------------------------------------|
     * | signed_in_users     | only authenticated users             |
     * | staff               | only agents and Help Center managers |
     *
     *
     * For `group_ids`, `organization_ids`, `tags`, and `or_tags`,
     * an empty array means that access is not restricted by the attribute. For example,
     * if no group ids are specified, then users don't have to be in any specific group to
     * have access.
     *
     * For `tags`, a user must have all the listed tags to have access. For `or_tags`, a
     * user must have at least one of the listed tags to have access.
     *
     * @example {
     *   "built_in": false,
     *   "created_at": "2017-07-20T22:55:29Z",
     *   "group_ids": [
     *     12
     *   ],
     *   "name": "VIP agents",
     *   "organization_ids": [
     *     42
     *   ],
     *   "tags": [
     *     "vip"
     *   ],
     *   "updated_at": "2017-07-23T21:43:28Z",
     *   "user_type": "staff"
     * }
     */
    UserSegmentObject: {
      /** @description Whether the user segment is built-in. Built-in user segments cannot be modified */
      built_in?: boolean;
      /** @description When the user segment was created */
      created_at?: string;
      /** @description The ids of the groups that have access */
      group_ids?: number[];
      /** @description Automatically assigned when the user segment is created */
      id?: number;
      /** @description User segment name (localized to the locale of the current user for built-in user segments) */
      name?: string;
      /** @description A user must have at least one tag in the list to have access */
      or_tags?: string[];
      /** @description The ids of the organizations that have access */
      organization_ids?: number[];
      /** @description All the tags a user must have to have access */
      tags?: string[];
      /** @description When the user segment was last updated */
      updated_at?: string;
      /** @description The set of users who can view content */
      user_type: string;
    };
    UserSegmentResponse: {
      user_segment?: components["schemas"]["UserSegmentObject"];
    };
    UserSegmentsResponse: {
      user_segments?: components["schemas"]["UserSegmentObject"][];
    };
    /**
     * @example {
     *   "followed_id": 65466,
     *   "follower_id": 98354,
     *   "id": 1635
     * }
     */
    UserSubscriptionObject: {
      /** @description The id of the user being followed */
      followed_id: number;
      /** @description The id of the user doing the following */
      follower_id: number;
      /** @description Automatically assigned when the subscription is created */
      id: number;
    };
    UserSubscriptionsResponse: {
      user_subscriptions?: components["schemas"]["UserSubscriptionObject"][];
    };
    /**
     * @example {
     *   "created_at": "2012-04-04T09:14:57Z",
     *   "id": 1635,
     *   "item_id": 65466,
     *   "item_type": "Article",
     *   "user_id": 3465,
     *   "value": 1
     * }
     */
    VoteObject: {
      /** @description The time at which the vote was created */
      created_at?: string;
      /** @description Automatically assigned when the vote is created */
      id?: number;
      /** @description The id of the item for which this vote was cast */
      item_id?: number;
      /** @description The type of the item. Can be "Article", "Comment", "Post" or "PostComment" */
      item_type?: string;
      /** @description The time at which the vote was last updated */
      updated_at?: string;
      /** @description The API url of this vote */
      url?: string;
      /** @description The id of the user who cast this vote */
      user_id?: number;
      /** @description The value of the vote */
      value: number;
    };
    VoteResponse: {
      vote?: components["schemas"]["VoteObject"];
    };
    VotesResponse: {
      votes?: components["schemas"]["VoteObject"][];
    };
  };
  responses: never;
  parameters: {
    /**
     * @description The unique ID of the article attachment
     * @example 1428
     */
    ArticleAttachmentId: number;
    /**
     * @description The unique ID of the article
     * @example 360026053753
     */
    ArticleId: number;
    /** @description Sorts the articles by one of the accepted values */
    ArticlesSortBy?: "position" | "title" | "created_at" | "updated_at";
    /**
     * @description The unique ID of the category
     * @example 360002011513
     */
    CategoryId: number;
    /**
     * @description The unique ID of the comment
     * @example 360004163994
     */
    CommentId: number;
    /**
     * @description The unique ID of the label
     * @example 360015727233
     */
    LabelId: number;
    /**
     * @description The locale the item is displayed in
     * @example en-us
     */
    OptionalLocale: string;
    /**
     * @description The unique ID of the post comment
     * @example 360010837133
     */
    PostCommentId: number;
    /**
     * @description The unique ID of the post
     * @example 360039436873
     */
    PostId: number;
    /**
     * @description Mandatory locale parameter
     * @example en-us
     */
    RequiredLocale: string;
    /**
     * @description The unique ID of the section
     * @example 360004785313
     */
    SectionId: number;
    /** @description Sorts the results by one of the accepted values */
    SortBy?: "position" | "created_at" | "updated_at";
    /** @description Selects the order of the results */
    SortOrder?: "asc" | "desc";
    /**
     * @description The unique ID of the subscription
     * @example 1234
     */
    SubscriptionId: number;
    /**
     * @description The unique ID of the topic
     * @example 360001326113
     */
    TopicId: number;
    /**
     * @description The unique ID of the translation
     * @example 1234
     */
    TranslationId: number;
    /**
     * @description The unique ID of the user
     * @example 1234
     */
    UserId: number;
    /**
     * @description The unique ID of the user segment
     * @example 1234
     */
    UserSegmentId: number;
    /**
     * @description The unique ID of the vote
     * @example 35467
     */
    VoteId: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List Posts */
  ListPosts: {
    parameters: {
      query?: {
        /** @description Filter the results using the provided value */
        filter_by?: "planned" | "not_planned" | "completed" | "answered" | "none";
        /** @description Sorts the results using the provided value */
        sort_by?: "created_at" | "edited_at" | "updated_at" | "recent_activity" | "votes" | "comments";
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostsResponse"];
        };
      };
    };
  };
  /**
   * Create Post
   * @description Adds a post to the specified [topic](/api-reference/help_center/help-center-api/topics).
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * Agents with the Help Center manager role can optionally supply an
   * `author_id` as part of the `post` object. If it is provided, the post's
   * author will be set to the value of the `author_id` key.
   *
   * Agents with the Help Center manager role can optionally supply a `created_at` as part of the `post` object. If it is not provided `created_at` is set to the current time.
   *
   * Supplying a `notify_subscribers` property with a value of false will prevent subscribers to the post's topic from receiving a post creation email notification. This can be helpful when creating many posts at a time. Specify the property in the root of the JSON object, not in the "post" object.
   * Optionally, you can attach existing [content tags](/api-reference/help_center/help-center-api/content_tags) by specifying their ids.
   */
  CreatePost: {
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created article attachment
           * @example https://{subdomain}.zendesk.com/api/v2/community/posts.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
    };
  };
  /**
   * Show Post
   * @description Gets information about a given post.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name        | Will sideload
   * |-------------|--------------
   * | users       | authors
   * | topics      | topics
   */
  ShowPost: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
    };
  };
  /**
   * Update Post
   * @description #### Allowed for
   *
   * * Agents
   * * The end user who created the post
   */
  UpdatePost: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostResponse"];
        };
      };
    };
  };
  /**
   * Delete Post
   * @description #### Allowed for
   *
   * * Agents
   * * The end user who created the post
   */
  DeletePost: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Comments
   * @description Lists all comments on a specific post or all the comments created by a specific user.
   * When listing comments by specific user, the comments of the user making the request
   * can be listed by specifying `me` as the id.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   *
   * You can sideload related records with the `include` query string parameter. The following sideloads are supported:
   *
   * | Name   | Will sideload
   * |--------|--------------
   * | users  | authors
   * | posts  | posts
   *
   * See [Sideloading related records](/documentation/developer-tools/working-with-data/sideloading-related-records).
   */
  ListPostComments: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostCommentsResponse"];
        };
      };
    };
  };
  /**
   * Create Post Comment
   * @description Adds a comment to the specified post.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * Agents with the Help Center manager role can optionally supply an
   * `author_id` as part of the `comment` object. If it is provided, the
   * comment's author will be set to the value of the `author_id` key.
   *
   * Supplying a `notify_subscribers` property with a value of false
   * will prevent subscribers to the comment's post from receiving a comment
   * creation email notification. This can be helpful when creating many
   * comments at a time. Specify the property in the root of the JSON object, not in the "comment" object.
   */
  CreatePostComment: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description OK Response */
      201: {
        content: {
          "application/json": components["schemas"]["PostCommentResponse"];
        };
      };
    };
  };
  /**
   * Show Comment
   * @description Shows information about the specified comment.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name   | Will sideload
   * |--------|--------------
   * | users  | The comment's author
   * | posts  | The comment's post
   */
  ShowPostComment: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        post_comment_id: components["parameters"]["PostCommentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostCommentResponse"];
        };
      };
    };
  };
  /**
   * Update Comment
   * @description Updates the specified comment.
   *
   * #### Allowed for
   *
   * * Agents
   * * The end user who created the comment
   */
  UpdatePostComment: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        post_comment_id: components["parameters"]["PostCommentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostCommentResponse"];
        };
      };
    };
  };
  /**
   * Delete Comment
   * @description Deletes the specified comment.
   *
   * #### Allowed for
   *
   * * Agents
   * * The end user who created the comment
   */
  DeletePostComment: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        post_comment_id: components["parameters"]["PostCommentId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Post Subscriptions
   * @description Lists the subscriptions to a given post.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will list only the subscriptions created by the
   * requesting end-user.
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | users
   * | posts         | posts
   */
  ListPostSubscriptions: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * Create Post Subscription
   * @description Creates a subscription to a given [post](/api-reference/help_center/help-center-api/posts).
   *
   * #### Allowed for
   *
   * * End-users
   *
   * Agents with the Help Center manager role can optionally supply a
   * `subscription` object containing a `user_id` value. If provided,
   * the user associated with `user_id` will be subscrbed to the post.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  CreatePostSubscription: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
      };
    };
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created subscription
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{subscription_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Show Post Subscription
   * @description #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will only show a subscription created by the requesting end-user.
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   * | posts         | posts         | post subscriptions
   */
  ShowPostSubscription: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Post Subscription
   * @description Removes a subscription to a given [post](/api-reference/help_center/help-center-api/posts).
   *
   * #### Allowed for
   *
   * * End-users
   */
  DeletePostSubscription: {
    parameters: {
      path: {
        post_id: components["parameters"]["PostId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Topics
   * @description Lists all topics.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTopics: {
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TopicsResponse"];
        };
      };
    };
  };
  /**
   * Create Topic
   * @description #### Allowed for
   *
   * * Help Center managers
   *
   * Agents with the Help Center Manager role can optionally supply a `created_at` as part of the `topic` object. If it is not provided `created_at` is set to the current time.
   */
  CreateTopic: {
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created topic
           * @example https://{subdomain}.zendesk.com/api/v2/community/topics.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["TopicResponse"];
        };
      };
    };
  };
  /**
   * Show Topic
   * @description Shows information about a single topic.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   */
  ShowTopic: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TopicResponse"];
        };
      };
    };
  };
  /**
   * Update Topic
   * @description #### Allowed for
   *
   * * Help Center managers
   */
  UpdateTopic: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TopicResponse"];
        };
      };
    };
  };
  /**
   * Delete Topic
   * @description #### Allowed for
   *
   * * Help Center managers
   */
  DeleteTopic: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Topic Subscriptions
   * @description Lists the subscriptions to a given topic.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will list only the subscriptions created by the
   * requesting end-user.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | users
   * | topics        | topics
   */
  ListTopicSubscriptions: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * Create Topic Subscription
   * @description Creates a subscription to a given [topic](/api-reference/help_center/help-center-api/topics).
   *
   * #### Allowed for
   *
   * * End-users
   *
   * Agents with the Help Center manager role can optionally supply a `user_id`
   * value. If provided, the user associated with `user_id` will be subscribed
   * to the topic.
   */
  CreateTopicSubscription: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
      };
    };
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created subscription
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{subscription_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Show Topic Subscription
   * @description #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will only show a subscription created by the requesting end-user.
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   * | topics        | topics        | topic subscriptions
   */
  ShowTopicSubscription: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Update Topic Subscription
   * @description #### Allowed for
   *
   * * End-users
   */
  UpdateTopicSubscription: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Topic Subscription
   * @description Removes a subscription to a given [topic](/api-reference/help_center/help-center-api/topics).
   *
   * #### Allowed for
   *
   * * End-users
   */
  DeleteTopicSubscription: {
    parameters: {
      path: {
        topic_id: components["parameters"]["TopicId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /** Unified Search */
  UnifiedSearch: {
    parameters: {
      query: {
        /**
         * @description The search text to be matched or a search string
         *
         * @example carrot
         */
        query?: string;
        /**
         * @description Limit the search to these locales. See [Filtering by Locale](#filtering-by-locale)
         * @example en-us,en-gb
         */
        "filter[locales]": string;
        /**
         * @description Limit the search to articles in these categories. See [Filtering by Category](#filtering-by-category)
         * @example 42,43
         */
        "filter[category_ids]"?: string;
        /**
         * @description Limit the search to articles in these sections. See [Filtering by Section](#filtering-by-section)
         * @example 42,43
         */
        "filter[section_ids]"?: string;
        /**
         * @description Limit the search to posts in these topics. See [Filtering by Topic](#filtering-by-topic)
         * @example 42,43
         */
        "filter[topic_ids]"?: string;
        /**
         * @description Use this parameter to scope the result of your search to a specific external source or external sources.
         * If no external source is given, results are returned across all sources
         *
         * @example 01EC05A5T1J4ZSDJX4Q8JGFRHP
         */
        "filter[external_source_ids]"?: string;
        /**
         * @description Limit the search to articles or posts within these brands. If no brand is specified, results are returned across all brands.
         * If you want to scope the result of your search with multiple brands, separate each value with a comma
         *
         * @example 73,67
         */
        "filter[brand_ids]"?: string;
        /**
         * @description Limit the search to one of these content types: ARTICLE, POST.
         * At present, it is not possible to specify `EXTERNAL_RECORD`.
         * Instead, use the `filter[external_source_id]` parameter above
         *
         * @example ARTICLE,POST
         */
        "filter[content_types]"?: string;
        /** @description A string representing the cursor to the next page. */
        "page[after]"?: string;
        /**
         * @description A numeric value that indicates the maximum number of items that can
         * be included in a response. The value of this parameter has an upper
         * limit of 50. The default value is 10.
         */
        "page[size]"?: number;
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["UnifiedSearchResultSet"];
        };
      };
    };
  };
  /**
   * Create Image Path
   * @description Returns the image path that you can use to display the image in a community post.
   *
   * You should only use this endpoint after uploading the image. See [Uploading the image with the upload URL](#uploading-the-image-with-the-upload-url).
   *
   * #### Request Body Format
   * The request body must be a JSON object with the following properties:
   *
   * | Name         | Type   | Mandatory | Description |
   * | ------------ | ------ | --------- | ----------- |
   * | token        | string | true      | The image token. See [Create Image Upload URL and Token](#create-image-upload-url-and-token) |
   * | brand_id     | string | true      | The ID of the brand where this image was uploaded |
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   */
  CreateUserImage: {
    responses: {
      /** @description Created Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateUserImageResponse"];
        };
      };
    };
  };
  /**
   * Create Image Upload URL and Token
   * @description Returns an upload URL and token. Use the upload URL in a PUT request to upload the image to the help center. See [Uploading the image with the upload URL](#uploading-the-image-with-the-upload-url) below.
   *
   * After uploading the image, use the image token to create the image path. See [Create Image Path](#create-image-path).
   *
   * #### Uploading the image with the upload URL
   *
   * The endpoint returns an object with the `url` and `headers` properties:
   *
   * ```json
   * "headers": {
   *   "Content-Disposition": "attachment; filename=\"01GC9JEN2X052BAKW905PH9C36.jpeg\"",
   *   "Content-Type": "image/jpeg",
   *   "X-Amz-Server-Side-Encryption": "AES256"
   * },
   * ...
   * "url": "https://aus-uploaded-assets-production.s3-accelerate.amazonaws.com/20/13633840/01GC9JEN2X052BAKW905PH9C36?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ACCESS_KEY%2F20220906%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220906T141448Z&X-Amz-Expires=3600&X-Amz-Signature=476f8f09a97cae0bb582716d54dc58cdfbc754c5e20a2c492515d7ffce954971&X-Amz-SignedHeaders=content-disposition%3Bhost%3Bx-amz-server-side-encryption&x-amz-server-side-encryption=AES256"
   * ```
   *
   * To upload the image, make a PUT request to the URL and with the specified headers. Agents, end users, or anonymous users can make the request. The maximum file size is 2MB.
   *
   * The following curl example uploads the image:
   *
   * ```sh
   * curl -L -X PUT 'https://aus-uploaded-assets-production.s3-accelerate.amazonaws.com/20/13633840/01GC9JEN2X052BAKW905PH9C36?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ACCESS_KEY%2F20220906%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220906T141448Z&X-Amz-Expires=3600&X-Amz-Signature=476f8f09a97cae0bb582716d54dc58cdfbc754c5e20a2c492515d7ffce954971&X-Amz-SignedHeaders=content-disposition%3Bhost%3Bx-amz-server-side-encryption&x-amz-server-side-encryption=AES256' \
   *   -H 'Content-Disposition: attachment; filename="01GC9JEN2X052BAKW905PH9C36.jpeg"' \
   *   -H 'Content-Type: image/jpeg' \
   *   -H 'X-Amz-Server-Side-Encryption: AES256' \
   *   --data-binary "@{file}"
   * ```
   *
   * A successful response will return:
   *
   * ```
   * Status 200 OK
   * ```
   *
   * #### Request Body Format
   * The request body of `POST /api/v2/guide/user_images/uploads` must be a JSON object with the following properties:
   *
   * | Name         | Type   | Mandatory | Description |
   * | ------------ | ------ | --------- | ----------- |
   * | content_type | string | true      | The content type of the file to upload |
   * | file_size    | number | true      | Size of the file in bytes. Max size is 2000000 (2MB). |
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   */
  RequestUserImageUpload: {
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["RequestUserImageUploadResponse"];
        };
      };
    };
  };
  /** List Articles */
  ListArticles: {
    parameters: {
      query?: {
        /** @description Sorts the articles by one of the accepted values */
        sort_by?: "position" | "title" | "created_at" | "updated_at";
        /** @description Selects the order of the results. */
        sort_order?: "asc" | "desc";
        /**
         * @description You can use the incremental article endpoint to list all the articles that were updated since a certain date and time.
         * @example 1404345231
         */
        start_time?: number;
        /**
         * @description Only articles that have all the labels are returned.
         * @example photos,camera
         */
        label_names?: string;
      };
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticlesResponse"];
        };
      };
    };
  };
  /**
   * Show Article
   * @description Shows the properties of an article.
   *
   * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | the author
   * | sections      | the section
   * | categories    | the category
   * | translations  | the article, section and category translations, if any
   *
   * Unlike other sideloads, translations are embedded within the article because they're
   * not shared between resources.
   * Section and category translations are only sideloaded if present.
   */
  ShowArticle: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleResponse"];
        };
      };
    };
  };
  /** Update Article */
  UpdateArticle: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleResponse"];
        };
      };
    };
  };
  /**
   * Archive Article
   * @description Archives the article. You can restore the article using the Help Center user interface. See [Viewing and restoring archived articles](https://support.zendesk.com/hc/en-us/articles/235721587).
   *
   * #### Allowed for
   *
   * * Agents
   */
  ArchiveArticle: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Associate Attachments in Bulk to Article
   * @description You can associate attachments in bulk to only one article at a time,
   * with a maximum of 20 attachments per request.
   *
   * To create the attachments, see [Create Unassociated Attachment](/api-reference/help_center/help-center-api/article_attachments#create-unassociated-attachment).
   *
   * #### Allowed for
   *
   * * Agents
   */
  BulkAttachmentsArticles: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Comments
   * @description Lists the comments created by a specific user, or all comments made by all users on
   * a specific article.
   *
   * The `{locale}` for the article comments is required only for end users. Admins and agents can omit it.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * End-users can only list their own comments. If listing comments by user, they must specify `me` as the id.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | authors
   * | articles      | articles
   */
  ListArticleComments: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": components["schemas"]["CommentsResponse"];
        };
      };
    };
  };
  /**
   * Create Comment
   * @description Adds a comment to the specified [article](/api-reference/help_center/help-center-api/articles). Because comments are associated
   * with a specific article translation, or locale, you must specify a locale.
   *
   * #### Allowed for
   *
   * * End users
   *
   * Agents with the Help Center manager role can optionally supply a `created_at` as part of the `comment` object. If not provided, `created_at` is set to the current time.
   *
   * Supplying a `notify_subscribers` property with a value of false will prevent subscribers to the comment's article from receiving a comment creation email notification. This can be helpful when creating many comments at a time. Specify the property in the root of the JSON object, not in the "comment" object.
   */
  CreateArticleComment: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        headers: {
          /**
           * @description The URL of the new created comment
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/comments/{comment_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["CommentResponse"];
        };
      };
    };
  };
  /**
   * Show Comment
   * @description Shows the properties of the specified comment.
   *
   * The `{locale}` is required only for end users and anomynous users. Admins and agents can omit it.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   * * Anonymous users
   */
  ShowComment: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        comment_id: components["parameters"]["CommentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["CommentResponse"];
        };
      };
    };
  };
  /**
   * Update Comment
   * @description #### Allowed for
   *
   * * Agents
   * * The end user who created the comment
   */
  UpdateComment: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        comment_id: components["parameters"]["CommentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["CommentResponse"];
        };
      };
    };
  };
  /**
   * Delete Comment
   * @description #### Allowed for
   *
   * * Agents
   * * The end user who created the comment
   */
  DeleteComment: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        comment_id: components["parameters"]["CommentId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Article Labels
   * @description Lists all the labels in a given article.
   *
   * #### Allowed for
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListArticleLabels: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": components["schemas"]["LabelsResponse"];
        };
      };
    };
  };
  /**
   * Create Label
   * @description #### Allowed for
   *
   * * Agents
   */
  CreateArticleLabel: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description Created Response */
      201: {
        content: {
          "application/json": components["schemas"]["LabelResponse"];
        };
      };
    };
  };
  /**
   * Delete Label from Article
   * @description Removes the label from the specified article's list of labels.
   *
   * #### Allowed for
   *
   * * Agents
   */
  DeleteArticleLabel: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        label_id: components["parameters"]["LabelId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Update Article Source Locale
   * @description Updates the article's `source_locale` property. The source locale is the main language of the article. When you delete the article in the source locale, you delete all the article's translations.
   *
   * The endpoint sets one of the article's translation as the source locale of the article. The article in the previous source locale becomes a translation, which you can delete separately.
   *
   * The new source locale must be enabled in Guide. See [Enabling languages for your help center](https://support.zendesk.com/hc/en-us/articles/224857687#topic_ys2_kxh_tz). You can use the [List all enabled locales and default locale](/api-reference/help_center/help-center-api/translations/#list-enabled-locales-and-default-locale) endpoint to check for the enabled locales.
   *
   * #### Allowed for
   *
   * * Agents
   */
  UpdateArticleSourceLocale: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Article Subscriptions
   * @description Lists the subscriptions to a given article.
   *
   * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will list only the subscriptions created by the
   * requesting end-user.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | users
   * | articles      | articles
   * | sections      | sections
   *
   * Note that you need to specify the `articles` sideload to get the sections
   * and translations sideloaded because these are not directly associated with the
   * subscriptions.
   */
  ListArticleSubscriptions: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * Create Article Subscription
   * @description Creates a subscription to a given [article](/api-reference/help_center/help-center-api/articles).
   *
   * #### Allowed for
   *
   * * End-users
   *
   * Agents with the Help Center manager role can optionally supply a `user_id`
   * value. If provided, the user associated with `user_id` will be subscribed
   * to the article.
   */
  CreateArticleSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created subscription
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{subscription_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Show Article Subscription
   * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will only show a subscription created by the requesting end-user.
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   * | articles      | articles      | article subscriptions
   * | sections      | sections      | section subscriptions
   */
  ShowArticleSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Article Subscription
   * @description Removes the specified subscription from the specified [article](/api-reference/help_center/help-center-api/articles).
   *
   * #### Allowed for
   *
   * * End users
   */
  DeleteArticleSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Create Vote
   * @description Creates an up or down vote for a given [article](/api-reference/help_center/help-center-api/articles), [article comment](/api-reference/help_center/help-center-api/article_comments/), [post](/api-reference/help_center/help-center-api/posts), or [post comment](/api-reference/help_center/help-center-api/post_comments).
   * If a vote already exists for the source object, it's updated.
   *
   * #### Allowed for
   *
   * * End users
   */
  CreateArticleUpVote: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        headers: {
          /**
           * @description The URL of the new created vote
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/votes/{vote_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["VoteResponse"];
        };
      };
    };
  };
  /**
   * List Categories
   * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * The response will list only the categories that the agent, end user, or
   * anonymous user can view in the help center.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sorting
   *
   * You can sort the results with the `sort_by` and `sort_order` query string parameters.
   *
   * ```
   * GET /api/v2/help_center/en-us/categories.json?sort_by=updated_at&sort_order=asc
   * ```
   *
   * The `sort_by` parameter can have one of the following values:
   *
   * | value         | description
   * | ------------- | -----------
   * | `position`    | order set manually using the Arrange Content page. Default order
   * | `created_at`  | order by creation time
   * | `updated_at`  | order by update time
   *
   * The `sort_order` parameter can have one of the following values:
   *
   * | value   | description
   * | ------- | -----------
   * | `asc`   | ascending order
   * | `desc`  | descending order
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | translations  | the category translations, if any
   *
   * Translations are embedded within the category because they're
   * not shared between resources.
   */
  ListCategories: {
    parameters: {
      query?: {
        /** @description Sorts the results by one of the accepted values */
        sort_by?: "position" | "created_at" | "updated_at";
        /** @description Selects the order of the results. */
        sort_order?: "asc" | "desc";
      };
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesResponse"];
        };
      };
    };
  };
  /**
   * Create Category
   * @description You must specify a category name and locale. The locale can be omitted if it's specified
   * in the URL. Optionally, you can specify multiple [translations](/api-reference/help_center/help-center-api/translations) for
   * the category. The specified locales must be enabled for the current Help Center.
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  CreateCategory: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
    responses: {
      /** @description OK Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created category
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/categories/{category_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
    };
  };
  /**
   * Show Category
   * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | translations  | the category translations, if any
   *
   * Translations are embedded within the category because they're
   * not shared between resources.
   */
  ShowCategory: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description description */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
    };
  };
  /**
   * Update Category
   * @description These endpoints only update category-level metadata such as the sorting position.
   * They don't update category translations.
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  UpdateCategory: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
    };
  };
  /**
   * Delete Category
   * @description **WARNING: Every section and all articles in the category will also be deleted.**
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  DeleteCategory: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description No content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Create Section
   * @description Creates a section in a given [category](/api-reference/help_center/help-center-api/categories). You must
   * specify a section name and locale. The locale can be omitted if it's specified
   * in the URL. Optionally, you can specify multiple [translations](/api-reference/help_center/help-center-api/translations)
   * for the section. The specified locales must be enabled for
   * the current Help Center.
   *
   * #### Allowed for
   *
   * * Agents
   */
  CreateSection: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description description */
      201: {
        headers: {
          /**
           * @description The URL of the new created section
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/sections/{section_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SectionResponse"];
        };
      };
      /** @description Bad request Response */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Category Source Locale
   * @description The endpoint updates the category `source_locale` property
   *
   * #### Allowed for
   *
   * * Agents
   */
  UpdateCategorySourceLocale: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        category_id: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Sections
   * @description Lists all the sections in Help Center or in a specific [category](/api-reference/help_center/help-center-api/categories).
   *
   * The `{locale}` is required only for end users and anomynous users. Admins and agents can omit it.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * The response will list only the sections that the requesting agent,
   * end user, or anonymous user can view in the help center.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sorting
   *
   * You can sort the results with the `sort_by` and `sort_order` query string parameters.
   *
   * ```
   * GET /api/v2/help_center/en-us/sections.json?sort_by=updated_at&sort_order=asc
   * ```
   *
   * The `sort_by` parameter can have one of the following values:
   *
   * | value         | description
   * | ------------- | -----------
   * | `position`    | order set manually using the Arrange Content page. Default order
   * | `created_at`  | order by creation time
   * | `updated_at`  | order by update time
   *
   * The `sort_order` parameter can have one of the following values:
   *
   * | value   | description
   * | ------- | -----------
   * | `asc`   | ascending order
   * | `desc`  | descending order
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | categories    | the category
   * | translations  | the section and category translations, if any
   *
   * Unlike other sideloads, translations are embedded within the section because they're
   * not shared between resources.
   * Category translations are only sideloaded if categories are.
   */
  ListSections: {
    parameters: {
      query?: {
        /** @description Sorts the results by one of the accepted values */
        sort_by?: "position" | "created_at" | "updated_at";
        /** @description Selects the order of the results. */
        sort_order?: "asc" | "desc";
      };
      path: {
        locale: components["parameters"]["OptionalLocale"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SectionsResponse"];
        };
      };
    };
  };
  /**
   * Show Section
   * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   * * Anonymous users
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | categories    | the category
   * | translations  | the section and category translations, if any
   *
   * Unlike other sideloads, translations are embedded within the section since they're
   * not shared between resources.
   * [Category](/api-reference/help_center/help-center-api/categories) translations are only sideloaded if categories are.
   */
  ShowSection: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SectionResponse"];
        };
      };
    };
  };
  /**
   * Update Section
   * @description Update section. This endpoint updates section-level data, specifically:
   *
   * * name (in the source locale)
   * * description (in the source locale)
   * * position
   * * sorting
   * * category_id
   * * parent_section_id
   * * theme_template
   *
   * To update non-source section translations, see [Translations](/api-reference/help_center/help-center-api/translations).
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  UpdateSection: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SectionPutRequest"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SectionResponse"];
        };
      };
      /** @description Bad request Response */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Section
   * @description **WARNING: All articles in the section will also be deleted.**
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  DeleteSection: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /** Create Article */
  CreateArticle: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ArticleRequest"];
      };
    };
    responses: {
      /** @description OK Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created article
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/articles/{article_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ArticleResponse"];
        };
      };
    };
  };
  /**
   * Update Section Source Locale
   * @description This endpoint lets you set a section's source language to something other
   * than the default language of your Help Center. For example, if the default language
   * of your Help Center is English but your KB has a section only for Japanese customers,
   * you can set the section's source locale to 'ja'.
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  UpdateSectionSourceLocale: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * List Section Subscriptions
   * @description Lists the subscriptions to a given [section](/api-reference/help_center/help-center-api/sections).
   *
   * **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * For end-users, the response will list only the subscriptions created by the
   * requesting end-user.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | users
   * | sections      | sections
   * | translations  | translations of any sideloaded articles and sections
   *
   * To sideload the section translations, specify the `translations` sideload in
   * addition to `sections`.
   */
  ListSectionSubscriptions: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * Create Section Subscription
   * @description Creates a subscription to a given [section](/api-reference/help_center/help-center-api/sections).
   *
   * #### Allowed for
   *
   * * End-users
   *
   * Agents with the Help Center manager role can optionally supply a `user_id`
   * value. If provided, the user associated with `user_id` will be subscribed
   * to the section.
   */
  CreateSectionSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
      };
    };
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created subscription
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/subscriptions/{subscription_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Show Section Subscription
   * @description **Note**: `{/locale}` is an optional parameter for admins and agents. End users and anonymous users must provide the parameter.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   * | sections      | sections      | section subscriptions
   * | translations  | translations  | article or section subscriptions
   */
  ShowSectionSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
    };
  };
  /**
   * Delete Section Subscription
   * @description Removes the specified subscription from the specified [section](/api-reference/help_center/help-center-api/sections).
   *
   * #### Allowed for
   *
   * * End users
   */
  DeleteSectionSubscription: {
    parameters: {
      path: {
        locale: components["parameters"]["OptionalLocale"];
        section_id: components["parameters"]["SectionId"];
        subscription_id: components["parameters"]["SubscriptionId"];
      };
    };
    responses: {
      /** @description delete body */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Article Attachments
   * @description Lists all the article's attachments.
   *
   * **Note**: By default the pagination returns the maximum attachments per page, which is 100.
   *
   * #### Allowed for
   *
   *  * Agents
   *  * End users, as long as they can view the associated article
   *
   * #### Pagination
   *   * Cursor pagination (recommended)
   *   * Offset pagination
   *
   *   See [Pagination](/api-reference/introduction/pagination/).
   */
  ListArticleAttachments: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleAttachmentsResponse"];
        };
      };
    };
  };
  /**
   * Create Article Attachment
   * @description Creates an attachment for the specified [article](/api-reference/help_center/help-center-api/articles). You can specify whether the
   * attachment is `inline` or not. The default is false.
   *
   * #### Allowed for
   *
   * * Agents
   */
  CreateArticleAttachment: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        headers: {
          /**
           * @description The URL of the new created article attachment
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/articles/{article_id}/attachments.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ArticleAttachmentResponse"];
        };
      };
    };
  };
  /**
   * Show Article Attachment
   * @description Shows the properties of the specified attachment.
   *
   * **Note**: Omit `{/article_id}` to access unassociated article attachments.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users, as long as they can view the associated article
   */
  ShowArticleAttachment: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
        article_attachment_id: components["parameters"]["ArticleAttachmentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleAttachmentResponse"];
        };
      };
    };
  };
  /**
   * List Article Block Attachments
   * @description Lists all the article's block attachments. Block attachments are those that are not inline.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users, as long as they can view the associated article
   */
  ListBlockArticleAttachments: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleAttachmentsResponse"];
        };
      };
    };
  };
  /**
   * List Article Inline Attachments
   * @description Lists all the article's inline attachments.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users, as long as they can view the associated article
   */
  ListInlineArticleAttachments: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleAttachmentsResponse"];
        };
      };
    };
  };
  /**
   * List Translations
   * @description Lists all translations for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories).
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * For end users, the response will list only the translations for articles, sections, or categories that they can view in Help Center.
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListTranslations: {
    parameters: {
      query?: {
        /**
         * @description The value given is a comma-separated list of locale names;
         * only return translations in those locales
         *
         * @example en-us,en-uk
         */
        locales?: string;
        /**
         * @description Only return translations with the given outdated status
         * @example true
         */
        outdated?: boolean;
        /**
         * @description Only return translations with the given draft status
         * @example true
         */
        draft?: boolean;
      };
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationsResponse"];
        };
      };
    };
  };
  /**
   * Create Translation
   * @description Creates a translation for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories). Any locale
   * that you specify must be enabled for the current Help Center. The locale must also be
   * different from that of any existing translation associated with the source object.
   *
   * #### Allowed for
   *
   * * Help Center Managers
   * * Agents (article translations only)
   *
   * The requesting agent can create an article translation only if they can edit the article in Help Center.
   */
  CreateTranslation: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description description */
      201: {
        headers: {
          /**
           * @description The URL of the new created article attachment
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/translations/{translation_id}.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["TranslationResponse"];
        };
      };
    };
  };
  /**
   * Show Translation
   * @description #### Allowed for
   *
   * * Agents
   * * End-users
   */
  ShowTranslation: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
        locale: components["parameters"]["RequiredLocale"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationResponse"];
        };
      };
    };
  };
  /**
   * Update Translation
   * @description When updating a translation, any locale that you specify must be enabled for
   * the current Help Center. If you change the translation locale, it must be
   * different from that of any existing translation associated with the same
   * source object.
   *
   * #### Allowed for
   *
   * * Agents (only articles)
   */
  UpdateTranslation: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
        locale: components["parameters"]["RequiredLocale"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationResponse"];
        };
      };
    };
  };
  /**
   * List Missing Translations
   * @description Lists the locales that don't have a translation for a given [article](/api-reference/help_center/help-center-api/articles), [section](/api-reference/help_center/help-center-api/sections), or [category](/api-reference/help_center/help-center-api/categories).
   *
   * #### Allowed for
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListMissingTranslations: {
    parameters: {
      path: {
        article_id: components["parameters"]["ArticleId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesResponse"];
        };
      };
    };
  };
  /**
   * Create Unassociated Attachment
   * @description You can use this endpoint for bulk imports. It lets you upload a file without associating it
   * to an article until later. See [Associate Attachments in Bulk to Article](/api-reference/help_center/help-center-api/articles#associate-attachments-in-bulk-to-article).
   *
   * *Note:* Associate attachments to articles as soon as possible. For example, if you use the endpoint to bulk-import inline images, only signed-in end users can see the images; anonymous users don't have permission to view unassociated images. Also, from time to time, we purge old article attachments not associated to any article. To ensure you don't lose an uploaded file, associate it to an article.
   *
   * #### Allowed for
   *
   *   * Agents
   */
  CreateAttachment: {
    responses: {
      /** @description Created Response */
      201: {
        headers: {
          /**
           * @description The URL of the new created article attachment
           * @example https://{subdomain}.zendesk.com/api/v2/help_center/articles/attachments.json
           */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ArticleAttachmentResponse"];
        };
      };
    };
  };
  /**
   * Delete Article Attachment
   * @description #### Allowed for
   *
   * * Agents
   */
  DeleteArticleAttachment: {
    parameters: {
      path: {
        article_attachment_id: components["parameters"]["ArticleAttachmentId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List All Labels
   * @description Lists all the labels in the articles in Help Center.
   *
   * #### Allowed for
   *
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListAllArticleLabels: {
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["LabelsResponse"];
        };
      };
    };
  };
  /**
   * Show Label
   * @description Shows the properties of the specified label.
   *
   * #### Allowed for
   *
   * * Agents
   */
  ShowLabel: {
    parameters: {
      path: {
        label_id: components["parameters"]["LabelId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["LabelResponse"];
        };
      };
    };
  };
  /**
   * Delete Label
   * @description Removes the label from all articles and deletes it.
   *
   * #### Allowed for
   *
   * * Agents
   */
  DeleteLabel: {
    parameters: {
      path: {
        label_id: components["parameters"]["LabelId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
  /**
   * Search Articles
   * @description Returns a default number of 25 articles per page, up to a maximum of 1000 results. See [Pagination](/api-reference/introduction/pagination/). The `per_page` parameter, if provided, must be an integer between 1 and 100.
   *
   * The `page` parameter, if provided, must be an integer greater than 0.
   *
   * The results are sorted by relevance by default. You can also sort the results by `created_at` or `updated_at`.
   *
   * The [article objects](/api-reference/help_center/help-center-api/articles) returned by the search endpoint contain two additional properties:
   *
   * | Name        | Type   | Read-only | Mandatory | Comment
   * |-------------|--------|-----------|-----------|-------
   * | result_type | string | yes       | no        | For articles, always the string "article"
   * | snippet     | string | yes       | no        | The portion of an article that is relevant to the search query, with matching words or phrases delimited by `<em></em>` tags. Example: a query for "carrot potato" might return the snippet "...don't confuse `<em>`carrots`</em>` with `<em>`potatoes`</em>`..."
   *
   * You must specify at least one of the following parameters in your request:
   *
   * - query
   * - category
   * - section
   * - label_names
   *
   * #### Pagination
   *
   * - Offset pagination only
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 articles per page.
   *
   * #### Allowed for
   *
   * * Anonymous users
   */
  ArticleSearch: {
    parameters: {
      query?: {
        /** @description The search text to be matched or a search string. Examples: "carrot potato", "'carrot potato'". */
        query?: string;
        /** @description Limit the search to this category id. See [Filtering by Category](#filtering-by-category) */
        category?: number;
        /** @description Limit the search to this section id. See [Filtering by Section](#filtering-by-section) */
        section?: number;
        /** @description A comma-separated list of label names. See [Filtering by Labels](#filtering-by-labels) */
        label_names?: string;
        /** @description Search for articles in the specified locale. See [Filtering by Locale](#filtering-by-locale) */
        locale?: string;
        /** @description Enable search across all brands if true. Defaults to false if omitted. */
        multibrand?: boolean;
        /** @description Search for articles in the specified brand. */
        brand_id?: number;
        /** @description Limit the search to articles created before a given date (format YYYY-MM-DD). */
        created_before?: string;
        /** @description Limit the search to articles created after a given date (format YYYY-MM-DD). */
        created_after?: string;
        /** @description Limit the search to articles created on a given date (format YYYY-MM-DD). */
        created_at?: string;
        /** @description Limit the search to articles updated before a given date (format YYYY-MM-DD). */
        updated_before?: string;
        /** @description Limit the search to articles updated after a given date (format YYYY-MM-DD). */
        updated_after?: string;
        /** @description Limit the search to articles updated on a given date (format YYYY-MM-DD). */
        updated_at?: string;
        /** @description One of created_at or updated_at. Defaults to sorting by relevance */
        sort_by?: string;
        /** @description One of asc or desc. Defaults to desc */
        sort_order?: string;
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArticleSearchResponse"];
        };
      };
    };
  };
  /**
   * Search Posts
   * @description Returns a maximum of 25 posts per page, up to a maximum of 1000 results. See [Pagination](/api-reference/introduction/pagination/).
   *
   * The results are sorted by relevance by default. You can also sort the results by `created_at` or `updated_at`.
   *
   * #### Pagination
   *
   * - Offset pagination only
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * Returns a maximum of 100 articles per page.
   *
   * #### Allowed for
   *
   * * End users
   */
  CommunityPostSearch: {
    parameters: {
      query: {
        /**
         * @description Search text to be matched or a search string. Examples: "carrot potato", "''carrot potato''"'
         *
         * @example help center
         */
        query: string;
        /** @description Search by topic ID. See [Filtering by Topic](#filtering-by-topic) */
        topic?: number;
        /** @description the search to posts created before a given date (format YYYY-MM-DD) */
        created_before?: string;
        /** @description Search  posts created after a given date (format YYYY-MM-DD) */
        created_after?: string;
        /** @description Search posts created on a given date (format YYYY-MM-DD) */
        created_at?: string;
        /** @description Search posts updated before a given date (format YYYY-MM-DD) */
        updated_before?: string;
        /** @description Search posts updated after a given date (format YYYY-MM-DD) */
        updated_after?: string;
        /** @description Search posts updated on a given date (format YYYY-MM-DD) */
        updated_at?: string;
        /** @description Sort by `created_at` or `updated_at`. Defaults to sorting by relevance */
        sort_by?: string;
        /** @description Sort in ascending or descending order. Default is descending order. */
        sort_order?: string;
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["CommunityPostSearchResponse"];
        };
      };
    };
  };
  /**
   * List Enabled Locales and Default Locale
   * @description #### Allowed for
   *
   *  * Agents
   *  * End users
   */
  ListLocales: {
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["LocalesWithDefaultResponse"];
        };
      };
    };
  };
  /**
   * Delete Translation
   * @description Deletes a translation, provided it's not the only translation for the source object.
   *
   * #### Allowed for
   *
   * * Agents
   */
  DeleteTranslation: {
    parameters: {
      path: {
        translation_id: components["parameters"]["TranslationId"];
      };
    };
    responses: {
      /** @description Delete response */
      204: {
        content: never;
      };
    };
  };
  /**
   * List User Segments
   * @description Some user segments can only be applied to sections and topics on certain Guide plans. For instance, user segments with a `user_type` of `"staff"` cannot be applied to sections and topics on accounts on the Guide Lite plan or the Suite Team plan. To request only user segments applicable on the account's current Suite plan, use the `/api/v2/help_center/user_segments/applicable.json` endpoint.
   *
   * The `/api/v2/help_center/users/{user_id}/user_segments.json` endpoint returns the list of user segments that a particular user belongs to. This is the only list endpoint that agents have access to. When an agent makes a request to this endpoint with another user's id, the response only includes user segments that the requesting agent also belongs to.
   *
   * These endpoints support pagination, as described in the [pagination documentation](/api-reference/introduction/pagination/).
   *
   * #### Allowed for
   *
   * * Help Center managers
   * * Agents
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListUserSegments: {
    parameters: {
      query?: {
        /** @description Only built_in user segments if true, only custom user segments if false */
        built_in?: boolean;
      };
    };
    responses: {
      /** @description OK response */
      200: {
        content: {
          "application/json": components["schemas"]["UserSegmentsResponse"];
        };
      };
    };
  };
  /**
   * Create User Segment
   * @description #### Allowed for
   *
   * * Help Center managers
   */
  CreateUserSegment: {
    responses: {
      /** @description Created response */
      201: {
        content: {
          "application/json": components["schemas"]["UserSegmentResponse"];
        };
      };
      /** @description Bad request response */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Show User Segment
   * @description #### Allowed for
   *
   * * Help Center managers
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ShowUserSegment: {
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserSegmentResponse"];
        };
      };
    };
  };
  /**
   * Update User Segment
   * @description #### Allowed for
   *
   * * Help Center managers
   */
  UpdateUserSegment: {
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserSegmentResponse"];
        };
      };
      /** @description Bad request Response */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete User Segment
   * @description #### Allowed for
   *
   * * Help Center managers
   */
  DeleteUserSegment: {
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
    responses: {
      /** @description Response when the object was deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * List Sections with User Segment
   * @description Lists the sections that use the specified user segment.
   *
   * This endpoint supports pagination as described in [Pagination](/api-reference/help_center/help-center-api/help-center-api/#pagination).
   *
   * #### Allowed for
   *
   * * Help Center managers
   */
  ListUserSegmentSections: {
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["SectionsResponse"];
        };
      };
    };
  };
  /**
   * List Topics with User Segment
   * @description Lists the topics that use the specified user segment.
   *
   * This endpoint supports pagination as described in [Pagination](/api-reference/help_center/help-center-api/help-center-api/#pagination).
   *
   * #### Allowed for
   *
   * * Help Center managers
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListUserSegmentTopics: {
    parameters: {
      path: {
        user_segment_id: components["parameters"]["UserSegmentId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["TopicsResponse"];
        };
      };
    };
  };
  /**
   * List Content Subscriptions By User
   * @description Lists the content subscriptions of a given user. To list your own subscriptions,
   * specify `me` as the user id.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   * | articles      | articles      | article subscriptions
   * | sections      | sections      | section subscriptions
   * | questions     | questions     | question subscriptions
   * | topics        | topics        | topic subscriptions
   * | translations  | translations  | article or section subscriptions
   */
  ListContentSubscriptionsByUserId: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * List User Subscriptions By User
   * @description Lists the user subscriptions of a given user. To list your own subscriptions,
   * specify `me` as the user id.
   *
   * #### Allowed for
   *
   * * Agents
   * * End-users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   *
   * #### Sideloads
   *
   * The following sideloads are supported:
   *
   * | Name          | Will sideload | For
   * |---------------|---------------|----
   * | users         | users         | all
   */
  ListUserSubscriptionsByUserId: {
    parameters: {
      query?: {
        /**
         * @description Selects whether to find who the given user is following ("followings")
         * or who is following the given user ("followers").
         * The default is "followers".
         */
        type?: "followings" | "followers";
      };
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserSubscriptionsResponse"];
        };
      };
    };
  };
  /**
   * List Votes
   * @description Lists all votes cast by a given user, or all votes cast by all users for a given article, article comment, post, or post comment.
   *
   * To list only your own votes, specify `me` as the user id.
   *
   * The `{locale}` for article and article comment votes is required only for end users. Admins and agents can omit it.
   *
   * #### Allowed for
   *
   * * Agents
   * * End users
   *
   * #### Pagination
   *
   * * Cursor pagination (recommended)
   * * Offset pagination
   *
   * See [Pagination](/api-reference/introduction/pagination/).
   */
  ListUserVotes: {
    parameters: {
      path: {
        user_id: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["VotesResponse"];
        };
      };
    };
  };
  /**
   * Show Vote
   * @description #### Allowed for
   *
   * * Agents
   * * End users
   *
   * #### Sideloads
   * The following sideloads are supported:
   *
   * | Name          | Will sideload
   * |---------------|--------------
   * | users         | authors
   * | articles      | articles
   * | translations  | translations of any sideloaded articles
   * | posts         | posts
   * | comments      | comments
   *
   * Note that you must sideload `articles` in order to sideload `translations`.
   */
  ShowVote: {
    parameters: {
      path: {
        vote_id: components["parameters"]["VoteId"];
      };
    };
    responses: {
      /** @description OK Response */
      200: {
        content: {
          "application/json": components["schemas"]["VoteResponse"];
        };
      };
    };
  };
  /**
   * Delete Vote
   * @description #### Allowed for
   *
   * * Agents
   * * End users
   */
  DeleteVote: {
    parameters: {
      path: {
        vote_id: components["parameters"]["VoteId"];
      };
    };
    responses: {
      /** @description Default success response */
      204: {
        content: never;
      };
    };
  };
}
